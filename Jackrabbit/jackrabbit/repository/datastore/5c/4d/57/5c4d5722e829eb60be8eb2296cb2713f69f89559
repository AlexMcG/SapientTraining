{\rtf1\ansi\ansicpg936\uc2 \deff0\deflang1033\deflangfe2052{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Times;}
{\f5\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva;}
{\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;}
{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York;}{\f13\fnil\fcharset134\fprq0{\*\panose 00000000000000000000}System;}
{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\froman\fcharset128\fprq1{\*\panose 00000000000000000000}Mincho{\*\falt \'c3\'f7\'b3\'af};}{\f16\fnil\fcharset129\fprq1{\*\panose 00000000000000000000}Batang{\*\falt ??};}
{\f17\fnil\fcharset134\fprq2{\*\panose 02010600030101010101}\'cb\'ce\'cc\'e5{\*\falt SimSun};}{\f18\fnil\fcharset136\fprq2{\*\panose 02020300000000000000}PMingLiU{\*\falt \'d0\'c2\'bc\'9a\'c3\'f7\'f3\'77};}
{\f19\fmodern\fcharset128\fprq1{\*\panose 00000000000000000000}Gothic{\*\falt ?????};}{\f20\fmodern\fcharset129\fprq1{\*\panose 00000000000000000000}Dotum{\*\falt ??};}
{\f21\fnil\fcharset134\fprq2{\*\panose 02010600030101010101}\'ba\'da\'cc\'e5{\*\falt SimHei};}{\f22\fmodern\fcharset136\fprq1{\*\panose 02020309000000000000}MingLiU{\*\falt \'bc\'9a\'c3\'f7\'f3\'77};}
{\f23\froman\fcharset128\fprq1{\*\panose 00000000000000000000}MS Mincho{\*\falt \'a3\'cd\'a3\'d3 \'c3\'f7\'b3\'af};}{\f24\froman\fcharset129\fprq1{\*\panose 00000000000000000000}Gulim{\*\falt ??};}
{\f25\fmodern\fcharset128\fprq1{\*\panose 00000000000000000000}MS Gothic{\*\falt \'a3\'cd\'a3\'d3 \'a5\'b4\'a5\'b7\'a5\'c3\'a5\'af};}{\f26\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Century;}
{\f27\fnil\fcharset134\fprq2{\*\panose 02010600030101010101}@\'cb\'ce\'cc\'e5;}{\f28\fnil\fcharset134\fprq2{\*\panose 02010600030101010101}@\'ba\'da\'cc\'e5;}{\f29\fmodern\fcharset134\fprq1{\*\panose 020b0609010101010101}\'ce\'c4\'b6\'a6\'d6\'d0\'c1\'a5;}
{\f30\fmodern\fcharset134\fprq1{\*\panose 020b0609010101010101}@\'ce\'c4\'b6\'a6\'d6\'d0\'c1\'a5;}{\f31\froman\fcharset177\fprq2{\*\panose 00000000000000000000}Times New Roman (Hebrew);}
{\f32\froman\fcharset178\fprq2{\*\panose 00000000000000000000}Times New Roman (Arabic);}{\f33\fswiss\fcharset177\fprq2{\*\panose 00000000000000000000}Arial (Hebrew);}{\f34\fswiss\fcharset178\fprq2{\*\panose 00000000000000000000}Arial (Arabic);}
{\f35\fmodern\fcharset177\fprq1{\*\panose 00000000000000000000}Courier New (Hebrew);}{\f36\fmodern\fcharset178\fprq1{\*\panose 00000000000000000000}Courier New (Arabic);}{\f37\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}@??\'a8\'ac? Western;}
{\f38\froman\fcharset238\fprq2 Times New Roman CE;}{\f39\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f41\froman\fcharset161\fprq2 Times New Roman Greek;}{\f42\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f43\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f44\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f45\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f46\fswiss\fcharset238\fprq2 Arial CE;}{\f47\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f49\fswiss\fcharset161\fprq2 Arial Greek;}{\f50\fswiss\fcharset162\fprq2 Arial Tur;}{\f51\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f52\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f53\fswiss\fcharset186\fprq2 Arial Baltic;}
{\f54\fmodern\fcharset238\fprq1 Courier New CE;}{\f55\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f57\fmodern\fcharset161\fprq1 Courier New Greek;}{\f58\fmodern\fcharset162\fprq1 Courier New Tur;}{\f59\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f60\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f61\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f176\fnil\fcharset0\fprq2 SimSun Western{\*\falt SimSun};}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 \snext0 Normal;}{
\s1\qj \fi420\li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\cufi200 \b\fs21\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext0 heading 1;}{
\s2\qj \li0\ri0\sb260\sa260\sl416\slmult1\keep\keepn\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\fs32\lang1033\langfe2052\kerning2\loch\f1\hich\af1\dbch\af21\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext0 heading 2;}{
\s3\qj \li0\ri0\sb260\sa260\sl416\slmult1\keep\keepn\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\fs32\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext0 heading 3;}{\*\cs10 
\additive Default Paragraph Font;}{\s15\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\fs20\lang1033\langfe2052\loch\f21\hich\af2\dbch\af21\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext15 HTML Preformatted;}{\s16\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\fs24\lang1033\langfe2052\loch\f17\hich\af17\dbch\af17\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext16 Normal (Web);}{\s17\ql \li0\ri0\nowidctlpar\tqc\tx4153\tqr\tx8306\aspalpha\aspnum\faauto\nosnaplinegrid\adjustright\rin0\lin0\itap0 
\fs18\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext17 footer;}{\*\cs18 \additive \sbasedon10 page number;}{\s19\qc \li0\ri0\nowidctlpar\brdrb\brdrs\brdrw15\brsp20 
\tqc\tx4153\tqr\tx8306\aspalpha\aspnum\faauto\nosnaplinegrid\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext19 header;}{
\s20\ql \li0\ri0\sb120\sa120\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\caps\fs21\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext0 \sautoupd toc 1;}{
\s21\ql \li210\ri0\nowidctlpar\tqr\tldot\tx8296\aspalpha\aspnum\faauto\adjustright\rin0\lin210\itap0 \scaps\fs21\lang1024\langfe1024\kerning2\loch\f0\hich\af0\dbch\af17\cgrid\noproof\langnp1033\langfenp2052 \sbasedon0 \snext0 \sautoupd toc 2;}{
\s22\ql \li420\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin420\itap0 \i\fs21\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext0 \sautoupd toc 3;}{
\s23\ql \li630\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin630\itap0 \fs21\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext0 \sautoupd toc 4;}{
\s24\ql \li840\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin840\itap0 \fs21\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext0 \sautoupd toc 5;}{
\s25\ql \li1050\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin1050\itap0 \fs21\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext0 \sautoupd toc 6;}{
\s26\ql \li1260\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin1260\itap0 \fs21\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext0 \sautoupd toc 7;}{
\s27\ql \li1470\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin1470\itap0 \fs21\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext0 \sautoupd toc 8;}{
\s28\ql \li1680\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin1680\itap0 \fs21\lang1033\langfe2052\kerning2\loch\f0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 \sbasedon0 \snext0 \sautoupd toc 9;}{\*\cs29 \additive \ul\cf2 \sbasedon10 
Hyperlink;}{\*\cs30 \additive \i \sbasedon10 Emphasis;}}{\*\listtable{\list\listtemplateid680568514\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689
\'01{\uc1\u-3988 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li630\jclisttab\tx630 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\leveltemplateid67698691\'01{\uc1\u-3986 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li1050\jclisttab\tx1050 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\leveltemplateid67698693\'01{\uc1\u-3979 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li1470\jclisttab\tx1470 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01{\uc1\u-3988 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li1890\jclisttab\tx1890 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01{\uc1\u-3986 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li2310\jclisttab\tx2310 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01{\uc1\u-3979 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li2730\jclisttab\tx2730 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01{\uc1\u-3988 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li3150
\jclisttab\tx3150 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01{\uc1\u-3986 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li3570\jclisttab\tx3570 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01{\uc1\u-3979 ?};}{\levelnumbers;}\f14
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li3990\jclisttab\tx3990 }{\listname ;}\listid603072844}{\list\listtemplateid221573314\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\leveltemplateid271606926\'02\'00\'a3\'ae;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 \fi-360\li360\jclisttab\tx360 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'01);}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li840\jclisttab\tx840 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'02.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li1260\jclisttab\tx1260 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698703\'02\'03.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li1680\jclisttab\tx1680 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'04);}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li2100\jclisttab\tx2100 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'05.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li2520\jclisttab\tx2520 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698703\'02\'06.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li2940\jclisttab\tx2940 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'07);}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li3360\jclisttab\tx3360 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'08.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li3780\jclisttab\tx3780 }{\listname ;}\listid627396641}{\list\listtemplateid732981846
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat3\levelspace0\levelindent0{\leveltext\'01\'00;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 \fi-360\li360\jclisttab\tx360 }{\listlevel
\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'03\'00.\'01;}{\levelnumbers\'01\'03;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 \fi-360\li360\jclisttab\tx360 }{\listlevel\levelnfc0
\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'05\'00.\'01.\'02;}{\levelnumbers\'01\'03\'05;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 \fi-720\li720\jclisttab\tx720 }{\listlevel\levelnfc0
\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'07\'00.\'01.\'02.\'03;}{\levelnumbers\'01\'03\'05\'07;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 \fi-720\li720\jclisttab\tx720 }{\listlevel
\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'09\'00.\'01.\'02.\'03.\'04;}{\levelnumbers\'01\'03\'05\'07\'09;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 \fi-1080\li1080
\jclisttab\tx1080 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'0b\'00.\'01.\'02.\'03.\'04.\'05;}{\levelnumbers\'01\'03\'05\'07\'09\'0b;}\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias1 \fi-1080\li1080\jclisttab\tx1080 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'0d\'00.\'01.\'02.\'03.\'04.\'05.\'06;}{\levelnumbers
\'01\'03\'05\'07\'09\'0b\'0d;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 \fi-1080\li1080\jclisttab\tx1080 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'0f\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 \fi-1440\li1440\jclisttab\tx1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\'11\'00.\'01.\'02.\'03..\'04.\'05.\'06.\'07.\'08;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f\'11;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 \fi-1440\li1440\jclisttab\tx1440 }
{\listname ;}\listid986015671}{\list\listtemplateid-523321040\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid1792572666\'02\'00\'a3\'ae;}{\levelnumbers\'01;}
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 \fi-360\li360\jclisttab\tx360 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'01);}{\levelnumbers
\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li840\jclisttab\tx840 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'02.;}{\levelnumbers
\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li1260\jclisttab\tx1260 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698703\'02\'03.;}{\levelnumbers
\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li1680\jclisttab\tx1680 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'04);}{\levelnumbers
\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li2100\jclisttab\tx2100 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'05.;}{\levelnumbers
\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li2520\jclisttab\tx2520 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698703\'02\'06.;}{\levelnumbers
\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li2940\jclisttab\tx2940 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'07);}{\levelnumbers
\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li3360\jclisttab\tx3360 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'08.;}{\levelnumbers
\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li3780\jclisttab\tx3780 }{\listname ;}\listid1545823155}{\list\listtemplateid-864268048\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\leveltemplateid986982880\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 \fi-360\li360\jclisttab\tx360 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'01);}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li840\jclisttab\tx840 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'02.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li1260\jclisttab\tx1260 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698703\'02\'03.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li1680\jclisttab\tx1680 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'04);}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li2100\jclisttab\tx2100 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'05.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li2520\jclisttab\tx2520 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698703\'02\'06.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li2940\jclisttab\tx2940 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'07);}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li3360\jclisttab\tx3360 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'08.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li3780\jclisttab\tx3780 }{\listname ;}\listid1613777493}{\list\listtemplateid2096762242\listhybrid
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698703\'02\'00..;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li855\jclisttab\tx855 }
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'03\'00.\'01;}{\levelnumbers\'01\'03;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 
\fi-360\li795\jclisttab\tx795 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'05\'00.\'01.\'02;}{\levelnumbers\'01\'03\'05;}\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias1 \fi-720\li1155\jclisttab\tx1155 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext\leveltemplateid67698703
\'07\'00.\'01.\'02.\'03;}{\levelnumbers\'01\'03\'05\'07;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 \fi-720\li1155\jclisttab\tx1155 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levellegal\levelspace0
\levelindent0{\leveltext\leveltemplateid67698713\'09\'00.\'01.\'02.\'03.\'04;}{\levelnumbers\'01\'03\'05\'07\'09;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 \fi-1080\li1515\jclisttab\tx1515 }{\listlevel\levelnfc0\levelnfcn0\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'0b\'00.\'01.\'02.\'03.\'04.\'05;}{\levelnumbers\'01\'03\'05\'07\'09\'0b;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 
\fi-1080\li1515\jclisttab\tx1515 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext\leveltemplateid67698703\'0d\'00.\'01.\'02.\'03.\'04.\'05.\'06;}{\levelnumbers
\'01\'03\'05\'07\'09\'0b\'0d;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 \fi-1080\li1515\jclisttab\tx1515 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext
\leveltemplateid67698713\'0f\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias1 \fi-1440\li1875\jclisttab\tx1875 }{\listlevel\levelnfc0\levelnfcn0\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levellegal\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'11\'00.\'01.\'02.\'03.\'04.\'05.\'06..\'07.\'08;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f\'11;}\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias1 \fi-1440\li1875\jclisttab\tx1875 }{\listname ;}\listid1731612636}{\list\listtemplateid-544201900\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0
{\leveltext\leveltemplateid67698689\'01{\uc1\u-3988 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li420\jclisttab\tx420 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01{\uc1\u-3986 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li840\jclisttab\tx840 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01{\uc1\u-3979 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li1260\jclisttab\tx1260 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01{\uc1\u-3988 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li1680\jclisttab\tx1680 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01{\uc1\u-3986 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li2100
\jclisttab\tx2100 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01{\uc1\u-3979 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li2520\jclisttab\tx2520 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01{\uc1\u-3988 ?};}{\levelnumbers;}\f14
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li2940\jclisttab\tx2940 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691
\'01{\uc1\u-3986 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li3360\jclisttab\tx3360 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\leveltemplateid67698693\'01{\uc1\u-3979 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li3780\jclisttab\tx3780 }{\listname ;}\listid1907762277}{\list\listtemplateid-1794577946\listhybrid{\listlevel\levelnfc0
\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid-588059834\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li360\jclisttab\tx360 }{\listlevel
\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'01);}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li840\jclisttab\tx840 }{\listlevel
\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'02.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li1260\jclisttab\tx1260 }{\listlevel
\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698703\'02\'03.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li1680\jclisttab\tx1680 }{\listlevel
\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'04);}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li2100\jclisttab\tx2100 }{\listlevel
\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'05.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li2520\jclisttab\tx2520 }{\listlevel
\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698703\'02\'06.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li2940\jclisttab\tx2940 }{\listlevel
\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698713\'02\'07);}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li3360\jclisttab\tx3360 }{\listlevel
\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698715\'02\'08.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-420\li3780\jclisttab\tx3780 }{\listname 
;}\listid1975789648}{\list\listtemplateid-626076448\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01{\uc1\u-3988 ?};}{\levelnumbers;}\f14\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li420\jclisttab\tx420 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691
\'01{\uc1\u-3986 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li840\jclisttab\tx840 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\leveltemplateid67698693\'01{\uc1\u-3979 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li1260\jclisttab\tx1260 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\leveltemplateid67698689\'01{\uc1\u-3988 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li1680\jclisttab\tx1680 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01{\uc1\u-3986 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li2100\jclisttab\tx2100 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01{\uc1\u-3979 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li2520\jclisttab\tx2520 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01{\uc1\u-3988 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li2940\jclisttab\tx2940 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01{\uc1\u-3986 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li3360
\jclisttab\tx3360 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01{\uc1\u-3979 ?};}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-420\li3780\jclisttab\tx3780 }{\listname ;}\listid2068868566}}{\*\listoverridetable{\listoverride\listid2068868566\listoverridecount0\ls1}{\listoverride\listid603072844\listoverridecount0\ls2}
{\listoverride\listid1907762277\listoverridecount0\ls3}{\listoverride\listid1731612636\listoverridecount0\ls4}{\listoverride\listid1545823155\listoverridecount0\ls5}{\listoverride\listid627396641\listoverridecount0\ls6}{\listoverride\listid1975789648
\listoverridecount0\ls7}{\listoverride\listid1613777493\listoverridecount0\ls8}{\listoverride\listid986015671\listoverridecount0\ls9}}{\*\revtbl {Unknown;}}{\info{\title 1}{\author yihui}{\operator xh}{\creatim\yr2000\mo8\dy19\hr1\min9}{\revtim\yr2000\mo8\dy19\hr11\min36}
{\version6}{\edmins12}{\nofpages85}{\nofwords15420}{\nofchars-32766}{\*\company pku.founder}{\nofcharsws0}{\vern8249}}\paperw11906\paperh16838\margl1800\margr1800\margt1440\margb1440\gutter0 
\deftab425\ftnbj\aenddoc\pgnstart0\hyphcaps0\formshade\horzdoc\dgmargin\dghspace180\dgvspace156\dghorigin1800\dgvorigin1440\dghshow0\dgvshow2\jcompress\lnongrid\viewkind1\viewscale100\nolnhtadjtbl {\*\fchars 
!),.:\'3b?]\'7d\'a1\'a7\'a1\'a4\'a1\'a6\'a1\'a5\'a8\'44\'a1\'ac\'a1\'af\'a1\'b1\'a1\'ad\'a1\'c3\'a1\'a2\'a1\'a3\'a1\'a8\'a1\'a9\'a1\'b5\'a1\'b7\'a1\'b9\'a1\'bb\'a1\'bf\'a1\'b3\'a1\'bd\'a3\'a1\'a3\'a2\'a3\'a7\'a3\'a9\'a3\'ac\'a3\'ae\'a3\'ba\'a3\'bb
\'a3\'bf\'a3\'dd\'a3\'e0\'a3\'fc\'a3\'fd\'a1\'ab\'a1\'e9}{\*\lchars ([\'7b\'a1\'a4\'a1\'ae\'a1\'b0\'a1\'b4\'a1\'b6\'a1\'b8\'a1\'ba\'a1\'be\'a1\'b2\'a1\'bc\'a3\'a8\'a3\'ae\'a3\'db\'a3\'fb\'a1\'ea\'a3\'a4}\fet0\sectd 
\pgnrestart\pgnstarts0\pgndbnum\linex0\headery851\footery992\colsx425\endnhere\titlepg\sectlinegrid312\sectspecifyl {\footer \pard\plain \s17\qc \li0\ri0\nowidctlpar
\tqc\tx4153\tqr\tx8306\pvpara\phmrg\posxc\posy0\aspalpha\aspnum\faauto\nosnaplinegrid\adjustright\rin0\lin0\itap0 \fs18\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\field{\*\fldinst {\cs18 
\hich\af0\dbch\af17\loch\f0 PAGE  }}{\fldrslt {\cs18\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \uc1\u-14468\'3f}}}{\cs18 
\par }\pard \s17\qc \li0\ri0\nowidctlpar\tqc\tx4153\tqr\tx8306\aspalpha\aspnum\faauto\nosnaplinegrid\adjustright\rin0\lin0\itap0 {
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta \dbch ..}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta \dbch ..}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta \dbch ..}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxta \dbch )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb \dbch (}{\pntxta \dbch )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb \dbch (}{\pntxta \dbch )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb \dbch (}
{\pntxta \dbch )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb \dbch (}{\pntxta \dbch )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb \dbch (}{\pntxta \dbch )}}\pard\plain \s20\ql \li0\ri0\sb120\sa120\nowidctlpar
\tqr\tldot\tx8296\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\caps\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs24 
\par }\pard\plain \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\fs84 \hich\af0\dbch\af17\loch\f0 Linux}{\fs84 \loch\af0\hich\af0\dbch\f17 \'c4\'da\'ba\'cb\'b1\'e0\'b3\'cc}{\fs84 
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\hich\af0\dbch\af17\loch\f0                                     
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0                                  }{\fs28 \loch\af0\hich\af0\dbch\f17 \'d6\'f8\'d5\'df\loch\af0\hich\af0\dbch\f17 \'a3\'ba}{\fs28 \hich\af0\dbch\af17\loch\f0 Ori Pomerantz
\par \hich\af0\dbch\af17\loch\f0                          }{\fs28 \loch\af0\hich\af0\dbch\f17 \'b7\'ad\'d2\'eb\'a3\'ba\'d0\'ec\'bb\'d4}{
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\hich\af0\dbch\af17\loch\f0 2000}{\loch\af0\hich\af0\dbch\f17 \'c4\'ea}{\hich\af0\dbch\af17\loch\f0 8}{\loch\af0\hich\af0\dbch\f17 \'d4\'c2}{\hich\af0\dbch\af17\loch\f0 19
}{\loch\af0\hich\af0\dbch\f17 \'c8\'d5}{
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {
\par 
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\fs28 \loch\af0\hich\af0\dbch\f17 \'d2\'eb\'d5\'df\'c7\'b0\'d1\'d4}{\fs28 
\par }\pard \qj \fi570\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\fs28 \loch\af0\hich\af0\dbch\f17 \'d5\'e2\'ca\'c7\'ce\'d2\'b5\'c4\'b5\'da\'d2\'bb\'b4\'ce\'b3\'a2\'ca\'d4\'a3\'ac\'d4\'da\'b4\'cb\'d6\'ae\'c7\'b0\'ce\'d2\'bb\'b9
\'c3\'bb\'d3\'d0\'bd\'d3\'b4\'a5\'b9\'fd}{\fs28 \hich\af0\dbch\af17\loch\f0 Linux}{\fs28 \loch\af0\hich\af0\dbch\f17 \'a3\'ac\'cb\'f9\'d2\'d4\'b7\'ad\'d2\'eb\'b5\'c3\'ba\'dc\'b4\'d6\'b2\'da\'a3\'ac\'d3\'d0\'b5\'c4\'b5\'d8\'b7\'bd\'ce\'d2\'d7\'d4\'bc\'ba
\'d2\'b2\'b2\'bb\'c3\'f7\'b0\'d7\'a3\'ac\'d6\'bb\'ba\'c3\'d5\'d5\'d7\'c5\'b7\'ad\'cf\'c2\'c0\'b4\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b6\'f8\'c7\'d2\'bc\'b1\'bc\'b1\'b4\'d2\'b4\'d2\'a3\'ac\'c3\'ab\'c3\'ab\'b2\'dd\'b2\'dd\'a3\'ac\'d2\'bb\'b6\'a8\'d3\'d0
\'d0\'ed\'b6\'e0\'b4\'ed\'ce\'f3\'bb\'f2\'b2\'bb\'b5\'b1\'d6\'ae\'b4\'a6\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'d2\'bb\'cf\'f2\'be\'cd\'ca\'c7\'d5\'e2\'c3\'b4\'c3\'ab\'b2\'dd\'b5\'c4\'c0\'b2\'a3\'ac\'d7\'dc\'ca\'c7\'b8\'f8\'ce\'d2\'b5\'c4\'d7\'e9
\'d6\'af\'b6\'aa\'c1\'b3\'a1\'a3}{\fs28 {\field{\*\fldinst SYMBOL 74 \\f "Wingdings" \\s 14}{\fldrslt\f14\fs28}}}{\fs28 \loch\af0\hich\af0\dbch\f17 \'cb\'f9\'d2\'d4\'c8\'e7\'b9\'fb\'c4\'e3\'b7\'a2\'cf\'d6\'c1\'cb\'d3\'d0\'ca\'b2\'c3\'b4\'b4\'ed\'ce\'f3
\'bb\'f2\'d5\'df\'bd\'e2\'ca\'cd\'b2\'bb\'c7\'e5\'b5\'c4\'b5\'d8\'b7\'bd\'a3\'ac\'cf\'a3\'cd\'fb\'c4\'dc\'b9\'bb\'d6\'b8\'d5\'fd\'a3\'ac\'be\'b4\'c7\'eb\'b0\'d1\'c4\'fa\'b5\'c4\'bd\'f0\'d3\'f1\'d6\'ae\'d1\'d4\'b7\'a2\'b5\'bd\'ce\'d2\'b5\'c4\'d0\'c5
\'cf\'e4\'c0\'ef\'a1\'a3}{\fs28 
\par }\pard \qj \fi560\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\cufi200 {\fs28 \loch\af0\hich\af0\dbch\f17 \'b1\'be\'c8\'cb\'b4\'cb\'be\'d9\'d6\'bc\'d4\'da\'bd\'e1\'ca\'b6\'cc\'ec\'cf\'c2}{\fs28 \hich\af0\dbch\af17\loch\f0 Linux}{
\fs28 \loch\af0\hich\af0\dbch\f17 \'d3\'a2\'d0\'db\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b1\'be\'c8\'cb\'d0\'ec\'bb\'d4\'a3\'a8\'ba\'c5\'a3\'ba\'cb\'ae\'b9\'e2\'d4\'c2\'d3\'b0\'a3\'ac\'d5\'e6\'c3\'fc\'cc\'ec\'d7\'d3\'a3\'a9\'cf\'d6\'d4\'da\'b1\'b1\'b4\'f3
\'b7\'bd\'d5\'fd\loch\af0\hich\af0\dbch\f17 \'d1\'d0\'be\'bf\'d4\'ba\'b6\'c1\'d1\'d0\'a3\'ac\'d6\'f7\'d2\'aa\'d1\'d0\'be\'bf\'b7\'bd\'cf\'f2\'ca\'c7\'d0\'c5\'cf\'a2\'b0\'b2\'c8\'ab\'a1\'a2\'ca\'fd\'be\'dd\'bc\'d3\'c3\'dc\'ba\'cd}{\fs28 
\hich\af0\dbch\af17\loch\f0 Linux}{\fs28 \loch\af0\hich\af0\dbch\f17 \'b5\'c4\'b0\'b2\'c8\'ab\'d0\'d4\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d3\'c9\'d3\'da\'ce\'d2\'c3\'c7\'b5\'c4\'b9\'a4\'d7\'f7\'d4\'da\'b7\'bd\'d5\'fd\'c9\'d0\'ca\'f4\'bf\'aa\'b4\'b4
\'a3\'ac\'cb\'f9\'d2\'d4\'cf\'a3\'cd\'fb\'c4\'dc\'b9\'bb\'bd\'e1\'ca\'b6\'d7\'ee\'b6\'e0\'b5\'c4}{\fs28 \hich\af0\dbch\af17\loch\f0 Linux}{\fs28 \loch\af0\hich\af0\dbch\f17 \'a1\'a2\'cd\'f8\'c2\'e7\'b0\'b2\'c8\'ab\'b7\'bd\'c3\'e6\'b5\'c4\'b8\'df\'ca\'d6
\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'c4\'fa\'d3\'d0\'ca\'b2\'c3\'b4\'cf\'ee\'c4\'bf\'d0\'e8\'d2\'aa\'ba\'cf\'d7\'f7\'a3\'ac\'bb\'f2\'d5\'df\'d3\'d0\'ca\'b2\'c3\'b4\'ba\'c3\'b5\'c4\'cc\'e1\'d2\'e9\'a3\'ac\'bb\'f2\'d5\'df\'d3\'d0
\loch\af0\hich\af0\dbch\f17 \'b9\'d8\'d3\'da\'b0\'b2\'c8\'ab\loch\af0\hich\af0\dbch\f17 \'b7\'bd\'c3\'e6\'b5\'c4\'d0\'e8\'c7\'f3\'a3\'ac\'bb\'f2\'d5\'df\'d3\'d0\'b1\'c8\'bd\'cf\'ba\'c3\'b5\'c4\'d7\'ca\'c1\'cf\'a3\'ac\'be\'b4\'c7\'eb\'d3\'eb\'ce\'d2
\'c3\'c7\'c1\'aa\'cf\'b5\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b1\'be\'c8\'cb\'bd\'ab\'b8\'d0\'bc\'a4\'b2\'bb\'be\'a1\'a1\'a3}{\fs28 {\field{\*\fldinst SYMBOL 74 \\f "Wingdings" \\s 14}{\fldrslt\f14\fs28}}}{\fs28 \hich\af0\dbch\af17\loch\f0  
\hich\af0\dbch\af17\loch\f0 //bow
\par }\pard \qj \fi570\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\fs28 \loch\af0\hich\af0\dbch\f17 \'b1\'be\'ca\'e9\'d3\'a2\'ce\'c4\'cf\'c2\'d4\'d8\'b0\'e6\'bf\'c9\'d4\'da}{\fs28 \hich\af0\dbch\af17\loch\f0 
http://metalab.unc.edu/ldp}{\fs28 \loch\af0\hich\af0\dbch\f17 \'d5\'d2\'b5\'bd\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d3\'a1\'cb\'a2\'b0\'e6\'c7\'eb\'bc\'fb\'ca\'e9\'ba\'f3\'b5\'c4\'cb\'b5\'c3\'f7\'a1\'a3}{\fs28 
\par }{\fs28 \loch\af0\hich\af0\dbch\f17 \'d7\'ee\'ba\'f3\'b1\'d8\'d0\'eb\'c9\'f9\'c3\'f7\'a3\'ba\'b1\'be\'ca\'e9\'b7\'ad\'d2\'eb\'cd\'ea\'c8\'ab\'ca\'c7\'b8\'f6\'c8\'cb\'d0\'d0\'ce\'aa\'a3\'ac\'ce\'d2\'d6\'bb\'b4\'fa\'b1\'ed\'ce\'d2\'b8\'f6\'c8\'cb\'a1\'a3
\'b1\'be\'d7\'ca\'c1\'cf\'ce\'aa\'c4\'da\loch\af0\hich\af0\dbch\f17 \'b2\'bf\'bd\'bb\'c1\'f7\'ca\'b9\'d3\'c3\'a3\'ac\'ce\'b4\'be\'ad\'d7\'f7\'d5\'df\'bc\'b0\'d2\'eb\'d5\'df\'d0\'ed\'bf\'c9\'a3\'ac\'c8\'ce\'ba\'ce\'b5\'a5\'ce\'bb\'ba\'cd\'b8\'f6\'c8\'cb
\'b2\'bb\'b5\'c3\'bd\'ab\'b1\'be\'d7\'ca\'c1\'cf\'d3\'c3\'d7\'f7\'c9\'cc\'d2\'b5\'d3\'c3\'cd\'be\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'be\'ad\'b7\'a2\'cf\'d6\'a3\'ac\'b1\'be\'c8\'cb\'d3\'d0\'c8\'a8\'c1\'a6\'d7\'b7\'be\'bf\'b7\'a8\'c2\'c9\'d4\'f0
\'c8\'ce\'a1\'a3}{\fs28 
\par }{\fs28 \loch\af0\hich\af0\dbch\f17 \'d2\'eb\'d5\'df}{\fs28 \hich\af0\dbch\af17\loch\f0 email:xu_hui@icst.pku.edu.cn
\par 
\par 
\par }\pard \qr \fi570\li0\ri0\nowidctlpar\nowwrap\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\fs28 \hich\af0\dbch\af17\loch\f0 2000}{\fs28 \loch\af0\hich\af0\dbch\f17 \'c4\'ea}{\fs28 \hich\af0\dbch\af17\loch\f0 8}{\fs28 \loch\af0\hich\af0\dbch\f17 
\'d4\'c2}{\fs28 \hich\af0\dbch\af17\loch\f0 19}{\fs28 \loch\af0\hich\af0\dbch\f17 \'c8\'d5}{\fs28 \hich\af0\dbch\af17\loch\f0   }{\fs28 \loch\af0\hich\af0\dbch\f17 \'d3\'da\loch\af0\hich\af0\dbch\f17 \'b1\'b1\'b4\'f3\'d1\'e0\'d4\'b0}{\fs28 
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {
\par 
\par }\pard \qc \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\b\fs28\dbch\af29 \loch\af0\hich\af0\dbch\f29 \'c4\'bf}{\b\fs28\dbch\af29 \hich\af0\dbch\af29\loch\f0     }{\b\fs28\dbch\af29 \loch\af0\hich\af0\dbch\f29 \'c2\'bc}{
\b\fs28\dbch\af29 
\par }\pard\plain \s20\ql \li0\ri0\sb120\sa120\nowidctlpar\tqr\tldot\tx8296\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\caps\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\field\fldedit{\*\fldinst {
\fs24 \hich\af0\dbch\af17\loch\f0  TOC \\o "1-2" \\h \\z }}{\fldrslt {\field\fldedit{\*\fldinst {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\
l "_Toc491281294"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003200390034000000000000}}}{\fldrslt {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 1}{
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'a3\'ae}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 Hello, world}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }{\field\flddirty{\*\fldinst {
\fs24\lang1024\langfe1024\noproof\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281294 \\h }{\fs24\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003200390034000000000000}}}{\fldrslt {\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b3}}}}}{
\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }{\field\fldedit{\*\fldinst {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281295"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003200390035000000}}}{\fldrslt {
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 Exhello.c}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }{\field\flddirty{\*\fldinst {\fs24\lang1024\langfe1024\noproof\webhidden \hich\af0\dbch\af17\loch\f0 
 PAGEREF _Toc491281295 \\h }{\fs24\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003200390035000000000000}}}{\fldrslt {\fs24\lang1024\langfe1024\noproof\webhidden 
\loch\af0\hich\af0\dbch\f17 \'a3\'b3}}}}}{\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }\pard\plain \s21\ql \li210\ri0\nowidctlpar\tqr\tldot\tx8296\aspalpha\aspnum\faauto\adjustright\rin0\lin210\itap0 \scaps\fs21\lang1024\langfe1024\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\noproof\langnp1033\langfenp2052 {\field\fldedit{\*\fldinst {
\cs29\ul\cf2 \hich\af0\dbch\af17\loch\f0  }{\hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281296"}{\cs29\ul\cf2 \hich\af0\dbch\af17\loch\f0  }{\ul\cf2 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003200390036000000}}}{\fldrslt {\cs29\ul\cf2 \hich\af0\dbch\af17\loch\f0 1}{\cs29\ul\cf2 \loch\af0\hich\af0\dbch\f17 \'a3\'ae}{\cs29\ul\cf2 
\hich\af0\dbch\af17\loch\f0 1}{\cs29\ul\cf2 \loch\af0\hich\af0\dbch\f17 \'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'b5\'c4\'b1\'e0\'d2\'eb\'ce\'c4\'bc\'fe}{\webhidden \tab }{\field\flddirty{\*\fldinst {\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281296 
\\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003200390036000000000000}}}{\fldrslt {\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b4}}}}}{\scaps0 
\par }{\field\fldedit{\*\fldinst {\cs29\ul\cf2 \hich\af0\dbch\af17\loch\f0  }{\hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281297"}{\cs29\ul\cf2 \hich\af0\dbch\af17\loch\f0  }{\ul\cf2 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003200390037000000}}}{\fldrslt {\cs29\ul\cf2 \hich\af0\dbch\af17\loch\f0 1.2 }{\cs29\ul\cf2 \loch\af0\hich\af0\dbch\f17 \'b6\'e0\'ce\'c4\'bc\'fe\'c4\'da
\'ba\'cb\'c4\'a3\'bf\'e9}{\webhidden \tab }{\field\flddirty{\*\fldinst {\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281297 \\h }{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003200390037000000000000}}}{\fldrslt {\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b5}}}}}{\scaps0\fs24 
\par }\pard\plain \s20\ql \li0\ri0\sb120\sa120\nowidctlpar\tqr\tldot\tx8296\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\caps\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\field\fldedit{\*\fldinst {
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281298"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{
\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003200390038000000}}}{\fldrslt {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\hich\af0\dbch\af17\loch\f0 2}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'d7\'d6\'b7\'fb\'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }{\field\flddirty{\*\fldinst {
\fs24\lang1024\langfe1024\noproof\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281298 \\h }{\fs24\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003200390038000000000000}}}{\fldrslt {\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b8}}}}}{
\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }\pard\plain \s21\ql \li210\ri0\nowidctlpar\tqr\tldot\tx8296\aspalpha\aspnum\faauto\adjustright\rin0\lin210\itap0 \scaps\fs21\lang1024\langfe1024\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\noproof\langnp1033\langfenp2052 {\field\fldedit{\*\fldinst {
\cs29\ul\cf2 \hich\af0\dbch\af17\loch\f0  }{\hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281299"}{\cs29\ul\cf2 \hich\af0\dbch\af17\loch\f0  }{\ul\cf2 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003200390039000000}}}{\fldrslt {\cs29\ul\cf2 \hich\af0\dbch\af17\loch\f0 2}{\cs29\ul\cf2 \loch\af0\hich\af0\dbch\f17 \'a3\'ae}{\cs29\ul\cf2 
\hich\af0\dbch\af17\loch\f0 1}{\cs29\ul\cf2 \loch\af0\hich\af0\dbch\f17 \'b6\'e0\'c4\'da\'ba\'cb\'b0\'e6\'b1\'be\'d4\'b4\'ce\'c4\'bc\'fe}{\webhidden \tab }{\field\flddirty{\*\fldinst {\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281299 \\h }{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003200390039000000000000}}}{\fldrslt {\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b1\'a3\'b6}}}}}{\scaps0 
\par }\pard\plain \s20\ql \li0\ri0\sb120\sa120\nowidctlpar\tqr\tldot\tx8296\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\caps\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\field\fldedit{\*\fldinst {
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281300"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{
\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300030000000}}}{\fldrslt {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\hich\af0\dbch\af17\loch\f0 3}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'a3\'ae}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 /proc}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'cf\'b5\'cd\'b3}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }{\field\flddirty{\*\fldinst {\fs24\lang1024\langfe1024\noproof\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281300 \\h }{
\fs24\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300030000000000000}}}{\fldrslt {\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 
\'a3\'b1\'a3\'b7}}}}}{\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }{\field\fldedit{\*\fldinst {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281301"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300031000000}}}{\fldrslt {
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 4}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'ca\'b9\'d3\'c3}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 
/proc}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'bd\'f8\'d0\'d0\'ca\'e4\'c8\'eb}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }{\field\flddirty{\*\fldinst {\fs24\lang1024\langfe1024\noproof\webhidden 
\hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281301 \\h }{\fs24\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300031000000000000}}}{\fldrslt {
\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b2\'a3\'b2}}}}}{\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }{\field\fldedit{\*\fldinst {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l\hich\af0\dbch\af17\loch\f0  "_Toc491281302"}{
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300032000000}}
}{\fldrslt {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 5}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'ba\'cd\'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe\'b6\'d4\'bb\'b0\'a3\'a8\'d0\'b4\'ba\'cd}{
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 IOCTLS}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'a3\'a9}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }{\field\flddirty{\*\fldinst {
\fs24\lang1024\langfe1024\noproof\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281302 \\h }{\fs24\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300032000000000000}}}{\fldrslt {\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b3\'a3\'b0}}}}}{
\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }{\field\fldedit{\*\fldinst {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281303"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300033000000}}}{\fldrslt {
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 6}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'c6\'f4\'b6\'af\'b2\'ce\'ca\'fd}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }
{\field\flddirty{\*\fldinst {\fs24\lang1024\langfe1024\noproof\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281303 \\h }{\fs24\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300033000000000000}}}{\fldrslt {\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b4\'a3\'b4}}}}}{
\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }{\field\fldedit{\*\fldinst {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281304"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300034000000}}}{\fldrslt {
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 7}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }
{\field\flddirty{\*\fldinst {\fs24\lang1024\langfe1024\noproof\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281304 \\h }{\fs24\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300034000000000000}}}{\fldrslt {\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b4\'a3\'b7}}}}}{
\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }{\field\fldedit{\*\fldinst {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281305"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300035000000}}}{\fldrslt {
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 8}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'d7\'e8\'c8\'fb\'bd\'f8\'b3\'cc}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }
{\field\flddirty{\*\fldinst {\fs24\lang1024\langfe1024\noproof\webhidden \hich\af0\dbch\af17\loch\f0  PA\hich\af0\dbch\af17\loch\f0 GEREF _Toc491281305 \\h }{\fs24\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300035000000000000}}}{\fldrslt {\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b5\'a3\'b3}}}}}{
\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }{\field\fldedit{\*\fldinst {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281306"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300036000000}}}{\fldrslt {
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 9}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'cc\'e6\'bb\'bb}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 
printk\hich\f0 \rquote \loch\f0 s}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }{\field\flddirty{\*\fldinst {\fs24\lang1024\langfe1024\noproof\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281306 \\h }{\fs24\lang1024\langfe1024\noproof 
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300036000000000000}}}{\fldrslt {\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b6\'a3\'b3}}}}}{
\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }{\field\fldedit{\*\fldinst {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281307"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300037000000}}}{\fldrslt {
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 10}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'b5\'f7\'b6\'c8\'c8\'ce\'ce\'f1}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }
{\field\flddirty{\*\fldinst {\fs24\lang1024\langfe1024\noproof\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281307 \\h }{\fs24\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300037000000000000}}}{\fldrslt {\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b6\'a3\'b6}}}}}{
\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }{\field\fldedit{\*\fldinst {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281308"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300038000000}}}{\fldrslt {
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 11}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'d6\'d0\'b6\'cf\'b4\'a6\'c0\'ed\'b3\'cc\'d0\'f2}{\fs24\lang1024\langfe1024\noproof\webhidden 
\tab }{\field\flddirty{\*\fldinst {\fs24\lang1024\langfe1024\noproof\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281308 \\h }{\fs24\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300038000000000000}}}{\fldrslt {\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b7\'a3\'b1}}}}}{
\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }\pard\plain \s21\ql \li210\ri0\nowidctlpar\tqr\tldot\tx8296\aspalpha\aspnum\faauto\adjustright\rin0\lin210\itap0 \scaps\fs21\lang1024\langfe1024\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\noproof\langnp1033\langfenp2052 {\field\fldedit{\*\fldinst {
\cs29\fs24\ul\cf2 \hich\af0\dbch\af17\loch\f0  }{\hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281309"}{\cs29\fs24\ul\cf2 \hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300039000000}}}{\fldrslt {\cs29\fs24\ul\cf2 \hich\af0\dbch\af17\loch\f0 11.1  Intel }{\cs29\fs24\ul\cf2 \loch\af0\hich\af0\dbch\f17 \'bd\'e1\'b9\'b9
\'c9\'cf\'b5\'c4\'bc\'fc\'c5\'cc}{\webhidden \tab }{\field\flddirty{\*\fldinst {\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281309 \\h }{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300300039000000000000}}}{\fldrslt {\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b7\'a3\'b2}}}}}{\scaps0 
\par }\pard\plain \s20\ql \li0\ri0\sb120\sa120\nowidctlpar\tqr\tldot\tx8296\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\caps\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\field\fldedit{\*\fldinst {
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281310"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{
\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310030000000}}}{\fldrslt {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\hich\af0\dbch\af17\loch\f0 12}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'b6\'d4\'b3\'c6\'b6\'e0\'b4\'a6\'c0\'ed}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }{\field\flddirty{\*\fldinst {
\fs24\lang1024\langfe1024\noproof\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281310 \\h }{\fs24\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310030000000000000}}}{\fldrslt {\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b7\'a3\'b5}}}}}{
\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }{\field\fldedit{\*\fldinst {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281311"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310031000000}}}{\fldrslt {
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'b3\'a3\'bc\'fb\'b5\'c4\'b4\'ed\'ce\'f3}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }{\field\flddirty{\*\fldinst {\fs24\lang1024\langfe1024\noproof\webhidden 
\hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281311 \\h }{\fs24\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310031000000000000}}}{\fldrslt {
\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b7\'a3\'b6}}}}}{\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }{\field\fldedit{\*\fldinst {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\\hich\af0\dbch\af17\loch\f0 l "_Toc491281312"}{
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310032000000}}
}{\fldrslt {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 2.0}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'ba\'cd}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 2.2}{
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'b0\'e6\'b1\'be\'b5\'c4\'c7\'f8\'b1\'f0}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }{\field\flddirty{\*\fldinst {\fs24\lang1024\langfe1024\noproof\webhidden 
\hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281312 \\h }{\fs24\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310032000000000000}}}{\fldrslt {
\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b7\'a3\'b6}}}}}{\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }{\field\fldedit{\*\fldinst {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281313"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310033000000}}}{\fldrslt {
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'b3\'fd\'b4\'cb\'d2\'d4\'cd\'e2}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }{\field\flddirty{\*\fldinst {\fs24\lang1024\langfe1024\noproof\webhidden 
\hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281313 \\h }{\fs24\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310033000000000000}}}{\fldrslt {
\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b7\'a3\'b7}}}}}{\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }{\field\fldedit{\*\fldinst {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281314"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310034000000}}}{\fldrslt {
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \loch\af0\hich\af0\dbch\f17 \'c6\'e4\'cb\'fb}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }{\field\flddirty{\*\fldinst {\fs24\lang1024\langfe1024\noproof\webhidden \hich\af0\dbch\af17\loch\f0 
 PAGEREF _Toc491281314 \\h }{\fs24\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310034000000000000}}}{\fldrslt {\fs24\lang1024\langfe1024\noproof\webhidden 
\loch\af0\hich\af0\dbch\f17 \'a3\'b7\'a3\'b8}}}}}{\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }\pard\plain \s21\ql \li210\ri0\nowidctlpar\tqr\tldot\tx8296\aspalpha\aspnum\faauto\adjustright\rin0\lin210\itap0 \scaps\fs21\lang1024\langfe1024\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\noproof\langnp1033\langfenp2052 {\field\fldedit{\*\fldinst {
\cs29\fs24\ul\cf2 \hich\af0\dbch\af17\loch\f0  }{\hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281315"}{\cs29\fs24\ul\cf2 \hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310035000000}}}{\fldrslt {\cs29\fs24\ul\cf2 \hich\af0\dbch\af17\loch\f0 Goods and Services}{\webhidden \tab }{\field\flddirty{\*\fldinst {\webhidden 
\hich\af0\dbch\af17\loch\f0  PA\hich\af0\dbch\af17\loch\f0 GEREF _Toc491281315 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310035000000000000}}}{\fldrslt {\webhidden 
\loch\af0\hich\af0\dbch\f17 \'a3\'b7\'a3\'b8}}}}}{\scaps0 
\par }{\field\fldedit{\*\fldinst {\cs29\fs24\ul\cf2 \hich\af0\dbch\af17\loch\f0  }{\hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281316"}{\cs29\fs24\ul\cf2 \hich\af0\dbch\af17\loch\f0  }{\fs24\ul\cf2 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310036000000}}}{\fldrslt {\cs29\fs24\ul\cf2 \hich\af0\dbch\af17\loch\f0 GNU GENERAL PUBLIC LICENSE}{\webhidden \tab }{\field\flddirty{\*\fldinst {
\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281316 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310036000000000000}}}{\fldrslt {\webhidden \loch\af0\hich\af0\dbch\f17 
\'a3\'b7\'a3\'b8}}}}}{\scaps0 
\par }\pard\plain \s20\ql \li0\ri0\sb120\sa120\nowidctlpar\tqr\tldot\tx8296\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\caps\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\field\fldedit{\*\fldinst {
\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{\fs24\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0 HYPERLINK \\l "_Toc491281317"}{\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof \hich\af0\dbch\af17\loch\f0  }{
\fs24\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310037000000}}}{\fldrslt {\cs29\fs24\ul\cf2\lang1024\langfe1024\noproof 
\loch\af0\hich\af0\dbch\f17 \'d7\'a2}{\fs24\lang1024\langfe1024\noproof\webhidden \tab }{\field\flddirty{\*\fldinst {\fs24\lang1024\langfe1024\noproof\webhidden \hich\af0\dbch\af17\loch\f0  PAGEREF _Toc491281317 \\h }{\fs24\lang1024\langfe1024\noproof 
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390031003200380031003300310037000000000000}}}{\fldrslt {\fs24\lang1024\langfe1024\noproof\webhidden \loch\af0\hich\af0\dbch\f17 \'a3\'b8\'a3\'b4}}}}}{
\b0\caps0\fs24\lang1024\langfe1024\noproof 
\par }\pard \s20\ql \li0\ri0\sb120\sa120\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }}\pard\plain \s20\ql \li0\ri0\sb120\sa120\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\b\caps\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs20 
\par }\pard\plain \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {
\par 
\par 
\par }\pard\plain \s1\qj \li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281294}
\hich\af0\dbch\af17\loch\f0 1}{\fs36 \loch\af0\hich\af0\dbch\f17 \'a3\'ae}{\fs36 \hich\af0\dbch\af17\loch\f0 Hello, world{\*\bkmkend _Toc491281294}
\par }\pard\plain \qj \fi420\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\cufi200 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'b5\'b1\'b5\'da\'d2\'bb
\'b8\'f6\'d1\'a8\'be\'d3\'b5\'c4\'d4\'ad\'ca\'bc\'c8\'cb\'b3\'cc\'d0\'f2\'d4\'b1\'d4\'da\'c7\'bd\'c9\'cf\'d4\'e4\loch\af0\hich\af0\dbch\f17 \'b3\'f6\'b5\'da\'d2\'bb\'b8\'f6\loch\af0\hich\af0\dbch\f17 \'a1\'b0\loch\af0\hich\af0\dbch\f17 \'b6\'b4\'d1\'a8
\'bc\'c6\'cb\'e3\'bb\'fa\loch\af0\hich\af0\dbch\f17 \'a1\'b1\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'b3\'cc\'d0\'f2\'ca\'b1\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'c4\'c7\'ca\'c7\'d2\'bb\'b8\'f6\'b4\'f2\'d3\'a1\'b3\'f6\'d3\'c3
\'c1\'e7\'d1\'f2\'bd\'c7\'c9\'cf\'b5\'c4\'cd\'bc\'b0\'b8\'b1\'ed\'ca\'be\'b5\'c4\loch\af0\hich\af0\dbch\f17 \'a1\'b0}{\hich\af0\dbch\af17\loch\f0 Hello world}{\loch\af0\hich\af0\dbch\f17 \'a1\'b1\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'b3\'cc\'d0\'f2\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'c2\'de\'c2\'ed\'b1\'e0\'b3\'cc\'bd\'cc\'bf\'c6\'ca\'e9\'c9\'cf\'ca\'c7\'d2\'d4\'a1\'b0}{\hich\af0\dbch\af17\loch\f0 Salut, Mundi}{\loch\af0\hich\af0\dbch\f17 \'a1\'b1\'b5\'c4\'b3\'cc\'d0\'f2\'bf\'aa\'ca\'bc\'b5\'c4\'a1\'a3
\'ce\'d2\'b2\'bb\'d6\'aa\'b5\'c0\'c8\'e7\'b9\'fb\'c8\'cb\'c3\'c7\'b4\'f2\'c6\'c6\'d5\'e2\'b8\'f6\'b4\'ab\'cd\'b3\'ba\'f3\'bb\'e1\'d3\'d0\'ca\'b2\'c3\'b4\'ba\'f3\'b9\'fb\'a3\'ac\'b5\'ab\'ce\'d2\'c8\'cf\'ce\'aa\'bb\'b9\'ca\'c7\'b2\'bb\'d2\'aa\'c8\'a5
\'b7\'a2\'cf\'d6\'d5\'e2\'b8\'f6\'ba\'f3\'b9\'fb\'b1\'c8\'bd\'cf\'b0\'b2\'c8\'ab\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d2\'bb\'b8\'f6\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'d6\'c1\'c9\'d9\'b0\'fc\'c0\'a8\'c1\'bd\'b8\'f6\'ba\'af\'ca\'fd\'a3\'ba}{\hich\af0\dbch\af17\loch\f0 init_module}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'d4\'da\'d5\'e2\'b8\'f6
\'c4\'a3\'bf\'e9\'b2\'e5\'c8\'eb\'c4\'da\'ba\'cb\'ca\'b1\'b5\'f7\'d3\'c3\'a3\'bb}{\hich\af0\dbch\af17\loch\f0 cleanup_module}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'d4\'da\'c4\'a3\'bf\'e9\'b1\'bb\'d2\'c6\'b3\'f6\'ca\'b1\'b5\'f7\'d3\'c3\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'b5\'e4\'d0\'cd\'c7\'e9\'bf\'f6\'cf\'c2\'a3\'ac}{\hich\af0\dbch\af17\loch\f0 init_module}{\loch\af0\hich\af0\dbch\f17 \'ce\'aa\'c4\'da\'ba\'cb\'d6\'d0\'b5\'c4\'c4\'b3\'d0\'a9\'b6\'ab\'ce\'f7\'d7\'a2\'b2\'e1\'d2\'bb\'b8\'f6
\'be\'e4\'b1\'fa\'a3\'ac\'bb\'f2\'d5\'df\'b0\'d1\'c4\'da\'ba\'cb\'d6\'d0\'b5\'c4\'b3\'cc\'d0\'f2\'cc\'e1\'bb\'bb\'b3\'c9\'cb\'fc\'d7\'d4\'bc\'ba\'b5\'c4\'b4\'fa\'c2\'eb\'a3\'a8\'cd\'a8\'b3\'a3\'ca\'c7\'bd\'f8\'d0\'d0\'d2\'bb\'d0\'a9\'b9\'a4\'d7\'f7
\'d2\'d4\'ba\'f3\'d4\'d9\'b5\'f7\'d3\'c3\loch\af0\hich\af0\dbch\f17 \'d4\'ad\'c0\'b4\'b9\'a4\'d7\'f7\'b5\'c4\'b4\'fa\'c2\'eb\'a3\'a9\'a1\'a3}{\hich\af0\dbch\af17\loch\f0 Clean_module}{\loch\af0\hich\af0\dbch\f17 \'c4\'a3\'bf\'e9\'d2\'aa\'c7\'f3\'b3\'b7
\'cf\'fa}{\hich\af0\dbch\af17\loch\f0 init_module}{\loch\af0\hich\af0\dbch\f17 \'bd\'f8\'d0\'d0\'b5\'c4\'cb\'f9\'d3\'d0\'b4\'a6\'c0\'ed\'b9\'a4\'d7\'f7\'a3\'ac\'ca\'b9\'b5\'c3\'c4\'a3\'bf\'e9\'bf\'c9\'d2\'d4\'b1\'bb\'b0\'b2\'c8\'ab\'b5\'c4\'d0\'b6\'d4\'d8
\'a1\'a3}{
\par 
\par }\pard\plain \s1\qj \fi412\li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\cufi200 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {{\*\bkmkstart _Toc491281295}
\hich\af0\dbch\af17\loch\f0 Exhello.c{\*\bkmkend _Toc491281295}
\par }\pard\plain \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\hich\af0\dbch\af17\loch\f0 /* hello.c 
\par \hich\af0\dbch\af17\loch\f0  * Copyright (C) 1998 by Ori Pomerantz
\par \hich\af0\dbch\af17\loch\f0  * 
\par \hich\af0\dbch\af17\loch\f0  * "Hello, world" - the kernel module version. 
\par \hich\af0\dbch\af17\loch\f0  */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The necessary header files */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Standard in \hich\af0\dbch\af17\loch\f0 kernel modules */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/kernel.h>   /* We're doing kernel work */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/module.h>   /* Specifically, a module */
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Deal with CONFIG_MODVERSIONS */
\par \hich\af0\dbch\af17\loch\f0 #if CONFIG_MODVERSIONS==1
\par \hich\af0\dbch\af17\loch\f0 #define MODVERSIONS
\par \hich\af0\dbch\af17\loch\f0 #include <linux/modversions.h>
\par \hich\af0\dbch\af17\loch\f0 #endif  \hich\af0\dbch\af17\loch\f0       
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Initialize the module */
\par \hich\af0\dbch\af17\loch\f0 int init_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   printk("Hello, world - this is the kernel speaking\\n");
\par 
\par \hich\af0\dbch\af17\loch\f0   /* If we return a non zero value, it means that 
\par \hich\af0\dbch\af17\loch\f0    * init_module failed and the kernel module 
\par \hich\af0\dbch\af17\loch\f0    * can't be loaded */
\par \hich\af0\dbch\af17\loch\f0   return 0;
\par \}
\par 
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\fs20\lang1033\langfe2052\loch\af21\hich\af2\dbch\af21\cgrid\langnp1033\langfenp2052 {
\par \hich\af2\dbch\af21\loch\f21 /* Cleanup - undid whatever init_module did */
\par \hich\af2\dbch\af21\loch\f21 void cleanup_module()
\par \{
\par \hich\af2\dbch\af21\loch\f21   printk("Short is the life of a kernel module\\n");
\par \}
\par }\pard\plain \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs24\kerning0\loch\af17 
\par }\pard\plain \s2\qj \li0\ri0\sb260\sa260\sl416\slmult1\keep\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \b\fs32\lang1033\langfe2052\kerning2\loch\af1\hich\af1\dbch\af21\cgrid\langnp1033\langfenp2052 {
{\*\bkmkstart _Toc491281296}\hich\af1\dbch\af21\loch\f1 1}{\loch\af1\hich\af1\dbch\f21 \'a3\'ae}{\hich\af1\dbch\af21\loch\f1 1}{\loch\af1\hich\af1\dbch\f21 \'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'b5\'c4\'b1\'e0\'d2\'eb\'ce\'c4\'bc\'fe}{{\*\bkmkend _Toc491281296
}
\par }\pard\plain \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\hich\af0\dbch\af17\loch\f0   }{\loch\af0\hich\af0\dbch\f17 \'d2\'bb
\'b8\'f6\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'b2\'bb\'ca\'c7\'d2\'bb\'b8\'f6\'bf\'c9\'d2\'d4\'b6\'c0\'c1\'a2\'d6\'b4\'d0\'d0\'b5\'c4\'ce\'c4\'bc\'fe\'a3\'ac\'b6\'f8\'ca\'c7\'d0\'e8\'d2\'aa\'d4\'da\'d4\'cb\'d0\'d0\'ca\'b1\'bf\'cc\'c1\'ac\'bd\'d3\'c8\'eb
\'c4\'da\'ba\'cb\'b5\'c4\'c4\'bf\'b1\'ea\'ce\'c4\'bc\'fe\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'cb\'f9\'d2\'d4\'a3\'ac\'cb\'fc\'c3\'c7\'d0\'e8\'d2\'aa\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 -c}{\loch\af0\hich\af0\dbch\f17 \'d1\'a1\'cf\'ee\'bd\'f8\'d0\'d0
\'b1\'e0\'d2\'eb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b6\'f8\'c7\'d2\'a3\'ac\'cb\'f9\'d3\'d0\'b5\'c4\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'b6\'bc\'b1\'d8\'d0\'eb\'b0\'fc\'ba\'ac\'cc\'d8\'b6\'a8\'b5\'c4\'b1\'ea\'d6\'be\'a3\'ba}{
\par {\listtext\pard\plain\f14\fs21\kerning2 \loch\af14\dbch\af17\hich\f14 \'6c\tab}}\pard \qj \fi-420\li420\ri0\nowidctlpar\jclisttab\tx420\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin420\itap0 {\hich\af0\dbch\af17\loch\f0 __KERNEL__\hich\f0 \emdash 
\emdash }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'b1\'ea\'d6\'be\'b8\'e6\'cb\'df\'cd\'b7\'ce\'c4\'bc\'fe\'b4\'cb\'b4\'fa\'c2\'eb\'bd\'ab\'d4\'da\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'d6\'d0\'d4\'cb\'d0\'d0\'a3\'ac\'b6\'f8\'b2\'bb\'ca\'c7\'d7\'f7\'ce\'aa
\'d3\'c3\'bb\'a7\'bd\'f8\'b3\'cc\'a1\'a3}{
\par {\listtext\pard\plain\f14\fs21\kerning2 \loch\af14\dbch\af17\hich\f14 \'6c\tab}\hich\af0\dbch\af17\loch\f0 MODULE\hich\f0 \emdash \emdash }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'b1\'ea\'d6\'be\'b8\'e6\'cb\'df\'cd\'b7\'ce\'c4\'bc\'fe\'d2\'aa
\'b8\'f8\'b3\'f6\'ca\'ca\'b5\'b1\'b5\'c4\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'b5\'c4\'b6\'a8\'d2\'e5\'a1\'a3}{
\par {\listtext\pard\plain\f14\fs21\kerning2 \loch\af14\dbch\af17\hich\f14 \'6c\tab}\hich\af0\dbch\af17\loch\f0 LINUX\hich\f0 \emdash \emdash }{\loch\af0\hich\af0\dbch\f17 \'b4\'d3\'bc\'bc\'ca\'f5\'c9\'cf\'bd\'b2\'a3\'ac\'d5\'e2\'b8\'f6\'b1\'ea\'d6\'be\'b2\'bb
\'ca\'c7\'b1\'d8\'d2\'aa\'b5\'c4\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b5\'ab\'ca\'c7\'a3\'ac\'c8\'e7\'b9\'fb\'c4\'e3\'cf\'a3\'cd\'fb\'d0\'b4\'d2\'bb\'b8\'f6\'b1\'c8\'bd\'cf\'d5\'fd\'b9\'e6\'b5\'c4\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'a3\'ac\'d4\'da\'b6\'e0
\'b8\'f6\'b2\'d9\'d7\'f7\'cf\'b5\'cd\'b3\'c9\'cf\'b1\'e0\'d2\'eb\'a3\'ac\'d5\'e2\'b8\'f6\'b1\'ea\'d6\'be\'bd\'ab\'bb\'e1\'ca\'b9\'c4\'e3\'b8\'d0\'b5\'bd\'b7\'bd\'b1\'e3\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'cb\'fc\'bf\'c9\'d2\'d4\'d4\'ca\'d0\'ed\'c4\'e3
\'d4\'da\'b6\'c0\'c1\'a2\'d3\'da\'b2\'d9\'d7\'f7\'cf\'b5\'cd\'b3\'b5\'c4\'b2\'bf\'b7\'d6\'bd\'f8\'d0\'d0\'b3\'a3\'b9\'e6\'b5\'c4\'b1\'e0\'d2\'eb\'a1\'a3}{
\par }\pard \qj \fi210\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\cufi100 {\hich\af0\dbch\af17\loch\f0   }{\loch\af0\hich\af0\dbch\f17 \'bb\'b9\'d3\'d0\'c6\'e4\'cb\'fc\'b5\'c4\'d2\'bb\'d0\'a9\'bf\'c9\'b1\'bb\'d1\'a1\'d4\'f1\'b0\'fc
\'ba\'ac\'b1\'ea\'d6\'be\'a3\'ac\'c8\'a1\'be\'f6\'d3\'da\'b1\'e0\'d2\'eb\'c4\'a3\'bf\'e9\'ca\'c7\'b5\'c4\'d1\'a1\'cf\'ee\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'c4\'e3\'b2\'bb\'c4\'dc\'c3\'f7\'c8\'b7\'c4\'da\'ba\'cb\'d4\'f5\'d1\'f9\'b1\'bb
\'b1\'e0\'d2\'eb\'a3\'ac\'bf\'c9\'d2\'d4\'d4\'da}{\hich\af0\dbch\af17\loch\f0 in/usr/include/linux/config.h}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'b2\'e9\'b5\'bd\'a1\'a3}{
\par {\listtext\pard\plain\f14\fs21\kerning2 \loch\af14\dbch\af17\hich\f14 \'6c\tab}}\pard \qj \fi-420\li420\ri0\nowidctlpar\jclisttab\tx420\aspalpha\aspnum\faauto\ls3\adjustright\rin0\lin420\itap0 {\hich\af0\dbch\af17\loch\f0 __SMP__\hich\f0 \emdash \emdash }
{\loch\af0\hich\af0\dbch\f17 \'b6\'d4\'b3\'c6\'b6\'e0\'cf\'df\'b3\'cc\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da\'c4\'da\'ba\'cb\'b1\'bb\'b1\'e0\'d2\'eb\'b3\'c9\'d6\'a7\'b3\'d6\'b6\'d4\'b3\'c6\'b6\'e0\'cf\'df\'b3\'cc\'a3\'a8\'be\'a1\'b9\'dc\'d4\'da
\'d2\'bb\'cc\'a8\'b4\'a6\'c0\'ed\'bb\'fa\'c9\'cf\'d4\'cb\'d0\'d0\'a3\'a9\'ca\'c7\'b1\'d8\'d0\'eb\'b6\'a8\'d2\'e5\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'ca\'c7\'d5\'e2\'d1\'f9\'a3\'ac\'bb\'b9\'d0\'e8\'d2\'aa\'d7\'f6\'d2\'bb\'d0\'a9\'b1\'f0
\'b5\'c4\'ca\'c2\'c7\'e9\'a3\'a8\'b2\'ce\'bc\'fb\'b5\'da}{\hich\af0\dbch\af17\loch\f0 12}{\loch\af0\hich\af0\dbch\f17 \'d5\'c2\'a3\'a9\'a1\'a3}{
\par {\listtext\pard\plain\f14\fs21\kerning2 \loch\af14\dbch\af17\hich\f14 \'6c\tab}\hich\af0\dbch\af17\loch\f0 CONFIG_MODVERSIONS\hich\f0 \emdash \emdash }{\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb}{\hich\af0\dbch\af17\loch\f0 CONFIG_MODVERSIONS}{
\loch\af0\hich\af0\dbch\f17 \'b1\'bb\'bc\'a4\'bb\'ee\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'c4\'e3\'d0\'e8\'d2\'aa\'d4\'da\'b1\'e0\'d2\'eb\'ca\'c7\'b6\'a8\'d2\'e5\'cb\'fc\'b2\'a2\'c7\'d2\'b0\'fc\'ba\'ac\'ce\'c4\'bc\'fe}{
\hich\af0\dbch\af17\loch\f0 /usr/include/linux/modversions.h}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'bf\'c9\'d2\'d4\'d3\'d0\'b4\'fa\'c2\'eb\'d7\'d4\'b6\'af\'cd\'ea\'b3\'c9\'a1\'a3}{
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {
\par }\pard\plain \s16\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe2052\loch\af17\hich\af17\dbch\af17\cgrid\langnp1033\langfenp2052 {\hich\af17\dbch\af17\loch\f17 ex }{\b\fs27 
\hich\af17\dbch\af17\loch\f17 Makefile}{\hich\af17\dbch\af17\loch\f17  \~\~ 
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\fs20\lang1033\langfe2052\loch\af21\hich\af2\dbch\af21\cgrid\langnp1033\langfenp2052 {\hich\af2\dbch\af21\loch\f21  
\par \hich\af2\dbch\af21\loch\f21 # Makefile for a basic kernel module
\par 
\par \hich\af2\dbch\af21\loch\f21 CC=gcc
\par \hich\af2\dbch\af21\loch\f21 MODCFLAGS := -Wall -DMODULE -D__KERNEL__ -DLINUX
\par 
\par \hich\af2\dbch\af21\loch\f21 hello.o:\tab hello.c /usr/include/linux/version.h
\par \tab \tab \hich\af2\dbch\af21\loch\f21 $(CC) $(MODCFLAGS) -c hello.c
\par \tab \tab \hich\af2\dbch\af21\loch\f21 echo insmod hello.o to turn it on
\par \tab \tab \hich\af2\dbch\af21\loch\f21 echo rmmod hello to turn if off
\par \tab \tab \hich\af2\dbch\af21\loch\f21 echo
\par \tab \tab \hich\af2\dbch\af21\loch\f21 echo X and kernel programming do not mix.
\par \tab \tab \hich\af2\dbch\af21\loch\f21 echo \hich\af2\dbch\af21\loch\f21 Do the insmod and rmmod from outside 
\par }\pard\plain \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {
\par }\pard \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\loch\af0\hich\af0\dbch\f17 \'cb\'f9\'d2\'d4\'a3\'ac\'b2\'a2\'b2\'bb\'ca\'c7\'ca\'a3\'cf\'c2\'b5\'c4\'ca\'c2\'c7\'e9\'be\'cd\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 
root}{\loch\af0\hich\af0\dbch\f17 \'a3\'a8\'c4\'e3\'c3\'bb\'d3\'d0\'b0\'d1\'cb\'fc\'b1\'e0\'d2\'eb\'b3\'c9}{\hich\af0\dbch\af17\loch\f0 root}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'b6\'f8\'ca\'c7\'d4\'da\'b1\'df\'d4\'b5\'a3\'a8\'d7\'a2}{
\hich\af0\dbch\af17\loch\f0 1.1}{\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b6\'d4\'c2\'f0\'a3\'bf\'a3\'a9\'a3\'ac\'c8\'bb\'ba\'f3\'be\'cd\'d4\'da\'c4\'e3\'b5\'c4\'ba\'cb\'d0\'c4\'c4\'da\'c8\'dd\'c0\'ef\'b2\'e5\'c8\'eb
\'bb\'f2\'d2\'c6\'b3\'f6}{\hich\af0\dbch\af17\loch\f0 hello}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b5\'b1\'c4\'e3\'d5\'e2\'d1\'f9\'d7\'f6\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'d2\'aa\'d7\'a2\'d2\'e2\'b5\'bd\'c4\'e3\'b5\'c4\'d0\'c2
\'c4\'a3\'bf\'e9\'d4\'da}{\hich\af0\dbch\af17\loch\f0 /proc/modules}{\loch\af0\hich\af0\dbch\f17 \'c0\'ef\'a1\'a3}{
\par }\pard \qj \fi420\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\cufi200 {\loch\af0\hich\af0\dbch\f17 \'b6\'f8\'c7\'d2\'a3\'ac\'b1\'e0\'d2\'eb\'ce\'c4\'bc\'fe\'b2\'bb\'cd\'c6\'bc\'f6\'b4\'d3}{\hich\af0\dbch\af17\loch\f0 X}{
\loch\af0\hich\af0\dbch\f17 \'cf\'c2\'b2\'e5\'c8\'eb\'b5\'c4\'d4\'ad\'d2\'f2\'ca\'c7\'c4\'da\'ba\'cb\'d3\'d0\'d2\'bb\'cc\'f5\'d0\'e8\'d2\'aa\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 printk}{\loch\af0\hich\af0\dbch\f17 \'b4\'f2\'d3\'a1\'b5\'c4\'cf\'fb\'cf\'a2
\'a3\'ac\'cb\'fc\'b0\'d1\'cb\'fc\'cb\'cd\'b8\'f8\'c1\'cb\'bf\'d8\'d6\'c6\'cc\'a8\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'c4\'e3\'b2\'bb\'ca\'b9\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 X}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'cb\'fc\'be\'cd
\'cb\'cd\'b5\'bd\'c1\'cb\'c4\'e3\'ca\'b9\'d3\'c3\'b5\'c4\'d0\'e9\'c4\'e2\'d6\'d5\'b6\'cb\'a3\'a8\'c4\'e3\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 Alt-F<n>}{\loch\af0\hich\af0\dbch\f17 \'d1\'a1\'d4\'f1\'b5\'c4\'c4\'c4\'b8\'f6\'a3\'a9\'b2\'a2\'c7\'d2\'c4\'e3
\'bf\'c9\'d2\'d4\'bf\'b4\'b5\'bd\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'cf\'e0\'b7\'b4\'b5\'c4\'a3\'ac\'c8\'e7\'b9\'fb\'c4\'e3\'ca\'b9\'d3\'c3\'c1\'cb}{\hich\af0\dbch\af17\loch\f0 X}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'be\'cd\'d3\'d0\'c1\'bd\'d6\'d6
\'bf\'c9\loch\af0\hich\af0\dbch\f17 \'c4\'dc\'d0\'d4\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 xterm \hich\f0 \endash \loch\f0 C}{\loch\af0\hich\af0\dbch\f17 \'b4\'f2\'bf\'aa\'c1\'cb\'d2\'bb\'b8\'f6\'bf\'d8
\'d6\'c6\'cc\'a8\'a3\'ac\'ca\'e4\'b3\'f6\'bd\'ab\'b1\'bb\'cb\'cd\'b5\'bd\'c4\'c4\'c0\'ef\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'c3\'bb\'d3\'d0\'a3\'ac\'ca\'e4\'b3\'f6\'bd\'ab\'b1\'bb\'cb\'cd\'b5\'bd\'d0\'e9\'c4\'e2\'d6\'d5\'b6\'cb}{
\hich\af0\dbch\af17\loch\f0 7\hich\f0 \emdash \emdash }{\loch\af0\hich\af0\dbch\f17 \'b1\'bb}{\hich\af0\dbch\af17\loch\f0 X}{\loch\af0\hich\af0\dbch\f17 \'a1\'b0\'b8\'b2\'b8\'c7\'a1\'b1\'b5\'c4\'c4\'c7\'b8\'f6\'a1\'a3}{
\par }\pard \qj \fi540\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'c4\'e3\'b5\'c4\'c4\'da\'ba\'cb\'b1\'e4\'b5\'c3\'b2\'bb\'ce\'c8\'b6\'a8\'a3\'ac\'c4\'e3\'bf\'c9\'d2\'d4\'d4\'da\'c3\'bb
\'d3\'d0}{\hich\af0\dbch\af17\loch\f0 X}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'c7\'e9\'bf\'f6\'cf\'c2\'b5\'c3\'b5\'bd\'b5\'f7\'ca\'d4\'cf\'fb\'cf\'a2\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da}{\hich\af0\dbch\af17\loch\f0 X}{\loch\af0\hich\af0\dbch\f17 
\'cd\'e2\'a3\'ac}{\hich\af0\dbch\af17\loch\f0 printk}{\loch\af0\hich\af0\dbch\f17 \'bf\'c9\'d2\'d4\'d6\'b1\'bd\'d3\'b4\'d3\'c4\'da\'ba\'cb\'d6\'d0\'ca\'e4\'b3\'f6\'b5\'bd\'bf\'d8\'d6\'c6\'cc\'a8\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b6\'f8\'c8\'e7\'b9\'fb
\'d4\'da}{\hich\af0\dbch\af17\loch\f0 X}{\loch\af0\hich\af0\dbch\f17 \'c0\'ef\'a3\'ac}{\hich\af0\dbch\af17\loch\f0 printk}{\loch\af0\hich\af0\dbch\f17 \'ca\'e4\'b3\'f6\'b5\'bd\'d2\'bb\'b8\'f6\'d3\'c3\'bb\'a7\'cc\'ac\'b5\'c4\'bd\'f8\'b3\'cc\'a3\'a8}{
\hich\af0\dbch\af17\loch\f0 xterm \hich\f0 \endash \loch\f0 C}{\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'a1\'a3\'b5\'b1\'bd\'f8\'b3\'cc\'bd\'d3\'ca\'d5\'b5\'bd}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'ca\'b1\'bc\'e4\'a3\'ac\'cb\'fc
\'bb\'e1\'bd\'ab\'c6\'e4\'cb\'cd\'b5\'bd}{\hich\af0\dbch\af17\loch\f0 X}{\loch\af0\hich\af0\dbch\f17 \'b7\'fe\'ce\'f1\'c6\'f7\'bd\'f8\'b3\'cc\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'bb\'ba\'f3\'a3\'ac\'b5\'b1}{\hich\af0\dbch\af17\loch\f0 X}{
\loch\af0\hich\af0\dbch\f17 \'b7\'fe\'ce\'f1\'c6\'f7\'bd\'f8\'b3\'cc\'bd\'d3\'ca\'d5\'b5\'bd}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'ca\'b1\'bc\'e4\'a3\'ac\'cb\'fc\'bd\'ab\'bb\'e1\'cf\'d4\'ca\'be\'a3\'ac\'b5\'ab\'ca\'c7\'d2\'bb
\'b8\'f6\'b2\'bb\'ce\'c8\'b6\'a8\'b5\'c4\'c4\'da\'ba\'cb\'d2\'e2\'ce\'b6\'d7\'c5\'cf\'b5\'cd\'b3\'bd\'ab\'bb\'e1\'b1\'c0\'c0\'a3\'bb\'f2\'d6\'d8\'c6\'f0\'a3\'ac\'cb\'f9\'d2\'d4\'c4\'e3\'b2\'bb\'cf\'a3\'cd\'fb\'cf\'d4\'ca\'be\'b4\'ed\'ce\'f3\'b5\'c4
\'cf\'fb\'cf\'a2\'a3\'ac\'c8\'bb\'ba\'f3\'bf\'c9\'c4\'dc\'b1\'bb\'bd\'e2\'ca\'cd\'b8\'f8\'c4\'e3\'ca\'b2\'c3\'b4\'b7\'a2\'c9\'fa\'c1\'cb\'b4\'ed\'ce\'f3\'a3\'ac\'b5\'ab\loch\af0\hich\af0\dbch\f17 \'ca\'c7\'b3\'ac\'b3\'f6\'c1\'cb\'d5\'fd\'c8\'b7\'b5\'c4
\'ca\'b1\'bc\'e4\'a1\'a3}{
\par }\pard\plain \s2\qj \li0\ri0\sb260\sa260\sl416\slmult1\keep\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \b\fs32\lang1033\langfe2052\kerning2\loch\af1\hich\af1\dbch\af21\cgrid\langnp1033\langfenp2052 {
{\*\bkmkstart _Toc491281297}\hich\af1\dbch\af21\loch\f1 1.2 }{\loch\af1\hich\af1\dbch\f21 \'b6\'e0\'ce\'c4\'bc\'fe\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9}{{\*\bkmkend _Toc491281297}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'d3\'d0\'d0\'a9\'ca\'b1\'ba\'f2
\'d4\'da\'bc\'b8\'b8\'f6\'d4\'b4\'ce\'c4\'bc\'fe\'d6\'ae\'bc\'e4\'b7\'d6\'b3\'f6\'d2\'bb\'b8\'f6\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'ca\'c7\'ba\'dc\'d3\'d0\'d2\'e2\'d2\'e5\'b5\'c4\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da\'d5\'e2\'d6\'d6\'c7\'e9\'bf\'f6
\'cf\'c2\'a3\'ac\'c4\'e3\'d0\'e8\'d2\'aa\'d7\'f6\'cf\'c2\'c3\'e6\'b5\'c4\'ca\'c2\'c7\'e9\'a3\'ba}{
\par {\listtext\pard\plain\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 1.\tab}}\pard \qj \fi-420\li855\ri0\nowidctlpar\jclisttab\tx855\aspalpha\aspnum\faauto\ls4\adjustright\rin0\lin855\itap0 {\loch\af0\hich\af0\dbch\f17 \'d4\'da\'b3\'fd\'c1\'cb\'d2\'bb
\'b8\'f6\'d2\'d4\'cd\'e2\'b5\'c4\'cb\'f9\'d3\'d0\'d4\'b4\'ce\'c4\'bc\'fe\'d6\'d0\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'d4\'f6\'bc\'d3\'d2\'bb\'d0\'d0}{\hich\af0\dbch\af17\loch\f0 #define __NO_VERSION__}{
\loch\af0\hich\af0\dbch\f17 \'a1\'a3\'d5\'e2\'ca\'c7\'ba\'dc\'d6\'d8\'d2\'aa\'b5\'c4\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'d2\'f2\'ce\'aa}{\hich\af0\dbch\af17\loch\f0 module.h}{\loch\af0\hich\af0\dbch\f17 \'d2\'bb\'b0\'e3
\'b0\'fc\'c0\'a8}{\hich\af0\dbch\af17\loch\f0 kernel_version}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'b6\'a8\'d2\'e5\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'ca\'c7\'d2\'bb\'b8\'f6\'c8\'ab\'be\'d6\'b1\'e4\'c1\'bf
\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'b0\'fc\'ba\'ac\'c4\'a3\'bf\'e9\'b1\'e0\'d2\'eb\'b5\'c4\'c4\'da\'ba\'cb\'b0\'e6\'b1\'be\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'c4\'e3\'d0\'e8\'d2\'aa}{
\hich\af0\dbch\af17\loch\f0 version.h}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'c4\'e3\'d0\'e8\'d2\'aa\'b0\'d1\'d7\'d4\'bc\'ba\'b0\'d1\'cb\'fc\'b0\'fc\'ba\'ac\'bd\'f8\'c8\'a5\'a3\'ac\'d2\'f2\'ce\'aa\'c8\'e7\'b9\'fb\'d3\'d0}{\hich\af0\dbch\af17\loch\f0 
__NO_VERSION__}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'bb\'b0}{\hich\af0\dbch\af17\loch\f0 module.h}{\loch\af0\hich\af0\dbch\f17 \'b2\'bb\'bb\'e1\'d7\'d4\'b6\'af\'b0\'fc\'ba\'ac\'a1\'a3}{
\par {\listtext\pard\plain\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 2.\tab}}{\loch\af0\hich\af0\dbch\f17 \'cf\'f3\'cd\'a8\'b3\'a3\'d2\'bb\'d1\'f9\'b1\'e0\'d2\'eb\'d4\'b4\'ce\'c4\'bc\'fe\'a1\'a3}{
\par {\listtext\pard\plain\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 3.\tab}}{\loch\af0\hich\af0\dbch\f17 \'b0\'d1\'cb\'f9\'d3\'d0\'c4\'bf\'b1\'ea\'ce\'c4\'bc\'fe\'c1\'aa\'b1\'e0\'b3\'c9\'d2\'bb\'b8\'f6\'a1\'a3\'d4\'da}{\hich\af0\dbch\af17\loch\f0 X86
}{\loch\af0\hich\af0\dbch\f17 \'cf\'c2\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'d3\'c3}{\hich\af0\dbch\af17\loch\f0 ld \hich\f0 \endash \loch\f0 m elf_i386 \hich\f0 \endash \loch\f0 r \hich\f0 \endash \loch\f0 
o <name of module>.o <1}{\super \hich\af0\dbch\af17\loch\f0 st}{\hich\af0\dbch\af17\loch\f0  source file>
\par }\pard \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'c0\'ef\'b8\'f8\'b3\'f6\'d2\'bb\'b8\'f6\'d5\'e2\'d1\'f9\'b5\'c4\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'b5\'c4\'c0\'fd\'d7\'d3\'a1\'a3}
{
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\hich\af0\dbch\af17\loch\f0 ex }{\b \hich\af0\dbch\af17\loch\f0 start.c}{\hich\af0\dbch\af17\loch\f0  \~\~ }{\kerning0 
\par }{\hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0 /* start.c 
\par \hich\af0\dbch\af17\loch\f0  * Copyright (C) 1999 by Ori Pomerantz
\par \hich\af0\dbch\af17\loch\f0  * 
\par \hich\af0\dbch\af17\loch\f0  * "Hello, world" - the kernel module version. 
\par \hich\af0\dbch\af17\loch\f0  * This file includes just the start routine
\par \hich\af0\dbch\af17\loch\f0  */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The necessary header files */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Standard in kernel modules */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/kernel.h>   /* We're doing kernel work */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/module.h>   /* Specifically, a module */
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Deal with CONFIG_M\hich\af0\dbch\af17\loch\f0 ODVERSIONS */
\par \hich\af0\dbch\af17\loch\f0 #if CONFIG_MODVERSIONS==1
\par \hich\af0\dbch\af17\loch\f0 #define MODVERSIONS
\par \hich\af0\dbch\af17\loch\f0 #include <linux/modversions.h>
\par \hich\af0\dbch\af17\loch\f0 #endif        
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Initialize the module */
\par \hich\af0\dbch\af17\loch\f0 int init_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   printk("Hello, world - this is the kernel speaking\\n");
\par 
\par \hich\af0\dbch\af17\loch\f0   /* If we return a non zero value, it means that 
\par \hich\af0\dbch\af17\loch\f0    * init_module failed and the kernel module 
\par \hich\af0\dbch\af17\loch\f0    * can't be loaded */
\par \hich\af0\dbch\af17\loch\f0   return 0;
\par \}
\par \hich\af0\dbch\af17\loch\f0 ex }{\b \hich\af0\dbch\af17\loch\f0 stop.c}{\hich\af0\dbch\af17\loch\f0  \~\~ 
\par \hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0 /* stop.c 
\par \hich\af0\dbch\af17\loch\f0  * Copyright (C) 1999 by Ori Pomerantz
\par \hich\af0\dbch\af17\loch\f0  * 
\par \hich\af0\dbch\af17\loch\f0  * "Hello, world" - the kernel module version. Thi\hich\af0\dbch\af17\loch\f0 s 
\par \hich\af0\dbch\af17\loch\f0  * file includes just the stop routine.
\par \hich\af0\dbch\af17\loch\f0  */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The necessary header files */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Standard in kernel modules */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/kernel.h>   /* We're doing kernel work */
\par 
\par \hich\af0\dbch\af17\loch\f0 #define __NO_VERSION__      /* This isn't "the" file 
\par \hich\af0\dbch\af17\loch\f0                             \hich\af0\dbch\af17\loch\f0  * of the kernel module */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/module.h>   /* Specifically, a module */
\par 
\par \hich\af0\dbch\af17\loch\f0 #include <linux/version.h>   /* Not included by 
\par \hich\af0\dbch\af17\loch\f0                               * module.h because 
\par \hich\af0\dbch\af17\loch\f0                               * of the __NO_VERSION__ */
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Deal with CONFIG_MODVERSIONS */
\par \hich\af0\dbch\af17\loch\f0 #if CONFIG_MODVERSIONS==1
\par \hich\af0\dbch\af17\loch\f0 #define MODVERSIONS
\par \hich\af0\dbch\af17\loch\f0 #include <linux/modversions.h>
\par \hich\af0\dbch\af17\loch\f0 #endif        
\par 
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Cleanup - undid whatever init_module did */
\par \hich\af0\dbch\af17\loch\f0 void cleanup_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   printk("Short is the life of a kernel module\\n");
\par \}
\par \hich\af0\dbch\af17\loch\f0 ex }{\b \hich\af0\dbch\af17\loch\f0 Makefile}{\hich\af0\dbch\af17\loch\f0  \~\~ 
\par \hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0 # Makefile for a multifile kernel module
\par 
\par \hich\af0\dbch\af17\loch\f0 CC=gcc
\par \hich\af0\dbch\af17\loch\f0 MODCFLAGS := -Wall -DMODULE -D__KERNEL__ -DLINUX
\par 
\par \hich\af0\dbch\af17\loch\f0 hello.o:\tab start.o stop.o
\par \tab \tab \hich\af0\dbch\af17\loch\f0 ld -m elf_i386 -r -o hello.o start.o stop.o
\par 
\par \hich\af0\dbch\af17\loch\f0 start.o:\tab start.c /usr/include/linux/version.h
\par \tab \tab \hich\af0\dbch\af17\loch\f0 $(CC) $(MODCFLAGS) -\hich\af0\dbch\af17\loch\f0 c start.c
\par 
\par \hich\af0\dbch\af17\loch\f0 stop.o:\tab \tab stop.c /usr/include/linux/version.h
\par \tab \tab \hich\af0\dbch\af17\loch\f0 $(CC) $(MODCFLAGS) -c stop.c
\par }\pard \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard\plain \s1\qj \li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281298}
\hich\af0\dbch\af17\loch\f0 2}{\fs36 \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'d7\'d6\'b7\'fb\'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe}{\fs36 {\*\bkmkend _Toc491281298}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'c4\'c7\'c3\'b4\'a3\'ac\'cf\'d6
\'d4\'da\'ce\'d2\'c3\'c7\'ca\'c7\'d4\'ad\'ca\'bc\'bc\'b6\'b5\'c4\'c4\'da\'ba\'cb\'b3\'cc\'d0\'f2\'d4\'b1\'a3\'ac\'ce\'d2\'c3\'c7\'d6\'aa\'b5\'c0\'c8\'e7\'ba\'ce\'d0\'b4\'b2\'bb\'d7\'f6\'c8\'ce\'ba\'ce\'ca\'c2\'c7\'e9\'b5\'c4\'c4\'da\'ba\'cb\'c4\'a3
\'bf\'e9\'a1\'a3\'ce\'d2\'c3\'c7\'ce\'aa\'d7\'d4\'bc\'ba\'b6\'f8\'bd\'be\'b0\'c1\'b2\'a2\'c7\'d2\'b8\'df\'b0\'ba\'c6\'f0\'cd\'b7\'c0\'b4\'a1\'a3\'b5\'ab\'ca\'c7\'b2\'bb\'d6\'aa\'ba\'ce\'b9\'ca\'ce\'d2\'c3\'c7\'b8\'d0\'be\'f5\'b5\'bd\'c8\'b1\'c1\'cb
\'ca\'b2\'c3\'b4\'b6\'ab\'ce\'f7\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'bb\'bc\'d3\'d0\'be\'ab\'c9\'f1\'bd\'f4\'d5\'c5\'d6\'a2\'b5\'c4\'c4\'a3\'bf\'e9\'b2\'bb\'ca\'c7\'c4\'c7\'c3\'b4\'d3\'d0\'d2\'e2\'d2\'e5\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'cd\'ac\'bd\'f8\'b3\'cc\'b6\'d4\'bb\'b0\'d3\'d0\'c1\'bd\'d6\'d6\'d6\'f7\'d2\'aa\'cd\'be\'be\'b6\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d2\'bb\'d6\'d6\'ca\'c7\'cd\'a8\'b9\'fd\'c9\'e8\'b1\'b8
\'ce\'c4\'bc\'fe\'a3\'a8\loch\af0\hich\af0\dbch\f17 \'b1\'c8\'c8\'e7}{\hich\af0\dbch\af17\loch\f0 /dev }{\loch\af0\hich\af0\dbch\f17 \'c4\'bf\'c2\'bc\'d6\'d0\'b5\'c4\'ce\'c4\'bc\'fe\'a3\'a9\'a3\'ac\'c1\'ed\'d2\'bb\'d6\'d6\'ca\'c7\'ca\'b9\'d3\'c3}{
\hich\af0\dbch\af17\loch\f0 proc}{\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'cf\'b5\'cd\'b3\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'c3\'c7\'b0\'d1\'d2\'bb\'d0\'a9\'b6\'ab\'ce\'f7\'d0\'b4\'c8\'eb\'c4\'da\'ba\'cb\'b5\'c4\'d2\'bb\'b8\'f6\'d6\'f7
\'d2\'aa\'d4\'ad\'d2\'f2\'be\'cd\'ca\'c7\'d6\'a7\'b3\'d6\'d2\'bb\'d0\'a9\'d3\'b2\'bc\'fe\'c9\'e8\'b1\'b8\'a3\'ac\'cb\'f9\'d2\'d4\'ce\'d2\'c3\'c7\'b4\'d3\'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe\'bf\'aa\'ca\'bc\'a1\'a3}{\tab 
\par }{\loch\af0\hich\af0\dbch\f17 \'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe\'b5\'c4\'d7\'ee\'b3\'f5\'c4\'bf\'b5\'c4\'ca\'c7\'d4\'ca\'d0\'ed\'bd\'f8\'b3\'cc\'cd\'ac\'c4\'da\'ba\'cb\'d6\'d0\'b5\'c4\'c9\'e8\'b1\'b8\'c7\'fd\'b6\'af\'cd\'a8\'d0\'c5\'a3\'ac\'b2\'a2\'c7\'d2
\'cd\'a8\'b9\'fd\'cb\'fc\'c3\'c7\'ba\'cd\'ce\'ef\'c0\'ed\'c9\'e8\'b1\'b8\'cd\'a8\'d0\'c5\'a3\'a8}{\hich\af0\dbch\af17\loch\f0 modem}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'d6\'d5\'b6\'cb\'a3\'ac\'b5\'c8\'b5\'c8\'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 
\'d5\'e2\'d6\'d6\'b7\'bd\'b7\'a8\'b5\'c4\'ca\'b5\'cf\'d6\'c8\'e7\'cf\'c2\'a3\'ba}{
\par }{\loch\af0\hich\af0\dbch\f17 \'c3\'bf\'b8\'f6\'c9\'e8\'b1\'b8\'c7\'fd\'b6\'af\'b6\'bc\'b6\'d4\'d3\'a6\'d7\'c5\'d2\'bb\'b6\'a8\'c0\'e0\'d0\'cd\'b5\'c4\'d3\'b2\'bc\'fe\'c9\'e8\'b1\'b8\'a3\'ac\'b2\'a2\'c7\'d2\'b1\'bb\'b8\'b3\'d3\'e8\'d2\'bb\'b8\'f6\'d6\'f7
\'c2\'eb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c9\'e8\'b1\'b8\'c7\'fd\'b6\'af\'b5\'c4\'c1\'d0\'b1\'ed\'ba\'cd\'cb\'fc\'c3\'c7\'b5\'c4\'d6\'f7\'c2\'eb\'bf\'c9\'d2\'d4\'d4\'da}{\hich\af0\dbch\af17\loch\f0 in/proc/devices}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0
\'d5\'d2\'b5\'bd\'a1\'a3\'c3\'bf\'b8\'f6\'c9\'e8\'b1\'b8\'c7\'fd\'b6\'af\'b9\'dc\'c0\'ed\'cf\'c2\'b5\'c4\'ce\'ef\'c0\'ed\'c9\'e8\'b1\'b8\'d2\'b2\'b1\'bb\'b8\'b3\'d3\'e8\'d2\'bb\'b8\'f6\'b4\'d3\'c2\'eb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'ce\'de\'c2\'db
\'d5\'e2\'d0\'a9\'c9\'e8\'b1\'b8\'ca\'c7\'b7\'f1\'d5\'e6\'b5\'c4\'b0\'b2\'d7\'b0\'a3\'ac\'d4\'da}{\hich\af0\dbch\af17\loch\f0 /dev}{\loch\af0\hich\af0\dbch\f17 \'c4\'bf\'c2\'bc\'d6\'d0\'b6\'bc\'bd\'ab\'d3\'d0\'d2\'bb\'b8\'f6\'ce\'c4\'bc\'fe\'a3\'ac
\'b3\'c6\'d7\'f7\loch\af0\hich\af0\dbch\f17 \'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe\'a3\'ac\'b6\'d4\'d3\'a6\'d7\'c5\'c3\'bf\'d2\'bb\'b8\'f6\'c9\'e8\'b1\'b8\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'c0\'fd\'c8\'e7\'a3\'ac\'c8\'e7\'b9\'fb\'c4\'e3\'bd\'f8\'d0\'d0}{\hich\af0\dbch\af17\loch\f0 ls \hich\f0 \endash \loch\f0 l /dev/hd[ab] *}{\loch\af0\hich\af0\dbch\f17 \'b2\'d9\'d7\'f7\'a3\'ac\'c4\'e3\'bd\'ab\'bf\'b4\'bc\'fb
\'bf\'c9\'c4\'dc\'c1\'aa\'bd\'e1\'b5\'bd\'c4\'b3\'cc\'a8\'bb\'fa\'c6\'f7\'c9\'cf\'b5\'c4\'cb\'f9\'d3\'d0\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 IDE}{\loch\af0\hich\af0\dbch\f17 \'d3\'b2\'c5\'cc\'b7\'d6\'c7\'f8\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d7\'a2
\'d2\'e2\'cb\'fc\'c3\'c7\'b6\'bc\'ca\'b9\'d3\'c3\'c1\'cb\'cd\'ac\'d2\'bb\'b8\'f6\'d6\'f7\'c2\'eb\'a3\'ac}{\hich\af0\dbch\af17\loch\f0 3}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'b5\'ab\'ca\'c7\'b4\'d3\'c2\'eb\'c8\'b4\'bb\'a5\'b2\'bb\'cf\'e0\'cd\'ac\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'a3\'a8\'c9\'f9\'c3\'f7\'a3\'ba\'d5\'e2\'ca\'c7\'d4\'da}{\hich\af0\dbch\af17\loch\f0 PC}{\loch\af0\hich\af0\dbch\f17 \'bd\'e1\'b9\'b9\'c9\'cf\'b5\'c4\'c7\'e9\'bf\'f6\'a3\'ac\'ce\'d2\'b2\'bb\'d6\'aa\'b5\'c0\'d4\'da\'c6\'e4
\'cb\'fb\'bd\'e1\'b9\'b9\'c9\'cf\'d4\'cb\'d0\'d0\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 linux}{\loch\af0\hich\af0\dbch\f17 \'ca\'c7\'b7\'f1\'c8\'e7\'b4\'cb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'a3\'a9}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d4\'da\'cf\'b5\'cd\'b3\'b0\'b2\'d7\'b0\'ca\'b1\'a3\'ac\'cb\'f9\'d3\'d0\'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe\'d4\'da}{\hich\af0\dbch\af17\loch\f0 mknod}{\loch\af0\hich\af0\dbch\f17 \'c3\'fc\'c1\'ee\'cf\'c2\'b1\'bb\'b4\'b4\'bd\'a8
\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'cb\'fc\'c3\'c7\'b1\'d8\'d0\'eb\'b4\'b4\'bd\'a8\'d4\'da}{\hich\af0\dbch\af17\loch\f0 /dev}{\loch\af0\hich\af0\dbch\f17 \'c4\'bf\'c2\'bc\'cf\'c2\'c3\'bb\'d3\'d0\'bc\'bc\'ca\'f5\'c9\'cf\'b5\'c4\'d4\'ad\'d2\'f2\'a3\'ac
\'d6\'bb\'ca\'c7\'d2\'bb\'d6\'d6\'ca\'b9\'d3\'c3\'c9\'cf\'b5\'c4\'b1\'e3\'c0\'fb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'ca\'c7\'ce\'aa\'b2\'e2\'ca\'d4\'c4\'bf\'b5\'c4\'b6\'f8\'b4\'b4\'bd\'a8\'b5\'c4\'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe\'a3\'ac
\'b1\'c8\'c8\'e7\'ce\'d2\'c3\'c7\'d5\'e2\'c0\'ef\'b5\'c4\'c1\'b7\'cf\'b0\'a3\'ac\'bf\'c9\'c4\'dc\'b7\'c5\'d4\'da\'c4\'e3\'b1\'e0\'d2\'eb\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'b5\'c4\'b5\'c4\'c4\'bf\'c2\'bc\'cf\'c2\'b8\'fc\'bc\'d3\'ba\'cf\'ca\'ca\'a1\'a3}{

\par }{\loch\af0\hich\af0\dbch\f17 \'c9\'e8\'b1\'b8\'bf\'c9\'d2\'d4\'b1\'bb\'b7\'d6\'b3\'c9\'c1\'bd\'c0\'e0\loch\af0\hich\af0\dbch\f17 \'a3\'ba\'d7\'d6\'b7\'fb\'c9\'e8\'b1\'b8\'ba\'cd\'bf\'e9\'c9\'e8\'b1\'b8\'a1\'a3\'cb\'fc\'c3\'c7\'b5\'c4\'c7\'f8\'b1\'f0
\'ca\'c7\'bf\'e9\'c9\'e8\'b1\'b8\'d3\'d0\'d2\'bb\'b8\'f6\'d3\'c3\'d3\'da\'c7\'eb\'c7\'f3\'b5\'c4\'bb\'ba\'b3\'e5\'c7\'f8\'a3\'ac\'cb\'f9\'d2\'d4\'cb\'fc\'c3\'c7\'bf\'c9\'d2\'d4\'d1\'a1\'d4\'f1\'d3\'c3\'ca\'b2\'c3\'b4\'d1\'f9\'b5\'c4\'cb\'b3\'d0\'f2
\'c0\'b4\'cf\'ec\'d3\'a6\'cb\'fc\'c3\'c7\'a1\'a3\'d5\'e2\'b6\'d4\'d3\'da\'b4\'e6\'b4\'a2\'c9\'e8\'b1\'b8\'ca\'c7\'b7\'c7\'b3\'a3\'d6\'d8\'d2\'aa\'b5\'c4\'a3\'ac\'b6\'c1\'c8\'a1\'cf\'e0\'c1\'da\'b5\'c4\'c9\'c8\'c7\'f8\'b1\'c8\'bb\'a5\'cf\'e0\'d4\'b6
\'c0\'eb\'b5\'c4\'b7\'d6\'c7\'f8\'cb\'d9\'b6\'c8\'bb\'e1\'bf\'ec\'b5\'c3\'b6\'e0\'a1\'a3\'c1\'ed\'d2\'bb\'b8\'f6\'c7\'f8\'b1\'f0\'ca\'c7\'bf\'e9\'c9\'e8\'b1\'b8\'d6\'bb\'c4\'dc\'b0\'b4\'bf\'e9\'a3\'a8\'bf\'e9\'b4\'f3\'d0\'a1\'b6\'d4\'d3\'a6\'b2\'bb
\'cd\'ac\'c9\'e8\'b1\'b8\'b6\'f8\'b1\'e4\'bb\'af\'a3\'a9\'bd\'d3\'ca\'dc\'ca\'e4\'c8\'eb\'ba\'cd\'b7\'b5\'bb\'d8\'ca\'e4\'b3\'f6\'a3\'ac\'b6\'f8\'d7\'d6\'b7\'fb\'c9\'e8\'b1\'b8\'c8\'b4\'b0\'b4\'d5\'d5\'cb\'fc\'c3\'c7\'c4\'dc\'bd\'d3\'ca\'dc\'b5\'c4
\'d7\'ee\'c9\'d9\'d7\'d6\'bd\'da\'bf\'e9\'c0\'b4\'bd\'d3\'ca\'dc\'ca\'e4\'c8\'eb\'a1\'a3\'b4\'f3\'b2\'bf\'b7\'d6\'c9\'e8\'b1\'b8\'ca\'c7\'d7\'d6\'b7\'fb\'c9\'e8\'b1\'b8\'a3\'ac\'d2\'f2\'ce\'aa\'cb\'fc\'c3\'c7\'b2\'bb\'d0\'e8\'d2\'aa\'d5\'e2\'d6\'d6
\'c0\'e0\'d0\'cd\'b5\'c4\'bb\'ba\'b3\'e5\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c4\'e3\'bf\'c9\'d2\'d4\'cd\'a8\'b9\'fd\'b9\'db\'bf\'b4}{\hich\af0\dbch\af17\loch\f0 ls -l}{\loch\af0\hich\af0\dbch\f17 \'c3\'fc\'c1\'ee\'b5\'c4\'ca\'e4\'b3\'f6\'d6\'d0\'b5\'c4
\'b5\'da\'d2\'bb\'b8\'f6\'d7\'d6\'b7\'fb\'b6\'f8\'d6\'aa\'b5\'c0\'d2\'bb\'b8\'f6\'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe\'ca\'c7\'bf\'e9\'c9\'e8\'b1\'b8\'bb\'b9\'ca\'c7\'d7\'d6\'b7\'fb\'c9\'e8\'b1\'b8\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'ca\'c7}{
\hich\af0\dbch\af17\loch\f0 b}{\loch\af0\hich\af0\dbch\f17 \'be\'cd\'ca\'c7\'bf\'e9\'c9\'e8\'b1\'b8\'a3\'ac\'c8\'e7\'b9\'fb\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 c}{\loch\af0\hich\af0\dbch\f17 \'be\'cd\'ca\'c7\'d7\'d6\'b7\'fb\'c9\'e8\'b1\'b8\'a1\'a3}{

\par }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'c4\'a3\'bf\'e9\'bf\'c9\'d2\'d4\'b1\'bb\'b7\'d6\'b3\'c9\'c1\'bd\'b2\'bf\'b7\'d6\'a3\'ba\'c4\'a3\loch\af0\hich\af0\dbch\f17 \'bf\'e9\'b2\'bf\'b7\'d6\'ba\'cd\'c9\'e8\'b1\'b8\'bc\'b0\'c9\'e8\'b1\'b8\'c7\'fd
\'b6\'af\'b2\'bf\'b7\'d6\'a1\'a3}{\hich\af0\dbch\af17\loch\f0 Init_module}{\loch\af0\hich\af0\dbch\f17 \'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 module_register_chrdev}{\loch\af0\hich\af0\dbch\f17 \'d4\'da\'c4\'da\'ba\'cb\'b5\'c3
\'bf\'e9\'c9\'e8\'b1\'b8\'b1\'ed\'c0\'ef\'d4\'f6\'bc\'d3\'c9\'e8\'b1\'b8\'c7\'fd\'b6\'af\'a1\'a3\'cd\'ac\'ca\'b1\'b7\'b5\'bb\'d8\'b8\'c3\'c7\'fd\'b6\'af\'cb\'f9\'ca\'b9\'d3\'c3\'b5\'c4\'d6\'f7\'c2\'eb\'a1\'a3}{\hich\af0\dbch\af17\loch\f0 Cleanup_module}{
\loch\af0\hich\af0\dbch\f17 \'ba\'af\'ca\'fd\'b3\'b7\'cf\'fa\'c9\'e8\'b1\'b8\'b5\'c4\'d7\'a2\'b2\'e1\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'d0\'a9\'b2\'d9\'d7\'f7\'a3\'a8\'d7\'a2\'b2\'e1\'ba\'cd\'d7\'a2\'cf\'fa\'a3\'a9\'ca\'c7\'d5\'e2\'c1\'bd\'b8\'f6\'ba\'af\'ca\'fd\'b5\'c4\'d6\'f7\'d2\'aa\'b9\'a6\'c4\'dc\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c4\'da
\'ba\'cb\'d6\'d0\'b5\'c4\'ba\'af\'ca\'fd\'b2\'bb\'ca\'c7\'cf\'f3\'bd\'f8\'b3\'cc\'d2\'bb\'d1\'f9\'d7\'d4\'b7\'a2\'d4\'cb\'d0\'d0\'b5\'c4\'a3\'ac\'b6\'f8\'ca\'c7\'cd\'a8\'b9\'fd\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'a3\'ac\'bb\'f2\'d3\'b2\'bc\'fe\'d6\'d0
\'b6\'cf\'bb\'f2\'d5\'df\'c4\'da\'ba\'cb\'d6\'d0\'b5\'c4\'c6\'e4\'cb\'fc\'b2\'bf\'b7\'d6\'a3\'a8\'d6\'bb\'d2\'aa\'ca\'c7\'b5\'f7\'d3\'c3\'be\'df\'cc\'e5\'b5\'c4\'ba\'af\'ca\'fd\'a3\'a9\'b1\'bb\'bd\'f8\'b3\'cc\'b5\'f7\'d3\'c3\'b5\'c4\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'cb\'f9\'d2\'d4\'a3\'ac\'b5\'b1\'c4\'e3\'cf\'f2\'c4\'da\'ba\'cd\'d6\'d0\'d4\'f6\'bc\'d3\'b4\'fa\'c2\'eb\'ca\'b1\'a3\'ac\'c4\'e3\'d3\'a6\'b8\'c3\'b0\'d1\'cb\'fc\'d7\'a2\'b2\'e1\'ce\'aa\'be\'df\'cc\'e5\'c4\'b3\'d6\'d6\'ca\'c2
\'bc\'fe\'b5\'c4\'be\'e4\'b1\'fa\'a3\'ac\'b6\'f8\'b5\'b1\'c4\'e3\'b0\'d1\'cb\'fc\'c9\'be\'b3\'fd\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'c4\'e3\'d0\'e8\'d2\'aa\'d7\'a2\'cf\'fa\'d5\'e2\'b8\'f6\'be\'e4\'b1\'fa\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'c9\'e8\'b1\'b8\'c7\'fd\'b6\'af\'cd\'ea\'c8\'ab\'d3\'c9\'cb\'c4\'b8\'f6\'c9\'e8\loch\af0\hich\af0\dbch\f17 \'b1\'b8}{\hich\af0\dbch\af17\loch\f0 _<action}{\loch\af0\hich\af0\dbch\f17 \'a1\'b5\'ba\'af\'ca\'fd\'b9\'b9\'b3\'c9
\'a3\'ac\'cb\'fc\'c3\'c7\'d4\'da\'cf\'a3\'cd\'fb\'cd\'a8\'b9\'fd\'d3\'d0\'d6\'f7\'c2\'eb\'b5\'c4\'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe\'ca\'b5\'cf\'d6\'d2\'bb\'d0\'a9\'b2\'d9\'d7\'f7\'ca\'b1\'b1\'bb\'b5\'f7\'d3\'c3\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c4\'da
\'ba\'cb\'b5\'f7\'d3\'c3\'cb\'fc\'c3\'c7\'b5\'c4\'cd\'be\'be\'b6\'ca\'c7\'cd\'a8\'b9\'fd}{\hich\af0\dbch\af17\loch\f0 file_operation}{\loch\af0\hich\af0\dbch\f17 \'bd\'e1\'b9\'b9}{\hich\af0\dbch\af17\loch\f0 Fops}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3
\'b4\'cb\'bd\'e1\'b9\'b9\'d4\'da\'c9\'e8\'b1\'b8\'b1\'bb\'d7\'a2\'b2\'e1\'ca\'c7\'b4\'b4\'bd\'a8\'a3\'ac\'cb\'fc\'b0\'fc\'ba\'ac\'d6\'b8\'cf\'f2\'d5\'e2\'cb\'c4\'b8\'f6\'ba\'af\'ca\'fd\'b5\'c4\'d6\'b8\'d5\'eb\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'c1\'ed\'d2\'bb\'b5\'e3\'ce\'d2\'c3\'c7\'d0\'e8\'d2\'aa\'bc\'c7\'d7\'a1\'b5\'c4\'ca\'c7\'a3\'ac\'ce\'d2\'c3\'c7\'b2\'bb\'c4\'dc\'d4\'ca\'d0\'ed\'b9\'dc\'c0\'ed\'d4\'b1\'cb\'e6\'d0\'c4\'cb\'f9\'d3\'fb\'b5\'c4\'c9\'be\'b3\'fd
\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'ca\'c7\'d2\'f2\'ce\'aa\'c8\'e7\'b9\'fb\'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe\'ca\'c7\'b1\'bb\'bd\'f8\'b3\'cc\'b4\'f2\'bf\'aa\'b5\'c4\'a3\'ac\'c4\'c7\'c3\'b4\'ce\'d2\'c3\'c7\'c9\'be
\'b3\'fd\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'d2\'aa\'ca\'b9\'d3\'c3\'d5\'e2\'d0\'a9\'ce\'c4\'bc\'fe\'be\'cd\'bb\'e1\'b5\'bc\'d6\'c2\'b7\'c3\'ce\'ca\'d5\'fd\'b3\'a3\'b5\'c4\'ba\'af\'ca\'fd\'a3\'a8\'b6\'c1}{
\hich\af0\dbch\af17\loch\f0 /}{\loch\af0\hich\af0\dbch\f17 \'d0\'b4\'a3\'a9\'cb\'f9\'d4\'da\'b5\'c4\'c4\'da\'b4\'e6\'ce\'bb\'d6\'c3\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'d0\'d2\'d4\'cb\'a3\'ac\'c4\'c7\'c0\'ef\'b2\'bb\'bb\'e1\'d3\'d0\'c6\'e4
\'cb\'fb\'b4\'fa\'c2\'eb\'b1\'bb\'d7\'b0\'d4\'d8\'a3\'ac\'ce\'d2\'c3\'c7\'bd\'ab\'b5\'c3\'b5\'bd\'d2\'bb\'b8\'f6\'b6\'f1\'d0\'d4\'b5\'c4\'b4\'ed\'ce\'f3\'d0\'c5\'cf\'a2\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'b2\'bb\'d0\'d0\'a3\'ac\'c1\'ed
\'d2\'bb\'b8\'f6\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'bb\'e1\'b1\'bb\'d7\'b0\'d4\'d8\'b5\'bd\'cd\'ac\'d2\'bb\'b8\'f6\'ce\'bb\'d6\'c3\'a3\'ac\'d5\'e2\'bd\'ab\loch\af0\hich\af0\dbch\f17 \'d2\'e2\'ce\'b6\'d7\'c5\'bb\'e1\'cc\'f8\'c8\'eb\'c4\'da\'ba\'cb\'d6\'d0
\'c1\'ed\'d2\'bb\'b8\'f6\'b3\'cc\'d0\'f2\'b5\'c4\'d6\'d0\'bc\'e4\'a3\'ac\'bd\'e1\'b9\'fb\'bd\'ab\'ca\'c7\'b2\'bb\'bf\'c9\'d4\'a4\'c1\'cf\'b5\'c4\'b6\'f1\'c1\'d3\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'cd\'a8\'b3\'a3\'c4\'e3\'b2\'bb\'cf\'a3\'cd\'fb\'d2\'bb\'b8\'f6\'ba\'af\'ca\'fd\'d7\'f6\'ca\'b2\'c3\'b4\'ca\'c2\'c7\'e9\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'bb\'e1\'b4\'d3\'c4\'c7\'b8\'f6\'ba\'af\'ca\'fd\'b7\'b5\'bb\'d8\'d2\'bb
\'b8\'f6\'b4\'ed\'ce\'f3\'c2\'eb\'a3\'a8\'d2\'bb\'b8\'f6\'b8\'ba\'ca\'fd\'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b5\'ab\'d5\'e2\'d4\'da}{\hich\af0\dbch\af17\loch\f0 cleanup_module}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'ca\'c7\'b2\'bb\'bf\'c9\'c4\'dc
\'b5\'c4\'a3\'ac\'d2\'f2\'ce\'aa\'cb\'fc\'ca\'c7\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 void}{\loch\af0\hich\af0\dbch\f17 \'d0\'cd\'b5\'c4\'ba\'af\'ca\'fd\'a1\'a3\'d2\'bb\'b5\'a9}{\hich\af0\dbch\af17\loch\f0 cleanup_module}{
\loch\af0\hich\af0\dbch\f17 \'b1\'bb\'b5\'f7\'d3\'c3\'a3\'ac\'d5\'e2\'b8\'f6\'c4\'a3\'bf\'e9\'be\'cd\'cb\'c0\'b5\'f4\'c1\'cb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'bb\'b6\'f8\'d3\'d0\'d2\'bb\'b8\'f6\'bc\'c6\'ca\'fd\'c6\'f7\'bc\'c7\'c2\'bc\'d7\'c5
\'d3\'d0\'b6\'e0\'c9\'d9\'b8\'f6\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'d4\'da\'ca\'b9\'d3\'c3\'d5\'e2\'b8\'f6\'c4\'a3\'bf\'e9\'a3\'ac\'d5\'e2\'b8\'f6\'bc\'c6\'ca\'fd\'c6\'f7\'b3\'c6\'ce\'aa\'cb\'f7\'d2\'fd\'bc\'c6\'ca\'fd\'c6\'f7\'a3\'a8}{
\hich\af0\dbch\af17\loch\f0 /proc/modules}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'c3\'bb\'d0\'d0\'b5\'c4\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6\'ca\'fd\'d7\'d6\'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'d5\'e2\'b8\'f6\'ca\'fd\'d7\'d6\'b2\'bb
\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 0}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'c9\'be\'b3\'fd\'be\'cd\'bb\'e1\'ca\'a7\'b0\'dc\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c4\'a3\'bf\'e9\'b5\'c4\'cb\'f7\'d2\'fd\'bc\'c6\'ca\'fd\'c6\'f7\'b0\'fc\'ba\'ac\'d4\'da
\'b1\'e4\'c1\'bf}{\hich\af0\dbch\af17\loch\f0 mod_use_count_}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'a1\'a3\'d3\'d0\'b6\'a8\'d2\'e5\'ba\'c3\'b5\'c4\'b4\'a6\'c0\'ed\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'b1\'e4\'c1\'bf\'b5\'c4\'ba\'ea\'a3\'a8}{
\hich\af0\dbch\af17\loch\f0 MOD_INC_USE_COUNT}{\loch\af0\hich\af0\dbch\f17 \'ba\'cd}{\hich\af0\dbch\af17\loch\f0 MOD_DEC_USE_COUNT}{\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'a3\'ac\'cb\'f9\'d2\'d4\'ce\'d2\'c3\'c7\'d2\'bb\'b0\'e3\'ca\'b9\'d3\'c3\'ba\'ea
\'b6\'f8\'b2\'bb\'ca\'c7\'d6\'b1\'bd\'d3\'ca\'b9\'d3\'c3\'b1\'e4\'c1\'bf}{\hich\af0\dbch\af17\loch\f0 mod_use_count_}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'d5\'e2\'d1\'f9\'d4\'da\'d2\'d4\'ba\'f3\'ca\'b5\'cf\'d6\'b1\'e4\'bb\'af\'b5\'c4\'ca\'b1\'ba\'f2
\'bb\'e1\'b4\'f8\'c0\'b4\'b0\'b2\'c8\'ab\'d0\'d4\'a1\'a3}{
\par 
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\b \hich\af0\dbch\af17\loch\f0 ex chardev.c \~\~ }{\b\kerning0 
\par }{\hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0 /* chardev.c 
\par \hich\af0\dbch\af17\loch\f0  * Copyright (C) 1998-1999 by Ori Pomerantz
\par \hich\af0\dbch\af17\loch\f0  * 
\par \hich\af0\dbch\af17\loch\f0  * Create a character device (read only)
\par \hich\af0\dbch\af17\loch\f0  */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The necessary header files *\hich\af0\dbch\af17\loch\f0 /
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Standard in kernel modules */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/kernel.h>   /* We're doing kernel work */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/module.h>   /* Specifically, a module */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Deal with CONFIG_MODVERSIONS */
\par \hich\af0\dbch\af17\loch\f0 #if CONFIG_MODVERSIONS==1
\par \hich\af0\dbch\af17\loch\f0 #define MODVERSIONS
\par \hich\af0\dbch\af17\loch\f0 #include <linux/modvers\hich\af0\dbch\af17\loch\f0 ions.h>
\par \hich\af0\dbch\af17\loch\f0 #endif        
\par 
\par \hich\af0\dbch\af17\loch\f0 /* For character devices */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/fs.h>       /* The character device 
\par \hich\af0\dbch\af17\loch\f0                              * definitions are here */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/wrapper.h>  /* A wrapper which does 
\par \hich\af0\dbch\af17\loch\f0                              * next to nothing at
\par \hich\af0\dbch\af17\loch\f0                              * at present, but may 
\par \hich\af0\dbch\af17\loch\f0                              * help for compatibility
\par \hich\af0\dbch\af17\loch\f0                              * with future versions 
\par \hich\af0\dbch\af17\loch\f0                              * of Linux */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /*\hich\af0\dbch\af17\loch\f0  In 2.2.3 /usr/include/linux/version.h includes 
\par \hich\af0\dbch\af17\loch\f0  * a macro for this, but 2.0.35 doesn't - so I add 
\par \hich\af0\dbch\af17\loch\f0  * it here if necessary. */
\par \hich\af0\dbch\af17\loch\f0 #ifndef KERNEL_VERSION
\par \hich\af0\dbch\af17\loch\f0 #define KERNEL_VERSION(a,b,c) ((a)*65536+(b)*256+(c))
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Conditional compilation. LINUX_VERSION\hich\af0\dbch\af17\loch\f0 _CODE is 
\par \hich\af0\dbch\af17\loch\f0  * the code (as per KERNEL_VERSION) of this version. */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE > KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 #include <asm/uaccess.h>  /* for put_user */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par \tab \tab \tab \hich\af0\dbch\af17\loch\f0      
\par 
\par \hich\af0\dbch\af17\loch\f0 #define SUCCESS 0
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Device Declarations **************************** */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The name for our device, as it will appear 
\par \hich\af0\dbch\af17\loch\f0  * in /proc/devices */
\par \hich\af0\dbch\af17\loch\f0 #define DEVICE_NAME "char_dev"
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The maximum length of the message from the device */
\par \hich\af0\dbch\af17\loch\f0 #define BUF_LEN 80
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Is the device open right now? Used to prevent 
\par \hich\af0\dbch\af17\loch\f0  * concurent access into th\hich\af0\dbch\af17\loch\f0 e same device */
\par \hich\af0\dbch\af17\loch\f0 static int Device_Open = 0;
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The message the device will give when asked */
\par \hich\af0\dbch\af17\loch\f0 static char Message[BUF_LEN];
\par 
\par \hich\af0\dbch\af17\loch\f0 /* How far did the process reading the message 
\par \hich\af0\dbch\af17\loch\f0  * get? Useful if the message is larger than the size 
\par \hich\af0\dbch\af17\loch\f0  * of the buffer we get to\hich\af0\dbch\af17\loch\f0  fill in device_read. */
\par \hich\af0\dbch\af17\loch\f0 static char *Message_Ptr;
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This function is called whenever a process 
\par \hich\af0\dbch\af17\loch\f0  * attempts to open the device file */
\par \hich\af0\dbch\af17\loch\f0 static int device_open(struct inode *inode, 
\par \tab \tab \hich\af0\dbch\af17\loch\f0        struct file *file)
\par \{
\par \hich\af0\dbch\af17\loch\f0   static int counter = 0;
\par 
\par \hich\af0\dbch\af17\loch\f0 #ifdef DEBUG
\par \hich\af0\dbch\af17\loch\f0   printk ("device_open(%p,%p)\\n", inode, file);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par \hich\af0\dbch\af17\loch\f0   /* This is how you get the minor device number in 
\par \hich\af0\dbch\af17\loch\f0    * case you have more than one physical device using 
\par \hich\af0\dbch\af17\loch\f0    * the driver. */
\par \hich\af0\dbch\af17\loch\f0   printk("Device: %d.%d\\n", 
\par \tab \hich\af0\dbch\af17\loch\f0  inode->i_rdev >> 8, inode->i_rdev & 0xFF\hich\af0\dbch\af17\loch\f0 );
\par 
\par \hich\af0\dbch\af17\loch\f0   /* We don't want to talk to two processes at the 
\par \hich\af0\dbch\af17\loch\f0    * same time */
\par \hich\af0\dbch\af17\loch\f0   if (Device_Open)
\par \hich\af0\dbch\af17\loch\f0     return -EBUSY;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* If this was a process, we would have had to 
\par }\pard \qj \fi210\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\cufi100 {\hich\af0\dbch\af17\loch\f0 * be more careful here.
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\hich\af0\dbch\af17\loch\f0   *
\par }\pard \qj \fi210\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\cufi100 {\hich\af0\dbch\af17\loch\f0 *In the case of processes, the danger would be 
\par \hich\af0\dbch\af17\loch\f0 *that one process\hich\af0\dbch\af17\loch\f0  might have check Device_Open 
\par \hich\af0\dbch\af17\loch\f0 *and then be replaced by the schedualer by another 
\par \hich\af0\dbch\af17\loch\f0 *process which runs this function. Then, when 
\par \hich\af0\dbch\af17\loch\f0 *the first process was back on the CPU, it would assume 
\par \hich\af0\dbch\af17\loch\f0 *the device is still not open. 
\par \hich\af0\dbch\af17\loch\f0 * However, Linux guarantees that a pr\hich\af0\dbch\af17\loch\f0 ocess won't 
\par \hich\af0\dbch\af17\loch\f0 * be replaced while it is running in kernel context. 
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\hich\af0\dbch\af17\loch\f0    *
\par }\pard \qj \fi210\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\cufi100 {\hich\af0\dbch\af17\loch\f0 * In the case of SMP, one CPU might increment 
\par \hich\af0\dbch\af17\loch\f0 *Device_Open while another CPU is here, right after the check. 
\par \hich\af0\dbch\af17\loch\f0 *However, in version 2.0 of the kernel this is not a problem 
\par \hich\af0\dbch\af17\loch\f0 *\hich\af0\dbch\af17\loch\f0 because there's a lock to guarantee only one CPU will 
\par \hich\af0\dbch\af17\loch\f0 *be kernel module at the same time. 
\par \hich\af0\dbch\af17\loch\f0 *This is bad in  terms of  performance, so version 2.2 changed it. 
\par \hich\af0\dbch\af17\loch\f0 *Unfortunately, I don't have access to an SMP box 
\par \hich\af0\dbch\af17\loch\f0 *to check how it works with SMP.
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\hich\af0\dbch\af17\loch\f0    */
\par 
\par \hich\af0\dbch\af17\loch\f0   Dev\hich\af0\dbch\af17\loch\f0 ice_Open++;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Initialize the message. */
\par \hich\af0\dbch\af17\loch\f0   sprintf(Message, 
\par \hich\af0\dbch\af17\loch\f0     "If I told you once, I told you %d times - %s",
\par \hich\af0\dbch\af17\loch\f0     counter++,
\par \hich\af0\dbch\af17\loch\f0     "Hello, world\\n");
\par \hich\af0\dbch\af17\loch\f0   /* The only reason we're allowed to do this sprintf 
\par \hich\af0\dbch\af17\loch\f0    * is because the maximum length of the mess\hich\af0\dbch\af17\loch\f0 age 
\par \hich\af0\dbch\af17\loch\f0    * (assuming 32 bit integers - up to 10 digits
\par \hich\af0\dbch\af17\loch\f0    * with the minus sign) is less than BUF_LEN, which 
\par \hich\af0\dbch\af17\loch\f0    * is 80. BE CAREFUL NOT TO OVERFLOW BUFFERS, 
\par \hich\af0\dbch\af17\loch\f0    * ESPECIALLY IN THE KERNEL!!! 
\par \hich\af0\dbch\af17\loch\f0    */ 
\par 
\par \hich\af0\dbch\af17\loch\f0   Message_Ptr = Message;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Make sure that the module\hich\af0\dbch\af17\loch\f0  isn't removed while 
\par \hich\af0\dbch\af17\loch\f0    * the file is open by incrementing the usage count 
\par \hich\af0\dbch\af17\loch\f0    * (the number of opened references to the module, if 
\par \hich\af0\dbch\af17\loch\f0    * it's not zero rmmod will fail)
\par \hich\af0\dbch\af17\loch\f0    */
\par \hich\af0\dbch\af17\loch\f0   MOD_INC_USE_COUNT;
\par 
\par \hich\af0\dbch\af17\loch\f0   return SUCCESS;
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Th\hich\af0\dbch\af17\loch\f0 is function is called when a process closes the 
\par \hich\af0\dbch\af17\loch\f0  * device file. It doesn't have a return value in 
\par \hich\af0\dbch\af17\loch\f0  * version 2.0.x because it can't fail (you must ALWAYS
\par \hich\af0\dbch\af17\loch\f0  * be able to close a device). In version 2.2.x it is 
\par \hich\af0\dbch\af17\loch\f0  * allowed to fail - but we won't let it. 
\par \hich\af0\dbch\af17\loch\f0  *\hich\af0\dbch\af17\loch\f0 /
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 static int device_release(struct inode *inode, 
\par \tab \tab \tab \hich\af0\dbch\af17\loch\f0   struct file *file)
\par \hich\af0\dbch\af17\loch\f0 #else 
\par \hich\af0\dbch\af17\loch\f0 static void device_release(struct inode *inode, 
\par \tab \tab \tab \hich\af0\dbch\af17\loch\f0    struct file *file)
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \{
\par \hich\af0\dbch\af17\loch\f0 #ifdef DEBUG
\par \hich\af0\dbch\af17\loch\f0   printk ("device_release(%p,%p\hich\af0\dbch\af17\loch\f0 )\\n", inode, file);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0   /* We're now ready for our next caller */
\par \hich\af0\dbch\af17\loch\f0   Device_Open --;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Decrement the usage count, otherwise once you 
\par \hich\af0\dbch\af17\loch\f0    * opened the file you'll never get rid of the module.
\par \hich\af0\dbch\af17\loch\f0    */
\par \hich\af0\dbch\af17\loch\f0   MOD_DEC_USE_COUNT;
\par 
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= K\hich\af0\dbch\af17\loch\f0 ERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0   return 0;
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This function is called whenever a process which 
\par \hich\af0\dbch\af17\loch\f0  * have already opened the device file attempts to 
\par \hich\af0\dbch\af17\loch\f0  * read from it. */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 static ssize_t device_read(struct fil\hich\af0\dbch\af17\loch\f0 e *file,
\par \hich\af0\dbch\af17\loch\f0     char *buffer,    /* The buffer to fill with data */
\par \hich\af0\dbch\af17\loch\f0     size_t length,   /* The length of the buffer */
\par \hich\af0\dbch\af17\loch\f0     loff_t *offset)  /* Our offset in the file */
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0 static int device_read(struct inode *inode,
\par \hich\af0\dbch\af17\loch\f0                        struct file *fil\hich\af0\dbch\af17\loch\f0 e,
\par \hich\af0\dbch\af17\loch\f0     char *buffer,   /* The buffer to fill with 
\par \tab \tab \hich\af0\dbch\af17\loch\f0      * the data */ 
\par \hich\af0\dbch\af17\loch\f0     int length)     /* The length of the buffer 
\par \hich\af0\dbch\af17\loch\f0                      * (mustn't write beyond that!) */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* Number of bytes actually written to the buffer */
\par \hich\af0\dbch\af17\loch\f0   int bytes_rea\hich\af0\dbch\af17\loch\f0 d = 0;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* If we're at the end of the message, return 0 
\par \hich\af0\dbch\af17\loch\f0    * (which signifies end of file) */
\par \hich\af0\dbch\af17\loch\f0   if (*Message_Ptr == 0)
\par \hich\af0\dbch\af17\loch\f0     return 0;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Actually put the data into the buffer */
\par \hich\af0\dbch\af17\loch\f0   while (length && *Message_Ptr)  \{
\par 
\par \hich\af0\dbch\af17\loch\f0     /* Because the buffer is in the \hich\af0\dbch\af17\loch\f0 user data segment, 
\par \hich\af0\dbch\af17\loch\f0      * not the kernel data segment, assignment wouldn't 
\par \hich\af0\dbch\af17\loch\f0      * work. Instead, we have to use put_user which 
\par \hich\af0\dbch\af17\loch\f0      * copies data from the kernel data segment to the 
\par \hich\af0\dbch\af17\loch\f0      * user data segment. */
\par \hich\af0\dbch\af17\loch\f0     put_user(*(Message_Ptr++), buffer++);
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0     length --;
\par \hich\af0\dbch\af17\loch\f0     bytes_read ++;
\par \hich\af0\dbch\af17\loch\f0   \}
\par 
\par \hich\af0\dbch\af17\loch\f0 #ifdef DEBUG
\par \hich\af0\dbch\af17\loch\f0    printk ("Read %d bytes, %d left\\n",
\par \hich\af0\dbch\af17\loch\f0      bytes_read, length);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par \hich\af0\dbch\af17\loch\f0    /* Read functions are supposed to return the number 
\par \hich\af0\dbch\af17\loch\f0     * of bytes actually inserted into the buffer */
\par \hich\af0\dbch\af17\loch\f0   return bytes_read;
\par \}
\par 
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This function is called when somebody tries to write 
\par \hich\af0\dbch\af17\loch\f0  * into our device file - unsupported in this example. */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 static ssize_t device_write(struct file *file,
\par \hich\af0\dbch\af17\loch\f0     const char *buffer,    /* The buffe\hich\af0\dbch\af17\loch\f0 r */
\par \hich\af0\dbch\af17\loch\f0     size_t length,   /* The length of the buffer */
\par \hich\af0\dbch\af17\loch\f0     loff_t *offset)  /* Our offset in the file */
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0 static int device_write(struct inode *inode,
\par \hich\af0\dbch\af17\loch\f0                         struct file *file,
\par \hich\af0\dbch\af17\loch\f0                         const char *buffer,
\par \hich\af0\dbch\af17\loch\f0            \hich\af0\dbch\af17\loch\f0              int length)
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \{
\par \hich\af0\dbch\af17\loch\f0   return -EINVAL;
\par \}
\par 
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Module Declarations ***************************** */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The major device number for the device. This is 
\par \hich\af0\dbch\af17\loch\f0  * global (well, static, which in this context is global
\par \hich\af0\dbch\af17\loch\f0  * within this file) because it \hich\af0\dbch\af17\loch\f0 has to be accessible 
\par \hich\af0\dbch\af17\loch\f0  * both for registration and for release. */
\par \hich\af0\dbch\af17\loch\f0 static int Major;
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This structure will hold the functions to be 
\par \hich\af0\dbch\af17\loch\f0  * called when a process does something to the device 
\par \hich\af0\dbch\af17\loch\f0  * we created. Since a pointer to this structure is 
\par \hich\af0\dbch\af17\loch\f0  * kept in th\hich\af0\dbch\af17\loch\f0 e devices table, it can't be local to
\par \hich\af0\dbch\af17\loch\f0  * init_module. NULL is for unimplemented functions. */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 struct file_operations Fops = \{
\par \hich\af0\dbch\af17\loch\f0   NULL,   /* seek */
\par \hich\af0\dbch\af17\loch\f0   device_read, 
\par \hich\af0\dbch\af17\loch\f0   device_write,
\par \hich\af0\dbch\af17\loch\f0   NULL,   /* readdir */
\par \hich\af0\dbch\af17\loch\f0   NULL,   /* select */
\par \hich\af0\dbch\af17\loch\f0   NULL,   /* ioctl */
\par \hich\af0\dbch\af17\loch\f0   NULL\hich\af0\dbch\af17\loch\f0 ,   /* mmap */
\par \hich\af0\dbch\af17\loch\f0   device_open,
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0   NULL,   /* flush */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \hich\af0\dbch\af17\loch\f0   device_release  /* a.k.a. close */
\par \}\hich\af0\dbch\af17\loch\f0 ;
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Initialize the module - Register the character device */
\par \hich\af0\dbch\af17\loch\f0 int init_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* Register the character\hich\af0\dbch\af17\loch\f0  device (atleast try) */
\par \hich\af0\dbch\af17\loch\f0   Major = module_register_chrdev(0, 
\par \hich\af0\dbch\af17\loch\f0                                  DEVICE_NAME,
\par \hich\af0\dbch\af17\loch\f0                                  &Fops);
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Negative values signify an error */
\par \hich\af0\dbch\af17\loch\f0   if (Major < 0) \{
\par \hich\af0\dbch\af17\loch\f0     printk ("%s device failed with %d\\n",
\par \tab \hich\af0\dbch\af17\loch\f0    \hich\af0\dbch\af17\loch\f0  "Sorry, registering the character",
\par \tab \hich\af0\dbch\af17\loch\f0     Major);
\par \hich\af0\dbch\af17\loch\f0     return Major;
\par \hich\af0\dbch\af17\loch\f0   \}
\par 
\par \hich\af0\dbch\af17\loch\f0   printk ("%s The major device number is %d.\\n",
\par \hich\af0\dbch\af17\loch\f0           "Registeration is a success.",
\par \hich\af0\dbch\af17\loch\f0           Major);
\par \hich\af0\dbch\af17\loch\f0   printk ("If you want to talk to the device driver,\\n");
\par \hich\af0\dbch\af17\loch\f0   printk ("you'll\hich\af0\dbch\af17\loch\f0  have to create a device file. \\n");
\par \hich\af0\dbch\af17\loch\f0   printk ("We suggest you use:\\n");
\par \hich\af0\dbch\af17\loch\f0   printk ("mknod <name> c %d <minor>\\n", Major);
\par \hich\af0\dbch\af17\loch\f0   printk ("You can try different minor numbers %s",
\par \hich\af0\dbch\af17\loch\f0           "and see what happens.\\n");
\par 
\par \hich\af0\dbch\af17\loch\f0   return 0;
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Cleanup - unregister the\hich\af0\dbch\af17\loch\f0  appropriate file from /proc */
\par \hich\af0\dbch\af17\loch\f0 void cleanup_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   int ret;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Unregister the device */
\par \hich\af0\dbch\af17\loch\f0   ret = module_unregister_chrdev(Major, DEVICE_NAME);
\par \hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0   /* If there's an error, report it */ 
\par \hich\af0\dbch\af17\loch\f0   if (ret < 0)
\par \hich\af0\dbch\af17\loch\f0     printk("Error in unregister_chrdev: %d\\n", \hich\af0\dbch\af17\loch\f0 ret);
\par \}
\par }\pard\plain \s2\qj \li0\ri0\sb260\sa260\sl416\slmult1\keep\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \b\fs32\lang1033\langfe2052\kerning2\loch\af1\hich\af1\dbch\af21\cgrid\langnp1033\langfenp2052 {
{\*\bkmkstart _Toc491281299}\hich\af1\dbch\af21\loch\f1 2}{\loch\af1\hich\af1\dbch\f21 \'a3\'ae}{\hich\af1\dbch\af21\loch\f1 1}{\loch\af1\hich\af1\dbch\f21 \'b6\'e0\'c4\'da\'ba\'cb\'b0\'e6\'b1\'be\'d4\'b4\'ce\'c4\'bc\'fe}{{\*\bkmkend _Toc491281299}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3
\'ca\'c7\'c4\'da\'ba\'cb\'b3\'f6\'ca\'be\'b8\'f8\'bd\'f8\'b3\'cc\'b5\'c4\'d6\'f7\'d2\'aa\'bd\'d3\'bf\'da\'a3\'ac\'d4\'da\'b2\'bb\'cd\'ac\'b0\'e6\'b1\'be\'d6\'d0\'d2\'bb\'b0\'e3\'ca\'c7\'cf\'e0\'cd\'ac\'b5\'c4\'a1\'a3\'bf\'c9\'c4\'dc\'bb\'e1\'d4\'f6
\'bc\'d3\'d0\'c2\'b5\'c4\'cf\'b5\'cd\'b3\'a3\'ac\'b5\'ab\'ca\'c7\'be\'c9\'b5\'c4\'cf\'b5\'cd\'b3\'b5\'c4\'d0\'d0\'ce\'aa\'ca\'c7\'b2\'bb\'b1\'e4\'b5\'c4\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'cf\'f2\'ba\'f3\'bc\'e6\'c8\'dd\'ca\'c7\'b1\'d8\'d2\'aa\'b5\'c4}{
\loch\af0\dbch\af17\hich\f0 \emdash \emdash }{\loch\af0\hich\af0\dbch\f17 \'d0\'c2\'b5\'c4\'c4\'da\'ba\'cb\'b0\'e6\'b1\'be\'b2\'bb\'c4\'dc\'b4\'f2\'c6\'c6\'d5\'fd\'b3\'a3\'b5\'c4\'bd\'f8\'b3\'cc\'b9\'e6\'c2\'c9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da
\'b4\'f3\'b6\'e0\'ca\'fd\'c7\'e9\'bf\'f6\'cf\'c2\'a3\'ac\'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe\'ca\'c7\'b2\'bb\'b1\'e4\'b5\'c4\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'bb\'b6\'f8\'a3\'ac\'c4\'da\'ba\'cb\'d6\'d0\'b5\'c4\'c4\'da\'b2\'bf\'bd\'d3\'bf\'da\'ca\'c7
\'bf\'c9\'d2\'d4\'d4\'da\'b2\'bb\'cd\'ac\'b0\'e6\'b1\'be\'bc\'e4\'b8\'c4\'b1\'e4\'b5\'c4\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 Linux}{\loch\af0\hich\af0\dbch\f17 \'c4\'da\'ba\'cb\'b5\'c4\'b0\'e6\'b1\'be\'b7\'d6\'ce\'aa\'ce\'c8\'b6\'a8\'b0\'e6\'a3\'a8}{\hich\af0\dbch\af17\loch\f0 n.<}{\loch\af0\hich\af0\dbch\f17 \'c5\'bc\'ca\'fd}{
\hich\af0\dbch\af17\loch\f0 >.m}{\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'ba\'cd\'b7\'a2\'d5\'b9\'b0\'e6\'a3\'a8}{\hich\af0\dbch\af17\loch\f0 n.<}{\loch\af0\hich\af0\dbch\f17 \'c6\'e6\'ca\'fd}{\hich\af0\dbch\af17\loch\f0 >.m}{\loch\af0\hich\af0\dbch\f17 
\'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b7\'a2\'d5\'b9\'b0\'e6\'b0\'fc\'ba\'ac\'c1\'cb\'cb\'f9\'d3\'d0\'d0\'c2\'c6\'e6\'b5\'c4\'cb\'bc\'cf\'eb\'a3\'ac\'b0\'fc\'c0\'a8\'c4\'c7\'d0\'a9\'d4\'da\'cf\'c2\'d2\'bb\'b0\'e6\'d6\'d0\'b1\'bb\'c8\'cf\'ce\'aa
\'ca\'c7\'b4\'ed\'b5\'c4\'a3\'ac\'bb\'f2\'d5\'df\'b1\'bb\'d6\'d8\'d0\'c2\'ca\'b5\'cf\'d6\'b5\'c4\'a1\'a3\'cb\'f9\'d2\'d4\'a3\'ac\'c4\'e3\'b2\'bb\'c4\'dc\loch\af0\hich\af0\dbch\f17 \'cf\'e0\'d0\'c5\'d4\'da\'c4\'c7\'d0\'a9\'b0\'e6\'b1\'be\'d6\'d0\'d5\'e2
\'d0\'a9\'bd\'d3\'bf\'da\'ca\'c7\'b1\'a3\'b3\'d6\'b2\'bb\'b1\'e4\'b5\'c4\'a3\'a8\'d5\'e2\'be\'cd\'ca\'c7\'ce\'aa\'ca\'b2\'c3\'b4\'ce\'d2\'d4\'da\'b1\'be\'ca\'e9\'d6\'d0\'b2\'bb\'d1\'e1\'c6\'e4\'b7\'b3\'b5\'c4\'d6\'a7\'b3\'d6\'b2\'bb\'cd\'ac\'bd\'d3
\'bf\'da\'a1\'a3\'d5\'e2\'ca\'c7\'ba\'dc\'b4\'f3\'c1\'bf\'b5\'c4\'b9\'a4\'d7\'f7\'b5\'ab\'ca\'c7\'c2\'ed\'c9\'cf\'be\'cd\'bb\'e1\'b9\'fd\'ca\'b1\'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b5\'ab\'ca\'c7\'d4\'da\'ce\'c8\'b6\'a8\'b0\'e6\'d6\'d0\'ce\'d2
\'c3\'c7\'be\'cd\'bf\'c9\'d2\'d4\'c8\'cf\'ce\'aa\'bd\'d3\'bf\'da\'ca\'c7\'cf\'e0\'cd\'ac\'b5\'c4\'a3\'ac\'bc\'b4\'ca\'b9\'d4\'da\'d0\'de\'d5\'fd\'b0\'e6\'d6\'d0\'a3\'a8\'ca\'fd\'d7\'d6}{\hich\af0\dbch\af17\loch\f0 m}{\loch\af0\hich\af0\dbch\f17 \'cb\'f9
\'d6\'b8\'b5\'c4\'a3\'a9\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 MPG}{\loch\af0\hich\af0\dbch\f17 \'b0\'e6\'b1\'be\'b0\'fc\'c0\'a8\'c1\'cb\'b6\'d4\'c4\'da\'ba\'cb}{\hich\af0\dbch\af17\loch\f0 2.0.x}{\loch\af0\hich\af0\dbch\f17 \'ba\'cd}{\hich\af0\dbch\af17\loch\f0 2.2.x}{
\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'d6\'a7\'b3\'d6\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'c1\'bd\'d6\'d6\'c4\'da\'ba\'cb\'c8\'d4\'d3\'d0\'b2\'bb\'cd\'ac\'d6\'ae\'b4\'a6\'a3\'ac\'cb\'f9\'d2\'d4\'b1\'e0\'d2\'eb\'ca\'b1\'d2\'aa\'c8\'a1\'be\'f6
\'d3\'da\'c4\'da\'ba\'cb\'b0\'e6\'b1\'be\'b6\'f8\'be\'f6\'b6\'a8\'a1\'a3\'b7\'bd\'b7\'a8\'ca\'c7\'ca\'b9\'d3\'c3\'ba\'ea}{\hich\af0\dbch\af17\loch\f0 LINUX_VERSION_CODE}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da}{
\hich\af0\dbch\af17\loch\f0 a.b.c}{\loch\af0\hich\af0\dbch\f17 \'b0\'e6\'d6\'d0\'a3\'ac\'d5\'e2\'b8\'f6\'ba\'ea\'b5\'c4\'d6\'b5\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 2}{\super \hich\af0\dbch\af17\loch\f0 16}{\i \hich\af0\dbch\af17\loch\f0 a}{
\hich\af0\dbch\af17\loch\f0 +2}{\super \hich\af0\dbch\af17\loch\f0 8}{\i \hich\af0\dbch\af17\loch\f0 b}{\hich\af0\dbch\af17\loch\f0 +}{\i \hich\af0\dbch\af17\loch\f0 c}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\'c8\'e7\'b9\'fb\'cf\'a3\'cd\'fb\'b5\'c3\'b5\'bd
\'be\'df\'cc\'e5\'c4\'da\'ba\'cb\'b0\'e6\'b1\'be\'ba\'c5\'a3\'ac\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'ca\'b9\'d3\'c3\'ba\'ea}{\hich\af0\dbch\af17\loch\f0 KERNEL_VERSION}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da}{
\hich\af0\dbch\af17\loch\f0 2.0.35}{\loch\af0\hich\af0\dbch\f17 \'b0\'e6\'d6\'d0\'c3\'bb\'d3\'d0\'b6\'a8\'d2\'e5\'d5\'e2\'b8\'f6\'ba\'ea\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'d4\'da\'d0\'e8\'d2\'aa\'ca\'b1\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'d7\'d4\'bc\'ba
\'b6\'a8\'d2\'e5\'a1\'a3}{
\par 
\par 
\par 
\par 
\par 
\par }\pard\plain \s1\qj \li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281300}
\hich\af0\dbch\af17\loch\f0 3}{\fs36 \loch\af0\hich\af0\dbch\f17 \'a3\'ae}{\fs36 \hich\af0\dbch\af17\loch\f0 /proc}{\fs36 \loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'cf\'b5\'cd\'b3}{\fs36 {\*\bkmkend _Toc491281300}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'d4\'da}{\hich\af0\dbch\af17\loch\f0 
Linux}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'d3\'d0\'d2\'bb\'b8\'f6\'c1\'ed\'cd\'e2\'b5\'c4\'bb\'fa\'d6\'c6\'c0\'b4\'ca\'b9\'c4\'da\'ba\'cb\'bc\'b0\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'b7\'a2\'cb\'cd\'d0\'c5\'cf\'a2\'b8\'f8\'bd\'f8\'b3\'cc}{
\loch\af0\dbch\af17\hich\f0 \emdash \emdash \loch\f0 /proc}{\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'cf\'b5\'cd\'b3\'a1\'a3}{\hich\af0\dbch\af17\loch\f0 /proc}{\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'cf\'b5\'cd\'b3\'d7\'ee\'b3\'f5\'ca\'c7
\'c9\'e8\'bc\'c6\'ca\'b9\'b5\'c3\'c8\'dd\'d2\'d7\'b5\'c3\'b5\'bd\'bd\'f8\'b3\'cc\'b5\'c4\'d0\'c5\'cf\'a2\'a3\'a8\'b4\'d3\'c3\'fb\'d7\'d6\'bf\'c9\'d2\'d4\'bf\'b4\'b3\'f6\'a3\'a9\'a3\'ac\'cf\'d6\'d4\'da\'c8\'b4\'b1\'bb\'c8\'ce\'d2\'e2\'d2\'bb\'bf\'e9
\'d3\'d0\'c4\'da\'c8\'dd\'d0\'e8\'d2\'aa\'b1\'a8\'b8\'e6\'b5\'c4\'c4\'da\'ba\'cb\'ca\'b9\'d3\'c3\'a3\'ac\'b1\'c8\'c8\'e7\'d3\'b5\'d3\'d0\'c4\'a3\'bf\'e9\'c1\'d0\'b1\'ed\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 /proc/modules}{\loch\af0\hich\af0\dbch\f17 
\'ba\'cd\'d3\'b5\'d3\'d0\'c4\'da\'b4\'e6\'ca\'b9\'d3\'c3\'cd\'b3\'bc\'c6\'d0\'c5\'cf\'a2\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 /proc/meminfo}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'ca\'b9\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 proc}{\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'cf\'b5\'cd\'b3\'b5\'c4\'b7\'bd\'b7\'a8\'ba\'dc\'cf\'f3\'ca\'b9\'d3\'c3\'c9\'e8\'b1\'b8\'c7\'fd\'b6\'af}{
\loch\af0\dbch\af17\hich\f0 \emdash \emdash }{\loch\af0\hich\af0\dbch\f17 \'c4\'e3\'b4\'b4\'bd\'a8\'d2\'bb\'b8\'f6\'ca\'fd\'be\'dd\'bd\'e1\'b9\'b9\'a3\'ac\'ca\'b9\'d6\'ae\'b0\'fc\'ba\'ac}{\hich\af0\dbch\af17\loch\f0 /proc}{\loch\af0\hich\af0\dbch\f17 
\'ce\'c4\'bc\'fe\'d0\'e8\'d2\'aa\'b5\'c4\'c8\'ab\'b2\'bf\'d0\'c5\loch\af0\hich\af0\dbch\f17 \'cf\'a2\'a3\'ac\'b0\'fc\'c0\'a8\'cb\'f9\'d3\'d0\'ba\'af\'ca\'fd\'b5\'c4\'be\'e4\'b1\'fa\'a3\'a8\'d4\'da\'ce\'d2\'c3\'c7\'b5\'c4\'c0\'fd\'d7\'d3\'c0\'ef\'d6\'bb
\'d3\'d0\'d2\'bb\'b8\'f6\'a3\'ac\'d4\'da\'ca\'d4\'cd\'bc\'b6\'c1\'c8\'a1}{\hich\af0\dbch\af17\loch\f0 /proc}{\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'ca\'b1\'b5\'f7\'d3\'c3\'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'bb\'ba\'f3\'a3\'ac\'d3\'c3}{
\hich\af0\dbch\af17\loch\f0 init_module}{\loch\af0\hich\af0\dbch\f17 \'d7\'a2\'b2\'e1\'d5\'e2\'b8\'f6\'bd\'e1\'b9\'b9\'a3\'ac\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 cleanup_module}{\loch\af0\hich\af0\dbch\f17 \'d7\'a2\'cf\'fa\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'c3\'c7\'ca\'b9\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 proc_register_dynamic}{\loch\af0\hich\af0\dbch\f17 \'a3\'a8\'d7\'a2}{\hich\af0\dbch\af17\loch\f0 3.1}{\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'b5\'c4\'d4\'ad\'d2\'f2
\'ca\'c7\'ce\'d2\'c3\'c7\'b2\'bb\'cf\'a3\'cd\'fb\'be\'f6\'b6\'a8\'d2\'d4\'ba\'f3\'d4\'da\'ce\'c4\'bc\'fe\'d6\'d0\'ca\'b9\'d3\'c3\'b5\'c4\'cb\'f7\'d2\'fd\'bd\'da\'b5\'e3\'ca\'fd\'a3\'ac\'b6\'f8\'ca\'c7\'c8\'c3\'c4\'da\'ba\'cb\'c0\'b4\'be\'f6\'b6\'a8
\'cb\'fc\'a3\'ac\'ce\'aa\'c1\'cb\'b7\'c0\'d6\'b9\'b3\'e5\'cd\'bb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b1\'ea\'d7\'bc\'b5\'c4\'ce\'c4\'bc\'fe\'cf\'b5\'cd\'b3\'ca\'c7\'d4\'da\'b4\'c5\'c5\'cc\'c9\'cf\'b6\'f8\'b2\'bb\'ca\'c7\'d4\'da\'c4\'da\'b4\'e6\'a3\'a8}{
\hich\af0\dbch\af17\loch\f0 /proc}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'ce\'bb\'d6\'c3\'d4\'da\'c4\'da\'b4\'e6\'a3\'a9\'a3\'ac\'d4\'da\'d5\'e2\'d6\'d6\'c7\'e9\'bf\'f6\'cf\'c2\'bd\'da\'b5\'e3\'ca\'fd\'ca\'c7\'d2\'bb\'b8\'f6\'d6\'b8\'cf\'f2\'ce\'c4\'bc\'fe
\'b5\'c4\'cb\'f7\'d2\'fd\'bd\'da\'b5\'e3\'cb\'f9\'d4\'da\'b4\'c5\'c5\'cc\'b5\'d8\'d6\'b7\'b5\'c4\'d6\'b8\'d5\'eb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'cb\'f7\'d2\'fd\'bd\'da\'b5\'e3\'b0\'fc\'ba\'ac\'c1\'cb\'ce\'c4\'bc\'fe\'b5\'c4\'d3\'d0
\'b9\'d8\'d0\'c5\'cf\'a2\'b1\'c8\'c8\'e7\'ce\'c4\'bc\'fe\'b5\'c4\'b7\'c3\'ce\'ca\'c8\'a8\'cf\'de\'d2\'d4\'bc\'b0\'d6\'b8\'cf\'f2\'b4\'c5\'c5\'cc\'b5\'d8\'d6\'b7\'b5\'c4\'d6\'b8\'d5\'e6\'bb\'f2\loch\af0\hich\af0\dbch\f17 \'d5\'df\'ce\'c4\'bc\'fe\'ca\'fd
\'be\'dd\'b5\'c4\'ce\'bb\'d6\'c3\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d2\'f2\'ce\'aa\'d4\'da\'ce\'c4\'bc\'fe\'b4\'f2\'bf\'aa\'bb\'f2\'b9\'d8\'b1\'d5\'ca\'b1\'ce\'d2\'c3\'c7\'c3\'bb\'d3\'d0\'b5\'f7\'d3\'c3\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'cb\'f9\'d2\'d4\'d4\'da
\'c4\'a3\'bf\'e9\'c0\'ef\'ce\'de\'b4\'a6\'bf\'c9\'b7\'c5\'ba\'ea}{\hich\af0\dbch\af17\loch\f0 MOD_INC_USE_COUNT}{\loch\af0\hich\af0\dbch\f17 \'ba\'cd}{\hich\af0\dbch\af17\loch\f0 MOD_DEC_USE_COUNT}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac
\loch\af0\hich\af0\dbch\f17 \'b6\'f8\'c7\'d2\'c8\'e7\'b9\'fb\'ce\'c4\'bc\'fe\'b1\'bb\'b4\'f2\'bf\'aa\'c1\'cb\'bb\'f2\'d5\'df\'c4\'a3\'bf\'e9\'b1\'bb\'c9\'be\'b3\'fd\'c1\'cb\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'be\'cd\'c3\'bb
\'d3\'d0\'b0\'ec\'b7\'a8\'c0\'b4\'b1\'dc\'c3\'e2\'d5\'e2\'b8\'f6\'bd\'e1\'b9\'fb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'cf\'c2\'d2\'bb\'d5\'c2\'ce\'d2\'c3\'c7\'bd\'ab\'bb\'e1\'bf\'b4\'b5\'bd\'d2\'bb\'b8\'f6\'b8\'fc\'c0\'a7\'c4\'d1\'b5\'c4\'b4\'a6\'c0\'ed}{
\hich\af0\dbch\af17\loch\f0 /proc}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'b7\'bd\'b7\'a8\'a3\'ac\'b5\'ab\'ca\'c7\'d2\'b2\'b8\'fc\'bc\'d3\'c1\'e9\'bb\'ee\'a3\'ac\'d2\'b2\'c4\'dc\'b9\'bb\'bd\'e2\'be\'f6\'d5\'e2\'b8\'f6\'ce\'ca\'cc\'e2\'a1\'a3}{
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\hich\af0\dbch\af17\loch\f0 ex }{\b \hich\af0\dbch\af17\loch\f0 procfs.c}{\hich\af0\dbch\af17\loch\f0  \~\~ }{\kerning0 
\par }{\hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0 /* procfs.c -  create a "file" in /proc 
\par \hich\af0\dbch\af17\loch\f0  * Copyright (C) 1998-1999 by Ori Pomerantz
\par \hich\af0\dbch\af17\loch\f0  \hich\af0\dbch\af17\loch\f0 */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The necessary header files */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Standard in kernel modules */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/kernel.h>   /* We're doing kernel work */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/module.h>   /* Specifically, a module */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Deal with CONFIG_MODVERSIONS */
\par \hich\af0\dbch\af17\loch\f0 #if CONFIG_MODVERSIONS==1
\par \hich\af0\dbch\af17\loch\f0 #define\hich\af0\dbch\af17\loch\f0  MODVERSIONS
\par \hich\af0\dbch\af17\loch\f0 #include <linux/modversions.h>
\par \hich\af0\dbch\af17\loch\f0 #endif        
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Necessary because we use the proc fs */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/proc_fs.h>
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* In 2.2.3 /usr/include/linux/version.h includes a 
\par \hich\af0\dbch\af17\loch\f0  * macro for this, but 2.0.35 doesn't - so I add it 
\par \hich\af0\dbch\af17\loch\f0  * here if necessary. */
\par \hich\af0\dbch\af17\loch\f0 #ifndef KERNEL_VERSION
\par \hich\af0\dbch\af17\loch\f0 #define KERNEL_VERSION(a,b,c) ((a)*65536+(b)*256+(c))
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Put data into the proc fs file.
\par 
\par \hich\af0\dbch\af17\loch\f0    Arguments
\par \hich\af0\dbch\af17\loch\f0    =========
\par \hich\af0\dbch\af17\loch\f0    1. The buffer where the data is to be inserted, if 
\par \hich\af0\dbch\af17\loch\f0       you decide to use it.
\par \hich\af0\dbch\af17\loch\f0    2. A pointer to a pointer to characters. This is 
\par \hich\af0\dbch\af17\loch\f0       useful if you don't want to use the buffer 
\par \hich\af0\dbch\af17\loch\f0       allocated by the kernel.
\par \hich\af0\dbch\af17\loch\f0    3. The current position in the file. 
\par \hich\af0\dbch\af17\loch\f0    4. The size of the buffer in the first argument.  
\par \hich\af0\dbch\af17\loch\f0    5. Zero (for future use\hich\af0\dbch\af17\loch\f0 ?).
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0    Usage and Return Value
\par \hich\af0\dbch\af17\loch\f0    ======================
\par \hich\af0\dbch\af17\loch\f0    If you use your own buffer, like I do, put its 
\par \hich\af0\dbch\af17\loch\f0    location in the second argument and return the 
\par \hich\af0\dbch\af17\loch\f0    number of bytes used in the buffer.
\par 
\par \hich\af0\dbch\af17\loch\f0    A return value of zero means you have no further 
\par \hich\af0\dbch\af17\loch\f0    information at this time (end of file). A negative 
\par \hich\af0\dbch\af17\loch\f0    return value is an error condition.
\par \hich\af0\dbch\af17\loch\f0    
\par 
\par \hich\af0\dbch\af17\loch\f0    For More Information
\par \hich\af0\dbch\af17\loch\f0    ==================== 
\par \hich\af0\dbch\af17\loch\f0    The way I discovered what to do with this function 
\par \hich\af0\dbch\af17\loch\f0    wasn't by reading documentation, but by reading th\hich\af0\dbch\af17\loch\f0 e 
\par \hich\af0\dbch\af17\loch\f0    code which used it. I just looked to see what uses 
\par \hich\af0\dbch\af17\loch\f0    the get_info field of proc_dir_entry struct (I used a 
\par \hich\af0\dbch\af17\loch\f0    combination of find and grep, if you're interested), 
\par \hich\af0\dbch\af17\loch\f0    and I saw that  it is used in <kernel source 
\par \hich\af0\dbch\af17\loch\f0    directory>/fs/proc/array.c.
\par 
\par \hich\af0\dbch\af17\loch\f0   \hich\af0\dbch\af17\loch\f0  If something is unknown about the kernel, this is 
\par \hich\af0\dbch\af17\loch\f0    usually the way to go. In Linux we have the great 
\par \hich\af0\dbch\af17\loch\f0    advantage of having the kernel source code for 
\par \hich\af0\dbch\af17\loch\f0    free - use it.
\par \hich\af0\dbch\af17\loch\f0  */
\par \hich\af0\dbch\af17\loch\f0 int procfile_read(char *buffer, 
\par \tab \tab \hich\af0\dbch\af17\loch\f0   char **buffer_location, 
\par \tab \tab \hich\af0\dbch\af17\loch\f0   off_t offse\hich\af0\dbch\af17\loch\f0 t, 
\par \tab \tab \hich\af0\dbch\af17\loch\f0   int buffer_length, 
\par \tab \tab \hich\af0\dbch\af17\loch\f0   int zero)
\par \{
\par \hich\af0\dbch\af17\loch\f0   int len;  /* The number of bytes actually used */
\par 
\par \hich\af0\dbch\af17\loch\f0   /* This is static so it will still be in memory 
\par \hich\af0\dbch\af17\loch\f0    * when we leave this function */
\par \hich\af0\dbch\af17\loch\f0   static char my_buffer[80];  
\par 
\par \hich\af0\dbch\af17\loch\f0   static int count = 1;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* We give all of our information in one go, so if the 
\par \hich\af0\dbch\af17\loch\f0    * user asks us if we have more information the 
\par \hich\af0\dbch\af17\loch\f0    * answer should always be no. 
\par \hich\af0\dbch\af17\loch\f0    *
\par \hich\af0\dbch\af17\loch\f0    * This is important because the standard read 
\par \hich\af0\dbch\af17\loch\f0    * function from the library would continue to issue 
\par \hich\af0\dbch\af17\loch\f0   \hich\af0\dbch\af17\loch\f0  * the read system call until the kernel replies
\par \hich\af0\dbch\af17\loch\f0    * that it has no more information, or until its 
\par \hich\af0\dbch\af17\loch\f0    * buffer is filled.
\par \hich\af0\dbch\af17\loch\f0    */
\par \hich\af0\dbch\af17\loch\f0   if (offset > 0)
\par \hich\af0\dbch\af17\loch\f0     return 0;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Fill the buffer and get its length */
\par \hich\af0\dbch\af17\loch\f0   len = sprintf(my_buffer, 
\par \hich\af0\dbch\af17\loch\f0     "For the %d%s time\hich\af0\dbch\af17\loch\f0 , go away!\\n", count,
\par \hich\af0\dbch\af17\loch\f0     (count % 100 > 10 && count % 100 < 14) ? "th" : 
\par \hich\af0\dbch\af17\loch\f0       (count % 10 == 1) ? "st" :
\par \hich\af0\dbch\af17\loch\f0         (count % 10 == 2) ? "nd" :
\par \hich\af0\dbch\af17\loch\f0           (count % 10 == 3) ? "rd" : "th" );
\par \hich\af0\dbch\af17\loch\f0   count++;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Tell the function which called us where the 
\par \hich\af0\dbch\af17\loch\f0    * b\hich\af0\dbch\af17\loch\f0 uffer is */
\par \hich\af0\dbch\af17\loch\f0   *buffer_location = my_buffer;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Return the length */
\par \hich\af0\dbch\af17\loch\f0   return len;
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 struct proc_dir_entry Our_Proc_File = 
\par \hich\af0\dbch\af17\loch\f0   \{
\par \hich\af0\dbch\af17\loch\f0     0, /* Inode number - ignore, it will be filled by 
\par \hich\af0\dbch\af17\loch\f0         * proc_register[_dynamic] */
\par \hich\af0\dbch\af17\loch\f0     4, /* Length of the file name */
\par \hich\af0\dbch\af17\loch\f0     "test", /* The file name */
\par \hich\af0\dbch\af17\loch\f0     S_IFREG | S_IRUGO, /* File mode - this is a regular 
\par \hich\af0\dbch\af17\loch\f0                         * file which can be read by its 
\par \hich\af0\dbch\af17\loch\f0                         * owner, its group, and everybody
\par \hich\af0\dbch\af17\loch\f0                \hich\af0\dbch\af17\loch\f0          * else */
\par \hich\af0\dbch\af17\loch\f0     1,\tab /* Number of links (directories where the 
\par \hich\af0\dbch\af17\loch\f0          * file is referenced) */
\par \hich\af0\dbch\af17\loch\f0     0, 0,  /* The uid and gid for the file - we give it 
\par \hich\af0\dbch\af17\loch\f0             * to root */
\par \hich\af0\dbch\af17\loch\f0     80, /* The size of the file reported by ls. */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* functio\hich\af0\dbch\af17\loch\f0 ns which can be done on the inode 
\par \hich\af0\dbch\af17\loch\f0            * (linking, removing, etc.) - we don't 
\par \hich\af0\dbch\af17\loch\f0            * support any. */
\par \hich\af0\dbch\af17\loch\f0     procfile_read, /* The read function for this file, 
\par \hich\af0\dbch\af17\loch\f0                     * the function called when somebody 
\par \hich\af0\dbch\af17\loch\f0                     * tries \hich\af0\dbch\af17\loch\f0 to read something from it. */
\par \hich\af0\dbch\af17\loch\f0     NULL /* We could have here a function to fill the 
\par \hich\af0\dbch\af17\loch\f0           * file's inode, to enable us to play with 
\par \hich\af0\dbch\af17\loch\f0           * permissions, ownership, etc. */
\par \hich\af0\dbch\af17\loch\f0   \}; 
\par 
\par 
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Initialize the module - register the proc file */
\par \hich\af0\dbch\af17\loch\f0 int init_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* Success if proc_register[_dynamic] is a success, 
\par \hich\af0\dbch\af17\loch\f0    * failure otherwise. */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE > KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0   /* In version 2.2, proc_register assign a dynamic 
\par \hich\af0\dbch\af17\loch\f0    * inode number automatically if it is zero in the 
\par \hich\af0\dbch\af17\loch\f0    * structure , so there's no more need for 
\par \hich\af0\dbch\af17\loch\f0    * proc_register_dynamic
\par \hich\af0\dbch\af17\loch\f0    */
\par \hich\af0\dbch\af17\loch\f0   return proc_register(&proc_root, &Our_Proc_File);
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0   return proc_register_dynamic(&proc_root, &Our_Proc_File);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0   /* proc_root is the root directory for the proc 
\par \hich\af0\dbch\af17\loch\f0    * fs (/proc). This is where we want our file to be 
\par \hich\af0\dbch\af17\loch\f0    * located. 
\par \hich\af0\dbch\af17\loch\f0    */
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Cleanup - unregister our file from /proc */
\par \hich\af0\dbch\af17\loch\f0 void cleanup_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   proc_unregister(&proc_root, Our_Proc_File.low_ino);
\par \}
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard\plain \s1\qj \li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281301}
\hich\af0\dbch\af17\loch\f0 4}{\fs36 \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'ca\'b9\'d3\'c3}{\fs36 \hich\af0\dbch\af17\loch\f0 /proc}{\fs36 \loch\af0\hich\af0\dbch\f17 \'bd\'f8\loch\af0\hich\af0\dbch\f17 \'d0\'d0\'ca\'e4\'c8\'eb}{\fs36 
{\*\bkmkend _Toc491281301}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'cf\'d6\'d4\'da\'ce\'d2\'c3\'c7
\'d2\'d1\'be\'ad\'d3\'d0\'c1\'cb\'c1\'bd\'d6\'d6\'b7\'bd\'b7\'a8\'b4\'d3\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'d6\'d0\'b2\'fa\'c9\'fa\'ca\'e4\'b3\'f6\'a3\'ba\'d7\'a2\'b2\'e1\'d2\'bb\'b8\'f6\'c9\'e8\'b1\'b8\'c7\'fd\'b6\'af\'b2\'a2\'c7\'d2}{
\hich\af0\dbch\af17\loch\f0 mknod}{\loch\af0\hich\af0\dbch\f17 \'d2\'bb\'b8\'f6\'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe\'a3\'ac\'bb\'f2\'d5\'df\'b4\'b4\'bd\'a8\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 /proc}{\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe
\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'bf\'c9\'d2\'d4\'ca\'b9\'c4\'da\'ba\'cb\'b8\'e6\'cb\'df\'ce\'d2\'c3\'c7\'c8\'ce\'ba\'ce\'d0\'c5\'cf\'a2\'a1\'a3\'cf\'d6\'d4\'da\'b5\'c4\'ce\'ca\'cc\'e2\'ca\'c7\'ce\'d2\'c3\'c7\'c3\'bb\'d3\'d0\'b0\'ec\'b7\'a8
\'bb\'d8\'b4\'f0\'b8\'f8\'c4\'da\'ba\'cb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'c3\'c7\'cf\'f3\'c4\'da\'ba\'cb\'ca\'e4\'c8\'eb\'b5\'c4\'b5\'da\'d2\'bb\'d6\'d6\'b7\'bd\'b7\'a8\'ca\'c7\'d0\'b4\'b8\'f8}{\hich\af0\dbch\af17\loch\f0 /proc}{
\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d2\'f2\'ce\'aa}{\hich\af0\dbch\af17\loch\f0 proc}{\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'cf\'b5\'cd\'b3\'d6\'f7\'d2\'aa\'ca\'c7\'ce\'aa\'c2\'fa\'d7\'e3\'c4\'da\'ba\'cb\'cf\'f2\'bd\'f8\'b3\'cc\'b1\'a8\'b8\'e6\'c6\'e4
\'d7\'b4\'cc\'ac\'b5\'c4\'a3\'ac\'c3\'bb\'d3\'d0\'ce\'aa\'ca\'e4\'c8\'eb\'c1\'f4\'b3\'f6\'cc\'d8\'b1\'f0\'b5\'c4\'b9\'e6\'b6\'a8\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'ca\'fd\'be\'dd\'bd\'e1\'b9\'b9}{\hich\af0\dbch\af17\loch\f0 proc_dir_entry}{
\loch\af0\hich\af0\dbch\f17 \'c3\'bb\'d3\'d0\'b0\'fc\'ba\'ac\'d2\'bb\'b8\'f6\'d6\'b8\'cf\'f2\'c4\'b3\'b8\'f6\'ca\'e4\'c8\'eb\'ba\'af\'ca\'fd\'b5\'c4\'d6\'b8\'d5\'eb\'a3\'ac\'be\'cd\'cf\'f3\'d6\'b8\'cf\'f2\'ca\'e4\'b3\'f6\'ba\'af\'ca\'fd\'c4\'c7\'d1\'f9
\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'ce\'d2\'c3\'c7\'d2\'aa\'cf\'f2\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 /proc}{\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'d0\'b4\'c8\'eb\'a3\'ac\'ce\'d2\'c3\'c7\'d0\'e8\'d2\'aa\'ca\'b9\'d3\'c3
\'b1\'ea\'d7\'bc\'ce\'c4\'bc\'fe\'cf\'b5\'cd\'b3\'bb\'fa\'d6\'c6\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d4\'da}{\hich\af0\dbch\af17\loch\f0 Linux}{\loch\af0\hich\af0\dbch\f17 \'c0\'ef\'d3\'d0\'d2\'bb\'b8\'f6\'ce\'c4\'bc\'fe\'cf\'b5\'cd\'b3\'d7\'a2\'b2\'e1\'b5\'c4\'b1\'ea\'d7\'bc\'bb\'fa\'d6\'c6\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'c3\'bf\'b8\'f6\'ce\'c4\'bc\'fe\'cf\'b5\'cd\'b3\'b6\'bc\'d3\'d0\'d7\'d4\'bc\'ba\'b5\'c4\'ba\'af\'ca\'fd\'c0\'b4\'b4\'a6\'c0\'ed\'cb\'f7\'d2\'fd\'bd\'da\'b5\'e3\'ba\'cd\'ce\'c4\'bc\'fe\'b2\'d9\'d7\'f7\'a3\'ac\'cb\'f9\'d2\'d4
\'be\'cd\'d3\'d0\'d2\'bb\'b8\'f6\'cc\'d8\'ca\'e2\'b5\'c4\'bb\'fa\'b9\'b9\'c0\'b4\'b4\'e6\'b7\'c5\'d6\'b8\'cf\'f2\'cb\'f9\'d3\'d0\'ba\'af\'ca\'fd\'b5\'c4\'d6\'b8\'d5\'eb\'a3\'ac}{\hich\af0\dbch\af17\loch\f0 struct inode_operations}{
\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'cb\'fc\'d3\'d0\'d2\'bb\'b8\'f6\'d6\'b8\'cf\'f2}{\hich\af0\dbch\af17\loch\f0 struct file_operations}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'d6\'b8\'d5\'eb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da}{
\hich\af0\dbch\af17\loch\f0 /proc}{\loch\af0\hich\af0\dbch\f17 \'c0\'ef\'a3\'ac\'ce\'de\'c2\'db\'ba\'ce\'ca\'b1\'ce\'d2\'c3\'c7\'d7\'a2\'b2\'e1\'d2\'bb\'b8\'f6\'d0\'c2\'ce\'c4\'bc\'fe\'a3\'ac\'ce\'d2\'c3\'c7\'be\'cd\'b1\'bb\'d4\'ca\'d0\'ed\'d6\'b8\'b6\'a8
\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 inod_operations}{\loch\af0\hich\af0\dbch\f17 \'b7\'c3\'ce\'ca\'c4\'c4\'b8\'f6\'bd\'e1\'b9\'b9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'be\'cd\'ca\'c7\'ce\'d2\'c3\'c7\'d2\'aa\'d3\'c3\'b5\'c4\'bb\'fa\'d6\'c6\'a3\'ac
\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 inode_operations}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'b0\'fc\'c0\'a8\'d2\'bb\'b8\'f6\'d6\'b8\'cf\'f2}{\hich\af0\dbch\af17\loch\f0 file_operations}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'d6\'b8\'d5\'eb\'a3\'ac
}{\hich\af0\dbch\af17\loch\f0 file_operations}{\loch\af0\hich\af0\dbch\f17 \'c0\'ef\'b0\'fc\'ba\'ac\'ce\'d2\'c3\'c7\loch\af0\hich\af0\dbch\f17 \'b5\'c4}{\hich\af0\dbch\af17\loch\f0 module_input}{\loch\af0\hich\af0\dbch\f17 \'ba\'cd}{
\hich\af0\dbch\af17\loch\f0 module_output}{\loch\af0\hich\af0\dbch\f17 \'ba\'af\'ca\'fd\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'b1\'d8\'d0\'eb\'d6\'b8\'b3\'f6\'b1\'ea\'d7\'bc\'b5\'c4\'b6\'c1\'d0\'b4\'bd\'c7\'c9\'ab\'d4\'da\'c4\'da\'ba\'cb\'d6\'d0\'b1\'bb\'b5\'b9\'d6\'c3\'c1\'cb\'a3\'ac\'b6\'c1\'ba\'af\'ca\'fd\'d3\'c3\'c0\'b4\'ca\'e4\'b3\'f6\'a3\'ac
\'b6\'f8\'d0\'b4\'ba\'af\'ca\'fd\'d3\'c3\'c0\'b4\'ca\'e4\'c8\'eb\'a1\'a3\'d5\'e2\'ca\'c7\'d2\'f2\'ce\'aa\'b6\'c1\'ba\'cd\'d0\'b4\'ca\'c7\'d4\'da\'d3\'c3\'bb\'a7\'b5\'c4\'b9\'db\'b5\'e3\'bf\'b4\'a3\'ac\'c8\'e7\'b9\'fb\'d2\'bb\'b8\'f6\'bd\'f8\'b3\'cc
\'b4\'d3\'c4\'da\'ba\'cb\'d6\'d0\'b6\'c1\'c8\'a1\'d2\'bb\'d0\'a9\'c4\'da\'c8\'dd\'a3\'ac\'c4\'c7\'c3\'b4\'c4\'da\'ba\'cb\'be\'cd\'b1\'d8\'d0\'eb\'ca\'e4\'b3\'f6\'b4\'a6\'c0\'ed\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b6\'f8\'bd\'f8\'b3\'cc\'d2\'aa\'d0\'b4
\'c8\'eb\'c4\'da\'ba\'cb\'a3\'ac\'c4\'da\'ba\'cb\'be\'cd\'d2\'aa\'bd\'d3\'ca\'dc\'ca\'e4\'c8\'eb\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'c1\'ed\'d2\'bb\'b8\'f6\'d3\'d0\'c8\'a4\'b5\'c4\'b5\'d8\'b7\'bd\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 module_permission}{\loch\af0\hich\af0\dbch\f17 \'ba\'af\'ca\'fd\'a1\'a3\'d5\'e2\'b8\'f6\'ba\'af\'ca\'fd\'c3\'bf\'b5\'b1
\'bd\'f8\'b3\'cc\'ca\'d4\'cd\'bc\'b6\'d4}{\hich\af0\dbch\af17\loch\f0 /proc}{\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'bd\'f8\'d0\'d0\'b4\'a6\'c0\'ed\'ca\'b1\'b5\'f7\'d3\'c3\'a3\'ac\'cb\'fc\'bf\'c9\'d2\'d4\'be\'f6\'b6\'a8\'ca\'c7\'b7\'f1\'d4\'ca
\'d0\'ed\'b7\'c3\'ce\'ca\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c4\'bf\'c7\'b0\'d5\'e2\'b8\'f6\'ba\'af\'ca\'fd\'d6\'bb\'b6\'a8\'d2\'e5\'d4\'da\'b2\'d9\'d7\'f7\'ba\'cd\'b5\'b1\'c7\'b0\'ca\'b9\'d3\'c3\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 uid}{
\loch\af0\hich\af0\dbch\f17 \'a3\'a8\'b5\'b1\'c7\'b0\'bf\'c9\'d3\'c3\'b5\'c4\'ca\'c7\'d2\'bb\'b8\'f6\'d6\'b8\'d5\'eb\'d6\'b8\'cf\'f2\'d2\'bb\'b8\'f6\'b5\'b1\'c7\'b0\'d4\'cb\'d0\'d0\'bd\'f8\'b3\'cc\'b5\'c4\'d0\'c5\'cf\'a2\'b5\'c4\'bd\'e1\'b9\'b9\'a3\'a9
\'b5\'c4\'bb\'f9\'b4\'a1\'c9\'cf\'a3\'ac\'b5\'ab\'ca\'c7\'cb\'fc\loch\af0\hich\af0\dbch\f17 \'bf\'c9\'d2\'d4\'d4\'da\'ce\'d2\'c3\'c7\'cf\'a3\'cd\'fb\'b5\'c4\'c8\'ce\'ba\'ce\'ca\'c2\'ce\'ef\'b5\'c4\'bb\'f9\'b4\'a1\'c9\'cf\'b6\'a8\'d2\'e5\'a3\'ac\'b1\'c8
\'c8\'e7\'c6\'e4\'cb\'fb\'bd\'f8\'b3\'cc\'d5\'fd\'d4\'da\'b6\'d4\'ce\'c4\'bc\'fe\'d7\'f6\'b5\'c4\'b2\'d9\'d7\'f7\'a3\'ac\'c8\'d5\'c6\'da\'ca\'b1\'bc\'e4\'bb\'f2\'d5\'df\'bd\'d3\'ca\'d5\'b5\'bd\'b5\'c4\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6\'ca\'e4\'c8\'eb
\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'ca\'b9\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 put_usr}{\loch\af0\hich\af0\dbch\f17 \'ba\'cd}{\hich\af0\dbch\af17\loch\f0 get_user}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'d4\'ad\'d2\'f2\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 
Linux}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'c4\'da\'b4\'e6\'ca\'c7\'b7\'d6\'b6\'ce\'b5\'c4\loch\af0\hich\af0\dbch\f17 \'a3\'a8\loch\af0\hich\af0\dbch\f17 \'d4\'da}{\hich\af0\dbch\af17\loch\f0 Intel}{\loch\af0\hich\af0\dbch\f17 \'bd\'e1\'b9\'b9\'cf\'c2
\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'c6\'e4\'cb\'fb\'cf\'b5\'c1\'d0\'b5\'c4\'b4\'a6\'c0\'ed\'c6\'f7\'cf\'c2\'bf\'c9\'c4\'dc\'b2\'bb\'cd\'ac\loch\af0\hich\af0\dbch\f17 \'a3\'a9\loch\af0\hich\af0\dbch\f17 \'a1\'a3\'d5\'e2
\'d2\'e2\'ce\'b6\'d7\'c5\'d2\'bb\'b8\'f6\'d6\'b8\'d5\'eb\'b1\'be\'c9\'ed\'b2\'bb\'b4\'fa\'b1\'ed\'c4\'da\'b4\'e6\'d6\'d0\'b5\'c4\'d2\'bb\'b8\'f6\'ce\'a8\'d2\'bb\'b5\'d8\'d6\'b7\'a3\'ac\'b6\'f8\'ca\'c7\'b6\'ce\'d6\'d0\'b5\'c4\'d2\'bb\'b8\'f6\'b5\'d8
\'d6\'b7\'a3\'ac\'cb\'f9\'d2\'d4\'c4\'e3\'bb\'b9\'d0\'e8\'d2\'aa\'d6\'aa\'b5\'c0\'c4\'c4\'d2\'bb\'b8\'f6\'b6\'ce\'bf\'c9\'d2\'d4\'ca\'b9\'d3\'c3\'cb\'fc\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c4\'da\'ba\'cb\'d5\'bc\'d3\'d0\'d2\'bb\'b8\'f6\'b6\'ce\'a3\'ac
\'c3\'bf\'b8\'f6\'bd\'f8\'b3\'cc\'b6\'bc\'b8\'f7\'d5\'bc\'d3\'d0\'d2\'bb\'b8\'f6\'b6\'ce\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d2\'bb\'b8\'f6\'bd\'f8\'b3\'cc\'bf\'c9\'d2\'d4\'b7\'c3\'ce\'ca\'b5\'c4\'ce\'a8\'d2\'bb\'b5\'c4\'b6\'ce\'be\'cd\'ca\'c7\'cb\'fc\'d7\'d4\'bc\'ba\'d3\'b5\'d3\'d0\'b5\'c4\'c4\'c7\'b8\'f6\'a3\'ac\'cb\'f9\'d2\'d4\'b5\'b1\'c4\'e3
\'d0\'b4\'d7\'f7\'ce\'aa\'bd\'f8\'b3\'cc\'d4\'cb\'d0\'d0\'b5\'c4\'b3\'cc\'d0\'f2\'ca\'b1\'bf\'c9\'d2\'d4\'b2\'bb\'d3\'c3\'b9\'d8\'d0\'c4\'b6\'ce\'b5\'c4\'ce\'ca\'cc\'e2\'a1\'a3\'c8\'e7\'b9\'fb\'c4\'e3\'d2\'aa\'d0\'b4\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9
\'a3\'ac\'d2\'bb\'b0\'e3\'c4\'e3\'cf\'a3\'cd\'fb\'b7\'c3\'ce\'ca\'c4\'da\'ba\'cb\'b5\'c4\loch\af0\hich\af0\dbch\f17 \'b6\'ce\'a3\'ac\'d5\'e2\'d3\'c9\'cf\'b5\'cd\'b3\'d7\'d4\'b6\'af\'b4\'a6\'c0\'ed\'a1\'a3\'c8\'bb\'b6\'f8\'a3\'ac\'c8\'e7\'b9\'fb\'c4\'da
\'b4\'e6\'bb\'ba\'b3\'e5\'c7\'f8\'b5\'c4\'c4\'da\'c8\'dd\'d0\'e8\'d2\'aa\'d4\'da\'b5\'b1\'c7\'b0\'d4\'cb\'d0\'d0\'b5\'c4\'bd\'f8\'b3\'cc\'ba\'cd\'c4\'da\'ba\'cb\'d6\'ae\'bc\'e4\'b4\'ab\'b5\'dd\'ca\'b1\'a3\'ac\'c4\'da\'ba\'cb\'ba\'af\'ca\'fd\'bb\'e1
\'bd\'d3\'b5\'bd\'d4\'da\'b4\'cb\'bd\'f8\'b3\'cc\'b6\'ce\'c0\'ef\'b5\'c4\'d6\'b8\'cf\'f2\'c4\'da\'b4\'e6\'bb\'ba\'b3\'e5\'c7\'f8\'b5\'c4\'d2\'bb\'b8\'f6\'d6\'b8\'d5\'eb\'a1\'a3}{\hich\af0\dbch\af17\loch\f0 Put_user}{\loch\af0\hich\af0\dbch\f17 \'ba\'cd}{
\hich\af0\dbch\af17\loch\f0 get_user}{\loch\af0\hich\af0\dbch\f17 \'d4\'ca\'d0\'ed\'c4\'e3\'b7\'c3\'ce\'ca\'c4\'c7\'bf\'e9\'c4\'da\'b4\'e6\'a1\'a3}{
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\hich\af0\dbch\af17\loch\f0 ex }{\fs27 \hich\af0\dbch\af17\loch\f0 procfs.c}{\hich\af0\dbch\af17\loch\f0  \~\~ }{\kerning0 
\par }{\hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0 /* procfs.c -  create a "file" in /proc, which allows 
\par \hich\af0\dbch\af17\loch\f0  \hich\af0\dbch\af17\loch\f0 * both input and output. */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Copyright (C) 1998-1999 by Ori Pomerantz */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The\hich\af0\dbch\af17\loch\f0  necessary header files */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Standard in kernel modules */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/kernel.h>   /* We're doing kernel work */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/module.h>   /* Specifically, a module */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Deal with CONFIG_MODVERSIONS */
\par \hich\af0\dbch\af17\loch\f0 #if CONFIG_MODVERSIONS==1
\par \hich\af0\dbch\af17\loch\f0 #define MODVERSION\hich\af0\dbch\af17\loch\f0 S
\par \hich\af0\dbch\af17\loch\f0 #include <linux/modversions.h>
\par \hich\af0\dbch\af17\loch\f0 #endif        
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Necessary because we use proc fs */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/proc_fs.h>
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* In 2.2.3 /usr/include/linux/version.h includes a 
\par \hich\af0\dbch\af17\loch\f0  * macro for this, but 2.0.35 doesn't - so I add it 
\par \hich\af0\dbch\af17\loch\f0  * here if necessary. */
\par \hich\af0\dbch\af17\loch\f0 #ifndef KERNEL_VERSION
\par \hich\af0\dbch\af17\loch\f0 #define KERNEL_VERSION(a,b,c) ((a)*65536+(b)*256+(c))
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 #include <asm/uaccess.h>  /* for get_user and put_user */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The module's file functions ********************** *\hich\af0\dbch\af17\loch\f0 /
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Here we keep the last message received, to prove 
\par \hich\af0\dbch\af17\loch\f0  * that we can process our input */
\par \hich\af0\dbch\af17\loch\f0 #define MESSAGE_LENGTH 80
\par \hich\af0\dbch\af17\loch\f0 static char Message[MESSAGE_LENGTH];
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Since we use the file operations struct, we can't 
\par \hich\af0\dbch\af17\loch\f0  * use the special proc output provisions - we have to 
\par \hich\af0\dbch\af17\loch\f0  * use a standard read function, which is this function */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 static ssize_t module_output(
\par \hich\af0\dbch\af17\loch\f0     struct file *file,   /* The file read */
\par \hich\af0\dbch\af17\loch\f0     char *buf, /* \hich\af0\dbch\af17\loch\f0 The buffer to put data to (in the
\par \hich\af0\dbch\af17\loch\f0                 * user segment) */
\par \hich\af0\dbch\af17\loch\f0     size_t len,  /* The length of the buffer */
\par \hich\af0\dbch\af17\loch\f0     loff_t *offset) /* Offset in the file - ignore */
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0 static int module_output(
\par \hich\af0\dbch\af17\loch\f0     struct inode *inode, /* The inode read */
\par \hich\af0\dbch\af17\loch\f0     str\hich\af0\dbch\af17\loch\f0 uct file *file,   /* The file read */
\par \hich\af0\dbch\af17\loch\f0     char *buf, /* The buffer to put data to (in the
\par \hich\af0\dbch\af17\loch\f0                 * user segment) */
\par \hich\af0\dbch\af17\loch\f0     int len)  /* The length of the buffer */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \{
\par \hich\af0\dbch\af17\loch\f0   static int finished = 0;
\par \hich\af0\dbch\af17\loch\f0   int i;
\par \hich\af0\dbch\af17\loch\f0   char message[MESSAGE_LENGTH+30];
\par 
\par \hich\af0\dbch\af17\loch\f0   /* \hich\af0\dbch\af17\loch\f0 We return 0 to indicate end of file, that we have 
\par \hich\af0\dbch\af17\loch\f0    * no more information. Otherwise, processes will 
\par \hich\af0\dbch\af17\loch\f0    * continue to read from us in an endless loop. */
\par \hich\af0\dbch\af17\loch\f0   if (finished) \{
\par \hich\af0\dbch\af17\loch\f0     finished = 0;
\par \hich\af0\dbch\af17\loch\f0     return 0;
\par \hich\af0\dbch\af17\loch\f0   \}
\par 
\par \hich\af0\dbch\af17\loch\f0   /* We use put_user to co\hich\af0\dbch\af17\loch\f0 py the string from the kernel's 
\par \hich\af0\dbch\af17\loch\f0    * memory segment to the memory segment of the process 
\par \hich\af0\dbch\af17\loch\f0    * that called us. get_user, BTW, is
\par \hich\af0\dbch\af17\loch\f0    * used for the reverse. */
\par \hich\af0\dbch\af17\loch\f0   sprintf(message, "Last input:%s", Message);
\par \hich\af0\dbch\af17\loch\f0   for(i=0; i<len && message[i]; i++) 
\par \hich\af0\dbch\af17\loch\f0     put_user\hich\af0\dbch\af17\loch\f0 (message[i], buf+i);
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Notice, we assume here that the size of the message 
\par \hich\af0\dbch\af17\loch\f0    * is below len, or it will be received cut. In a real 
\par \hich\af0\dbch\af17\loch\f0    * life situation, if the size of the message is less 
\par \hich\af0\dbch\af17\loch\f0    * than len then we'd return len and on the second call 
\par \hich\af0\dbch\af17\loch\f0  \hich\af0\dbch\af17\loch\f0   * start filling the buffer with the len+1'th byte of 
\par \hich\af0\dbch\af17\loch\f0    * the message. */
\par \hich\af0\dbch\af17\loch\f0   finished = 1; 
\par 
\par \hich\af0\dbch\af17\loch\f0   return i;  /* Return the number of bytes "read" */
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This function receives input from the user when the 
\par \hich\af0\dbch\af17\loch\f0  * user writes to the /proc file. */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_V\hich\af0\dbch\af17\loch\f0 ERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 static ssize_t module_input(
\par \hich\af0\dbch\af17\loch\f0     struct file *file,   /* The file itself */
\par \hich\af0\dbch\af17\loch\f0     const char *buf,     /* The buffer with input */
\par \hich\af0\dbch\af17\loch\f0     size_t length,       /* The buffer's length */
\par \hich\af0\dbch\af17\loch\f0     loff_t *offset)      /* offset to file - ignore */
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0 static int module_input(
\par \hich\af0\dbch\af17\loch\f0     struct inode *inode, /* The file's inode */
\par \hich\af0\dbch\af17\loch\f0     struct file *file,   /* The file itself */
\par \hich\af0\dbch\af17\loch\f0     const char *buf,     /* The buffer with the input */
\par \hich\af0\dbch\af17\loch\f0     int length)   \hich\af0\dbch\af17\loch\f0        /* The buffer's length */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \{
\par \hich\af0\dbch\af17\loch\f0   int i;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Put the input into Message, where module_output 
\par \hich\af0\dbch\af17\loch\f0    * will later be able to use it */
\par \hich\af0\dbch\af17\loch\f0   for(i=0; i<MESSAGE_LENGTH-1 && i<length; i++)
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0     get_user(Mess\hich\af0\dbch\af17\loch\f0 age[i], buf+i);
\par \hich\af0\dbch\af17\loch\f0   /* In version 2.2 the semantics of get_user changed, 
\par \hich\af0\dbch\af17\loch\f0    * it not longer returns a character, but expects a 
\par \hich\af0\dbch\af17\loch\f0    * variable to fill up as its first argument and a 
\par \hich\af0\dbch\af17\loch\f0    * user segment pointer to fill it from as the its 
\par \hich\af0\dbch\af17\loch\f0    * second.
\par \hich\af0\dbch\af17\loch\f0    *
\par \hich\af0\dbch\af17\loch\f0    \hich\af0\dbch\af17\loch\f0 * The reason for this change is that the version 2.2 
\par \hich\af0\dbch\af17\loch\f0    * get_user can also read an short or an int. The way 
\par \hich\af0\dbch\af17\loch\f0    * it knows the type of the variable it should read 
\par \hich\af0\dbch\af17\loch\f0    * is by using sizeof, and for that it needs the 
\par \hich\af0\dbch\af17\loch\f0    * variable itself.
\par \hich\af0\dbch\af17\loch\f0    */ 
\par \hich\af0\dbch\af17\loch\f0 #else 
\par \hich\af0\dbch\af17\loch\f0     Message[i] = get_user(buf+i);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \hich\af0\dbch\af17\loch\f0   Message[i] = '\\0';  /* we want a standard, zero 
\par \hich\af0\dbch\af17\loch\f0                        * terminated string */
\par \hich\af0\dbch\af17\loch\f0   
\par \hich\af0\dbch\af17\loch\f0   /* We need to return the number of input characters 
\par \hich\af0\dbch\af17\loch\f0    * used */
\par \hich\af0\dbch\af17\loch\f0   return i;
\par \}
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This function decides wheth\hich\af0\dbch\af17\loch\f0 er to allow an operation 
\par \hich\af0\dbch\af17\loch\f0  * (return zero) or not allow it (return a non-zero 
\par \hich\af0\dbch\af17\loch\f0  * which indicates why it is not allowed).
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * The operation can be one of the following values:
\par \hich\af0\dbch\af17\loch\f0  * 0 - Execute (run the "file" - meaningless in our case)
\par \hich\af0\dbch\af17\loch\f0  * 2 - Write (input \hich\af0\dbch\af17\loch\f0 to the kernel module)
\par \hich\af0\dbch\af17\loch\f0  * 4 - Read (output from the kernel module)
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * This is the real function that checks file 
\par \hich\af0\dbch\af17\loch\f0  * permissions. The permissions returned by ls -l are 
\par \hich\af0\dbch\af17\loch\f0  * for referece only, and can be overridden here. 
\par \hich\af0\dbch\af17\loch\f0  */
\par \hich\af0\dbch\af17\loch\f0 static int module_permission(s\hich\af0\dbch\af17\loch\f0 truct inode *inode, int op)
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* We allow everybody to read from our module, but 
\par \hich\af0\dbch\af17\loch\f0    * only root (uid 0) may write to it */ 
\par \hich\af0\dbch\af17\loch\f0   if (op == 4 || (op == 2 && current->euid == 0))
\par \hich\af0\dbch\af17\loch\f0     return 0; 
\par 
\par \hich\af0\dbch\af17\loch\f0   /* If it's anything else, access is denied */
\par \hich\af0\dbch\af17\loch\f0   return -EACCES;
\par \}
\par 
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The file is opened - we don't really care about 
\par \hich\af0\dbch\af17\loch\f0  * that, but it does mean we need to increment the 
\par \hich\af0\dbch\af17\loch\f0  * module's reference count. */
\par \hich\af0\dbch\af17\loch\f0 int module_open(struct inode *inode, struct file *file)
\par \{
\par \hich\af0\dbch\af17\loch\f0   MOD_INC_USE_COUNT;
\par \hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0   return 0;
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The file is closed - again, interesting only because 
\par \hich\af0\dbch\af17\loch\f0  * of the reference count. */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 int module_close(struct inode *inode, struct file *file)
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0 void module_close(struct inode *inode, struct file *file)
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \{
\par \hich\af0\dbch\af17\loch\f0   MOD_DEC_USE_COUNT;
\par 
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0   return 0;  /* success */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Structures to register as the /proc file, with 
\par \hich\af0\dbch\af17\loch\f0  * pointers to all the relevant functions. ********** */
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* File operations for our proc file. This is where we 
\par \hich\af0\dbch\af17\loch\f0  * place pointers to all the functions called when 
\par \hich\af0\dbch\af17\loch\f0  * somebody tries to do something to our file. NULL 
\par \hich\af0\dbch\af17\loch\f0  * means we don't want to deal with something. */
\par \hich\af0\dbch\af17\loch\f0 static struct file_operations File_Ops_4_Our_\hich\af0\dbch\af17\loch\f0 Proc_File =
\par \hich\af0\dbch\af17\loch\f0   \{
\par \hich\af0\dbch\af17\loch\f0     NULL,  /* lseek */
\par \hich\af0\dbch\af17\loch\f0     module_output,  /* "read" from the file */
\par \hich\af0\dbch\af17\loch\f0     module_input,   /* "write" to the file */
\par \hich\af0\dbch\af17\loch\f0     NULL,  /* readdir */
\par \hich\af0\dbch\af17\loch\f0     NULL,  /* select */
\par \hich\af0\dbch\af17\loch\f0     NULL,  /* ioctl */
\par \hich\af0\dbch\af17\loch\f0     NULL,  /* mmap */
\par \hich\af0\dbch\af17\loch\f0     module_open,    /* Somebod\hich\af0\dbch\af17\loch\f0 y opened the file */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0     NULL,   /* flush, added here in version 2.2 */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \hich\af0\dbch\af17\loch\f0     module_close,    /* Somebody closed the file */
\par \hich\af0\dbch\af17\loch\f0     /* etc. etc. etc. (they are all given in 
\par \hich\af0\dbch\af17\loch\f0      * /usr/include/linux/fs.h). Since we don't put 
\par \hich\af0\dbch\af17\loch\f0      * anything here, the system will keep the default
\par \hich\af0\dbch\af17\loch\f0      * data, which in Unix is zeros (NULLs when taken as 
\par \hich\af0\dbch\af17\loch\f0      * pointers). */
\par \hich\af0\dbch\af17\loch\f0   \};
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Inode operations for our proc file. We need it so 
\par \hich\af0\dbch\af17\loch\f0  * we'l\hich\af0\dbch\af17\loch\f0 l have some place to specify the file operations 
\par \hich\af0\dbch\af17\loch\f0  * structure we want to use, and the function we use for 
\par \hich\af0\dbch\af17\loch\f0  * permissions. It's also possible to specify functions 
\par \hich\af0\dbch\af17\loch\f0  * to be called for anything else which could be done to 
\par \hich\af0\dbch\af17\loch\f0  * an inode (although we don't bo\hich\af0\dbch\af17\loch\f0 ther, we just put 
\par \hich\af0\dbch\af17\loch\f0  * NULL). */
\par \hich\af0\dbch\af17\loch\f0 static struct inode_operations Inode_Ops_4_Our_Proc_File =
\par \hich\af0\dbch\af17\loch\f0   \{
\par \hich\af0\dbch\af17\loch\f0     &File_Ops_4_Our_Proc_File,
\par \hich\af0\dbch\af17\loch\f0     NULL, /* create */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* lookup */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* link */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* unlink */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* symlink */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* mkd\hich\af0\dbch\af17\loch\f0 ir */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* rmdir */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* mknod */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* rename */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* readlink */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* follow_link */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* readpage */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* writepage */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* bmap */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* truncate */
\par \hich\af0\dbch\af17\loch\f0     module_permission /* check for permissions */
\par \hich\af0\dbch\af17\loch\f0   \};
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Directory entry */
\par \hich\af0\dbch\af17\loch\f0 static struct proc_dir_entry Our_Proc_File = 
\par \hich\af0\dbch\af17\loch\f0   \{
\par \hich\af0\dbch\af17\loch\f0     0, /* Inode number - ignore, it will be filled by 
\par \hich\af0\dbch\af17\loch\f0         * proc_register[_dynamic] */
\par \hich\af0\dbch\af17\loch\f0     7, /* Length of the file name *\hich\af0\dbch\af17\loch\f0 /
\par \hich\af0\dbch\af17\loch\f0     "rw_test", /* The file name */
\par \hich\af0\dbch\af17\loch\f0     S_IFREG | S_IRUGO | S_IWUSR, 
\par \hich\af0\dbch\af17\loch\f0     /* File mode - this is a regular file which 
\par \hich\af0\dbch\af17\loch\f0      * can be read by its owner, its group, and everybody
\par \hich\af0\dbch\af17\loch\f0      * else. Also, its owner can write to it.
\par \hich\af0\dbch\af17\loch\f0      *
\par \hich\af0\dbch\af17\loch\f0      * Actually, this fie\hich\af0\dbch\af17\loch\f0 ld is just for reference, it's
\par \hich\af0\dbch\af17\loch\f0      * module_permission that does the actual check. It 
\par \hich\af0\dbch\af17\loch\f0      * could use this field, but in our implementation it
\par \hich\af0\dbch\af17\loch\f0      * doesn't, for simplicity. */
\par \hich\af0\dbch\af17\loch\f0     1,  /* Number of links (directories where the 
\par \hich\af0\dbch\af17\loch\f0          * file is referenced) */
\par \hich\af0\dbch\af17\loch\f0     0, 0,  /* The uid and gid for the file - 
\par \hich\af0\dbch\af17\loch\f0             * we give it to root */
\par \hich\af0\dbch\af17\loch\f0     80, /* The size of the file reported by ls. */
\par \hich\af0\dbch\af17\loch\f0     &Inode_Ops_4_Our_Proc_File, 
\par \hich\af0\dbch\af17\loch\f0     /* A pointer to the inode structure for
\par \hich\af0\dbch\af17\loch\f0      * the f\hich\af0\dbch\af17\loch\f0 ile, if we need it. In our case we
\par \hich\af0\dbch\af17\loch\f0      * do, because we need a write function. */
\par \hich\af0\dbch\af17\loch\f0     NULL  
\par \hich\af0\dbch\af17\loch\f0     /* The read function for the file. Irrelevant, 
\par \hich\af0\dbch\af17\loch\f0      * because we put it in the inode structure above */
\par \hich\af0\dbch\af17\loch\f0   \}; 
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Module initialization and cleanup *******\hich\af0\dbch\af17\loch\f0 ************ */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Initialize the module - register the proc file */
\par \hich\af0\dbch\af17\loch\f0 int init_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* Success if proc_register[_dynamic] is a success, 
\par \hich\af0\dbch\af17\loch\f0    * failure otherwise */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0   /* In version 2.2, proc_register as\hich\af0\dbch\af17\loch\f0 sign a dynamic 
\par \hich\af0\dbch\af17\loch\f0    * inode number automatically if it is zero in the 
\par \hich\af0\dbch\af17\loch\f0    * structure , so there's no more need for 
\par \hich\af0\dbch\af17\loch\f0    * proc_register_dynamic
\par \hich\af0\dbch\af17\loch\f0    */
\par \hich\af0\dbch\af17\loch\f0   return proc_register(&proc_root, &Our_Proc_File);
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0   return proc_register_dynamic(&proc_r\hich\af0\dbch\af17\loch\f0 oot, &Our_Proc_File);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Cleanup - unregister our file from /proc */
\par \hich\af0\dbch\af17\loch\f0 void cleanup_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   proc_unregister(&proc_root, Our_Proc_File.low_ino);
\par \}
\par }\pard \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {
\par 
\par 
\par }\pard\plain \s1\qj \li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281302}
\hich\af0\dbch\af17\loch\f0 5}{\fs36 \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'ba\'cd\'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe\'b6\'d4\'bb\'b0\'a3\'a8\'d0\'b4\'ba\'cd}{\fs36 \hich\af0\dbch\af17\loch\f0 IOCTLS}{\fs36 \loch\af0\hich\af0\dbch\f17 \'a3\'a9}{\fs36 
{\*\bkmkend _Toc491281302}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe
\'ca\'c7\'d3\'c3\'c0\'b4\'b4\'fa\'b1\'ed\'ce\'ef\'c0\'ed\'c9\'e8\'b1\'b8\'b5\'c4\'a1\'a3\'b6\'e0\'ca\'fd\'ce\'ef\'c0\'ed\'c9\'e8\'b1\'b8\'ca\'c7\'d3\'c3\'c0\'b4\'bd\'f8\'d0\'d0\'ca\'e4\'b3\'f6\'bb\'f2\'ca\'e4\'c8\'eb\'b5\'c4\'a3\'ac\'cb\'f9\'d2\'d4
\'b1\'d8\'d0\'eb\'d3\'c9\'c4\'b3\'d6\'d6\'bb\'fa\'d6\'c6\'ca\'b9\'b5\'c3\'c4\'da\'ba\'cb\'d6\'d0\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'c9\'e8\'b1\'b8\'c7\'fd\'b6\'af\'b4\'d3\'bd\'f8\'b3\'cc\'d6\'d0\'b5\'c3\'b5\'bd\'ca\'e4\'b3\'f6\'cb\'cd\'b8\'f8\'c9\'e8
\'b1\'b8\'a1\'a3\'d5\'e2\'bf\'c9\'d2\'d4\'cd\'a8\'b9\'fd\'b4\'f2\'bf\'aa\'ca\'e4\'b3\'f6\'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe\'b2\'a2\'c7\'d2\'d0\'b4\'c8\'eb\'d7\'f6\'b5\'bd\'a3\'ac\'be\'cd\'cf\'eb\'d0\'b4\'c8\'eb\'d2\'bb\'b8\'f6\'c6\'d5\'cd\'a8\'ce\'c4
\'bc\'fe\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da\'cf\'c2\'c3\'e6\'b5\'c4\'c0\'fd\'d7\'d3\'c0\'ef\'a3\'ac\'d5\'e2\'d3\'c9}{\hich\af0\dbch\af17\loch\f0 device_write}{\loch\af0\hich\af0\dbch\f17 \'ca\'b5\'cf\'d6\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b2\'bb\'ca\'c7\'d7\'dc\'c4\'dc\'d7\'e0\'d0\'a7\'b5\'c4\'a1\'a3\'c9\'e8\'cf\'eb\'c4\'e3\'d3\'eb\'d2\'bb\'b8\'f6\'c1\'ac\'cf\'f2}{\hich\af0\dbch\af17\loch\f0 modem}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'b4\'ae\'bf\'da
\'a3\'a8\'bc\'bc\'ca\'c7\'c4\'e3\'d3\'d0\'d2\'bb\'b8\'f6\'c4\'da\'c3\'a8\'a3\'ac\'b4\'d3}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'bf\'b4\'c0\'b4\'cb\'fc\'d2\'b2\'ca\'c7\'d7\'f7\'ce\'aa\'d2\'bb\'b8\'f6\'b4\'ae\'bf\'da\'ca\'b5\'cf\'d6
\'a3\'ac\'cb\'f9\'d2\'d4\'c4\'e3\'b2\'bb\'d0\'e8\'d2\'aa\'c8\'cf\'ce\'aa\'d5\'e2\'b8\'f6\'c9\'e8\'cf\'eb\'cc\'ab\'c0\'a7\'c4\'d1\'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d7\'ee\'d7\'d4\'c8\'bb\'d2\'aa\'d7\'f6\'b5\'c4\'ca\'c2\'c7\'e9\'be\'cd\'ca\'c7
\'ca\'b9\'d3\'c3\'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe\'b0\'d1\'c4\'da\'c8\'dd\'d0\'b4\'b5\'bd}{\hich\af0\dbch\af17\loch\f0 modem}{\loch\af0\hich\af0\dbch\f17 \'c9\'cf\'a3\'a8\'ce\'de\'c2\'db\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 modem}{
\loch\af0\hich\af0\dbch\f17 \'c3\'fc\'c1\'ee\'bb\'b9\'ca\'c7\'b5\'e7\'bb\'b0\'cf\'df\'a3\'a9\'bb\'f2\'d5\'df\'b4\'d3}{\hich\af0\dbch\af17\loch\f0 modem}{\loch\af0\hich\af0\dbch\f17 \'b6\'c1\'d0\'c5\'cf\'a2\'a3\'a8\'cd\'ac\'d1\'f9\'bf\'c9\'d2\'d4\'b4\'d3}{
\hich\af0\dbch\af17\loch\f0 modem}{\loch\af0\hich\af0\dbch\f17 \'c3\'fc\'c1\'ee\'bb\'d8\'b4\'f0\'bb\'f2\'d5\'df\'cd\'a8\'b9\'fd\'b5\'e7\'bb\'b0\'cf\'df\'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b5\'ab\'ca\'c7\'d5\'e2\'c1\'f4\'cf\'c2\'b5\'c4\'ce\'ca
\'cc\'e2\'ca\'c7\'b5\'b1\'c4\'e3\'d0\'e8\'d2\'aa\'ba\'cd\'b4\'ae\'bf\'da\'b1\'be\'c9\'ed\'b6\'d4\'bb\'b0\'b5\'c4\'ca\'b1\'ba\'f2\'d0\'e8\'d2\'aa\'d4\'f5\'d1\'f9\'d7\'f6\'a3\'bf\'b1\'c8\'c8\'e7\'b7\'a2\loch\af0\hich\af0\dbch\f17 \'cb\'cd\'ca\'fd\'be\'dd
\'b7\'a2\'cb\'cd\'ba\'cd\'bd\'d3\'ca\'d5\'b5\'c4\'cb\'d9\'c2\'ca\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'bb\'d8\'b4\'f0\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 Unix}{\loch\af0\hich\af0\dbch\f17 \'ca\'b9\'d3\'c3\'d2\'bb\'b8\'f6\'bd\'d0\'d7\'f6}{\hich\af0\dbch\af17\loch\f0 ioctl(input output control}{\loch\af0\hich\af0\dbch\f17 
\'b5\'c4\'bc\'f2\'d0\'b4}{\hich\af0\dbch\af17\loch\f0 )}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'cc\'d8\'ca\'e2\'ba\'af\'ca\'fd\'a1\'a3\'c3\'bf\'b8\'f6\'c9\'e8\'b1\'b8\'b6\'bc\'d3\'d0\'d7\'d4\'bc\'ba\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 ioctl}{
\loch\af0\hich\af0\dbch\f17 \'c3\'fc\'c1\'ee\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'c3\'fc\'c1\'ee\'bf\'c9\'d2\'d4\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 ioctl}{\loch\af0\hich\af0\dbch\f17 \'b6\'c1\'b5\'c4
\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'d2\'b2\'bf\'c9\'d2\'d4\'ca\'c7\'d0\'b4\'b5\'c4\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'d2\'b2\'bf\'c9\'d2\'d4\'ca\'c7\'c1\'bd\'d5\'df\'b6\'bc\'ca\'c7\'bb\'f2
\'b6\'bc\'b2\'bb\'ca\'c7\'a1\'a3}{\hich\af0\dbch\af17\loch\f0 Ioctl}{\loch\af0\hich\af0\dbch\f17 \'ba\'af\'ca\'fd\'d3\'c9\'c8\'fd\'b8\'f6\'b2\'ce\'ca\'fd\'b5\'f7\'d3\'c3\'a3\'ba\'ca\'ca\'b5\'b1\'c9\'e8\'b1\'b8\'b5\'c4\'c3\'e8\'ca\'f6\'d7\'d3\'a3\'ac}{
\hich\af0\dbch\af17\loch\f0 ioctl}{\loch\af0\hich\af0\dbch\f17 \'ca\'fd\'a3\'ac\'ba\'cd\'d2\'bb\'b8\'f6\'b3\'a4\'d5\'fb\'d0\'cd\'b2\'ce\'ca\'fd\'a3\'ac\'bf\'c9\'d2\'d4\'b8\'b3\'d3\'e8\'d2\'bb\'b8\'f6\'bd\'c7\'c9\'ab\'d3\'c3\'c0\'b4\'b4\'ab\'b5\'dd\'c8\'ce
\'ba\'ce\'b6\'ab\'ce\'f7\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 Ioctl}{\loch\af0\hich\af0\dbch\f17 \'ca\'fd\'b6\'d4\'c9\'e8\'b1\'b8\'d6\'f7\'c2\'eb\'a1\'a2}{\hich\af0\dbch\af17\loch\f0 ioctl}{\loch\af0\hich\af0\dbch\f17 \'c0\'e0\'d0\'cd\'a1\'a2\'b1\'e0\'c2\'eb\'a1\'a2\'ba\'cd\'b2\'ce
\'ca\'fd\'b5\'c4\'c0\'e0\'d0\'cd\'bd\'f8\'d0\'d0\'b1\'e0\'c2\'eb\'a1\'a3}{\hich\af0\dbch\af17\loch\f0 Ioctl}{\loch\af0\hich\af0\dbch\f17 \'ca\'fd\'cd\'a8\'b3\'a3\'d4\'da\'cd\'b7\'ce\'c4\'bc\'fe\'d3\'c9\'d2\'bb\'b8\'f6\'ba\'ea\'b5\'f7\'d3\'c3\'a3\'a8}{
\hich\af0\dbch\af17\loch\f0 _IO}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac}{\hich\af0\dbch\af17\loch\f0 _IOR}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac}{\hich\af0\dbch\af17\loch\f0 _IOW}{\loch\af0\hich\af0\dbch\f17 \'bb\'f2}{\hich\af0\dbch\af17\loch\f0 _IOWR
\hich\f0 \emdash \emdash }{\loch\af0\hich\af0\dbch\f17 \'be\'f6\'b6\'a8\'d3\'da\'c0\'e0\'d0\'cd\'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'cd\'b7\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'b1\'d8\'d0\'eb\'b0\'fc\'ba\'ac\'d4\'da\'ca\'b9
\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 ioctl}{\loch\af0\hich\af0\dbch\f17 \'a3\'a8\'cb\'f9\'d2\'d4\'cb\'fc\'c3\'c7\'bf\'c9\'d2\'d4\'b2\'fa\'c9\'fa\'d5\'fd\'c8\'b7\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 ioctl\hich\f0 \rquote \loch\f0 s}{
\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'b3\'cc\'d0\'f2\'ba\'cd\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'a3\'a8\'cb\'f9\'d2\'d4\'cb\'fc\'bf\'c9\'d2\'d4\'c0\'ed\'bd\'e2\'a3\'a9\'d6\'d0\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da\'cf\'c2\'c3\'e6\'b5\'c4\'c0\'fd
\'d7\'d3\'c0\'ef\'a3\'ac\'d5\'e2\'b8\'f6\'cd\'b7\'ce\'c4\'bc\'fe\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 chardev.h}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'ca\'b9\'d3\'c3\'cb\'fc\'b5\'c4\'b3\'cc\'d0\'f2\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 ioctl.c}{
\loch\af0\hich\af0\dbch\f17 \'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'c4\'e3\'cf\'a3\'cd\'fb\'d4\'da\'c4\'e3\'d7\'d4\'bc\'ba\'b5\'c4\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'d6\'d0\'ca\'b9\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 ioctl\hich\f0 \rquote \loch\f0 s}{
\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'d7\'ee\'ba\'c3\'c8\'a5\'bd\'d3\'ca\'dc\'d2\'bb\'b7\'d6\'d5\'fd\'ca\'bd\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 ioctl}{\loch\af0\hich\af0\dbch\f17 \'d6\'b0\'ce\'bb\'a3\'ac\'d5\'e2\'d1\'f9\'c4\'e3\'be\'cd\'bf\'c9\'d2\'d4
\'b5\'c3\'b5\'bd\'b1\'f0\'c8\'cb\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 ioctl\hich\f0 \rquote \loch\f0 s}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'bb\'f2\'d5\'df\'cb\'fb\'c3\'c7\'b5\'c3\'b5\'bd\'c4\'e3\'a3\'ac\'c4\'e3\'be\'cd\'bf\'c9\'d2\'d4\'d6\'aa\'b5\'c0
\'c4\'c4\'c0\'ef\'b3\'f6\'c1\'cb\'b4\'ed\'ce\'f3\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'cf\'eb\'b5\'c3\'b5\'bd\'b8\'fc\'b6\'e0\'b5\'c4\'d0\'c5\'cf\'a2\'a3\'ac\'b5\'bd}{\loch\af0\dbch\af17\hich\f0 \rquote \loch\f0 
documentation/ioctl-number.txt\hich\f0 \rquote }{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'b2\'e9\'bf\'b4\'c4\'da\'ba\'cb\'d4\'b4\'ce\'c4\'bc\'fe\'ca\'f7\'a1\'a3}{
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\hich\af0\dbch\af17\loch\f0 ex chardev.c \~\~ }{\kerning0 
\par }{\hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0 /* char\hich\af0\dbch\af17\loch\f0 dev.c 
\par \hich\af0\dbch\af17\loch\f0  * 
\par \hich\af0\dbch\af17\loch\f0  * Create an input/output character device
\par \hich\af0\dbch\af17\loch\f0  */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Copyright (C) 1998-99 by Ori Pomerantz */
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The necessary header files */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Standard in kernel modules */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/kernel.h>   /* We're doing kernel work */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/module.h>   /* Specifically, a module */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Deal with CONFIG_MODVERSIONS */
\par \hich\af0\dbch\af17\loch\f0 #if CONFIG_MODVERSIONS==1
\par \hich\af0\dbch\af17\loch\f0 #define MODVERSIONS
\par \hich\af0\dbch\af17\loch\f0 #include <linux/modversions.h>
\par \hich\af0\dbch\af17\loch\f0 #endif        
\par 
\par \hich\af0\dbch\af17\loch\f0 /* For character devices */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The character device definitions are h\hich\af0\dbch\af17\loch\f0 ere */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/fs.h>       
\par 
\par \hich\af0\dbch\af17\loch\f0 /* A wrapper which does next to nothing at
\par \hich\af0\dbch\af17\loch\f0  * at present, but may help for compatibility
\par \hich\af0\dbch\af17\loch\f0  * with future versions of Linux */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/wrapper.h>  
\par 
\par \tab \tab \tab \hich\af0\dbch\af17\loch\f0      
\par \hich\af0\dbch\af17\loch\f0 /* Our own ioctl numbers */
\par \hich\af0\dbch\af17\loch\f0 #include "chardev.h"
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* In 2.2.3 /usr/include/linux/version.h includes a 
\par \hich\af0\dbch\af17\loch\f0  * macro for this, but 2.0.35 doesn't - so I add it 
\par \hich\af0\dbch\af17\loch\f0  * here if necessary. */
\par \hich\af0\dbch\af17\loch\f0 #ifndef KERNEL_VERSION
\par \hich\af0\dbch\af17\loch\f0 #define KERNEL_VERSION(a,b,c) ((a)*65536+(b)*256+(c))
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSI\hich\af0\dbch\af17\loch\f0 ON(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 #include <asm/uaccess.h>  /* for get_user and put_user */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 #define SUCCESS 0
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Device Declarations ******************************** */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The name for our device, as it will appear in 
\par \hich\af0\dbch\af17\loch\f0  * /proc/devices */
\par \hich\af0\dbch\af17\loch\f0 #define DEVICE_NAME "char_d\hich\af0\dbch\af17\loch\f0 ev"
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The maximum length of the message for the device */
\par \hich\af0\dbch\af17\loch\f0 #define BUF_LEN 80
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Is the device open right now? Used to prevent 
\par \hich\af0\dbch\af17\loch\f0  * concurent access into the same device */
\par \hich\af0\dbch\af17\loch\f0 static int Device_Open = 0;
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The message the device will give when asked */
\par \hich\af0\dbch\af17\loch\f0 static char Message[BUF_LEN];
\par 
\par \hich\af0\dbch\af17\loch\f0 /* How far did the process reading the message get? 
\par \hich\af0\dbch\af17\loch\f0  * Useful if the message is larger than the size of the 
\par \hich\af0\dbch\af17\loch\f0  * buffer we get to fill in device_read. */
\par \hich\af0\dbch\af17\loch\f0 static char *Message_Ptr;
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This function is called whenever a proce\hich\af0\dbch\af17\loch\f0 ss attempts 
\par \hich\af0\dbch\af17\loch\f0  * to open the device file */
\par \hich\af0\dbch\af17\loch\f0 static int device_open(struct inode *inode, 
\par \hich\af0\dbch\af17\loch\f0                        struct file *file)
\par \{
\par \hich\af0\dbch\af17\loch\f0 #ifdef DEBUG
\par \hich\af0\dbch\af17\loch\f0   printk ("device_open(%p)\\n", file);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par \hich\af0\dbch\af17\loch\f0   /* We don't want to talk to two processes at the 
\par \hich\af0\dbch\af17\loch\f0    * same tim\hich\af0\dbch\af17\loch\f0 e */
\par \hich\af0\dbch\af17\loch\f0   if (Device_Open)
\par \hich\af0\dbch\af17\loch\f0     return -EBUSY;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* If this was a process, we would have had to be 
\par \hich\af0\dbch\af17\loch\f0    * more careful here, because one process might have 
\par \hich\af0\dbch\af17\loch\f0    * checked Device_Open right before the other one 
\par \hich\af0\dbch\af17\loch\f0    * tried to increment it. However, we're in the 
\par \hich\af0\dbch\af17\loch\f0    * kernel, so we're protected against context switches.
\par \hich\af0\dbch\af17\loch\f0    *
\par \hich\af0\dbch\af17\loch\f0    * This is NOT the right attitude to take, because we
\par \hich\af0\dbch\af17\loch\f0    * might be running on an SMP box, but we'll deal with
\par \hich\af0\dbch\af17\loch\f0    * SMP in a later chapter.
\par \hich\af0\dbch\af17\loch\f0    */ 
\par 
\par \hich\af0\dbch\af17\loch\f0   Device_Open++;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Initialize the mess\hich\af0\dbch\af17\loch\f0 age */
\par \hich\af0\dbch\af17\loch\f0   Message_Ptr = Message;
\par 
\par \hich\af0\dbch\af17\loch\f0   MOD_INC_USE_COUNT;
\par 
\par \hich\af0\dbch\af17\loch\f0   return SUCCESS;
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This function is called when a process closes the 
\par \hich\af0\dbch\af17\loch\f0  * device file. It doesn't have a return value because 
\par \hich\af0\dbch\af17\loch\f0  * it cannot fail. Regardless of what else happens, you 
\par \hich\af0\dbch\af17\loch\f0  * should al\hich\af0\dbch\af17\loch\f0 ways be able to close a device (in 2.0, a 2.2
\par \hich\af0\dbch\af17\loch\f0  * device file could be impossible to close). */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 static int device_release(struct inode *inode, 
\par \hich\af0\dbch\af17\loch\f0                           struct file *file)
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0 static void device_release(struct inode *inode, 
\par \hich\af0\dbch\af17\loch\f0                            struct file *file)
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \{
\par \hich\af0\dbch\af17\loch\f0 #ifdef DEBUG
\par \hich\af0\dbch\af17\loch\f0   printk ("device_release(%p,%p)\\n", inode, file);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0   /* We're now ready for our next caller */
\par \hich\af0\dbch\af17\loch\f0   Device_Open --;
\par 
\par \hich\af0\dbch\af17\loch\f0   MOD_DEC_USE_CO\hich\af0\dbch\af17\loch\f0 UNT;
\par 
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0   return 0;
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \}
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This function is called whenever a process which 
\par \hich\af0\dbch\af17\loch\f0  * has already opened the device file attempts to 
\par \hich\af0\dbch\af17\loch\f0  * read from it. */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 static\hich\af0\dbch\af17\loch\f0  ssize_t device_read(
\par \hich\af0\dbch\af17\loch\f0     struct file *file,
\par \hich\af0\dbch\af17\loch\f0     char *buffer, /* The buffer to fill with the data */   
\par \hich\af0\dbch\af17\loch\f0     size_t length,     /* The length of the buffer */
\par \hich\af0\dbch\af17\loch\f0     loff_t *offset) /* offset to the file */
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0 static int device_read(
\par \hich\af0\dbch\af17\loch\f0     struct inode *inode,
\par \hich\af0\dbch\af17\loch\f0     struct file *file,
\par \hich\af0\dbch\af17\loch\f0     char *buffer,   /* The buffer to fill with the data */ 
\par \hich\af0\dbch\af17\loch\f0     int length)     /* The length of the buffer 
\par \hich\af0\dbch\af17\loch\f0                      * (mustn't write beyond that!) */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* Number of bytes actually writt\hich\af0\dbch\af17\loch\f0 en to the buffer */
\par \hich\af0\dbch\af17\loch\f0   int bytes_read = 0;
\par 
\par \hich\af0\dbch\af17\loch\f0 #ifdef DEBUG
\par \hich\af0\dbch\af17\loch\f0   printk("device_read(%p,%p,%d)\\n",
\par \hich\af0\dbch\af17\loch\f0     file, buffer, length);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par \hich\af0\dbch\af17\loch\f0   /* If we're at the end of the message, return 0 
\par \hich\af0\dbch\af17\loch\f0    * (which signifies end of file) */
\par \hich\af0\dbch\af17\loch\f0   if (*Message_Ptr == 0)
\par \hich\af0\dbch\af17\loch\f0     return 0;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Actually put the data into the buffer */
\par \hich\af0\dbch\af17\loch\f0   while (length && *Message_Ptr)  \{
\par 
\par \hich\af0\dbch\af17\loch\f0     /* Because the buffer is in the user data segment, 
\par \hich\af0\dbch\af17\loch\f0      * not the kernel data segment, assignment wouldn't 
\par \hich\af0\dbch\af17\loch\f0      * work. Instead, we have to use put_user which 
\par \hich\af0\dbch\af17\loch\f0      * copies data from the kernel data segment to the 
\par \hich\af0\dbch\af17\loch\f0      * user data segment. */
\par \hich\af0\dbch\af17\loch\f0     put_user(*(Message_Ptr++), buffer++);
\par \hich\af0\dbch\af17\loch\f0     length --;
\par \hich\af0\dbch\af17\loch\f0     bytes_read ++;
\par \hich\af0\dbch\af17\loch\f0   \}
\par 
\par \hich\af0\dbch\af17\loch\f0 #ifdef DEBUG
\par \hich\af0\dbch\af17\loch\f0    printk ("Read %d bytes, %d left\\n",
\par \hich\af0\dbch\af17\loch\f0      bytes_read, length);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par \hich\af0\dbch\af17\loch\f0    /\hich\af0\dbch\af17\loch\f0 * Read functions are supposed to return the number 
\par \hich\af0\dbch\af17\loch\f0     * of bytes actually inserted into the buffer */
\par \hich\af0\dbch\af17\loch\f0   return bytes_read;
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This function is called when somebody tries to 
\par \hich\af0\dbch\af17\loch\f0  * write into our device file. */ 
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(\hich\af0\dbch\af17\loch\f0 2,2,0)
\par \hich\af0\dbch\af17\loch\f0 static ssize_t device_write(struct file *file,
\par \hich\af0\dbch\af17\loch\f0                             const char *buffer,
\par \hich\af0\dbch\af17\loch\f0                             size_t length,
\par \hich\af0\dbch\af17\loch\f0                             loff_t *offset)
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0 static int device_write(struct inode *inode,
\par \hich\af0\dbch\af17\loch\f0                         struct file *file,
\par \hich\af0\dbch\af17\loch\f0                         const char *buffer,
\par \hich\af0\dbch\af17\loch\f0                         int length)
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \{
\par \hich\af0\dbch\af17\loch\f0   int i;
\par 
\par \hich\af0\dbch\af17\loch\f0 #ifdef DEBUG
\par \hich\af0\dbch\af17\loch\f0   printk ("device_write(%p,%s,%d)",
\par \hich\af0\dbch\af17\loch\f0     file, buffer, length);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par \hich\af0\dbch\af17\loch\f0   for(i=0; i<length && i<BUF_L\hich\af0\dbch\af17\loch\f0 EN; i++)
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0     get_user(Message[i], buffer+i);
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0     Message[i] = get_user(buffer+i);
\par \hich\af0\dbch\af17\loch\f0 #endif  
\par 
\par \hich\af0\dbch\af17\loch\f0   Message_Ptr = Message;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Again, return the number of input characters used */
\par \hich\af0\dbch\af17\loch\f0   return i;
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This fu\hich\af0\dbch\af17\loch\f0 nction is called whenever a process tries to 
\par \hich\af0\dbch\af17\loch\f0  * do an ioctl on our device file. We get two extra 
\par \hich\af0\dbch\af17\loch\f0  * parameters (additional to the inode and file 
\par \hich\af0\dbch\af17\loch\f0  * structures, which all device functions get): the number
\par \hich\af0\dbch\af17\loch\f0  * of the ioctl called and the parameter given to the 
\par \hich\af0\dbch\af17\loch\f0  * ioctl function.
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * If the ioctl is write or read/write (meaning output 
\par \hich\af0\dbch\af17\loch\f0  * is returned to the calling process), the ioctl call 
\par \hich\af0\dbch\af17\loch\f0  * returns the output of this function.
\par \hich\af0\dbch\af17\loch\f0  */
\par \hich\af0\dbch\af17\loch\f0 int device_ioctl(
\par \hich\af0\dbch\af17\loch\f0     s\hich\af0\dbch\af17\loch\f0 truct inode *inode,
\par \hich\af0\dbch\af17\loch\f0     struct file *file,
\par \hich\af0\dbch\af17\loch\f0     unsigned int ioctl_num,/* The number of the ioctl */
\par \hich\af0\dbch\af17\loch\f0     unsigned long ioctl_param) /* The parameter to it */
\par \{
\par \hich\af0\dbch\af17\loch\f0   int i;
\par \hich\af0\dbch\af17\loch\f0   char *temp;
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0   char ch;
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Sw\hich\af0\dbch\af17\loch\f0 itch according to the ioctl called */
\par \hich\af0\dbch\af17\loch\f0   switch (ioctl_num) \{
\par \hich\af0\dbch\af17\loch\f0     case IOCTL_SET_MSG:
\par \hich\af0\dbch\af17\loch\f0       /* Receive a pointer to a message (in user space) 
\par \hich\af0\dbch\af17\loch\f0        * and set that to be the device's message. */ 
\par 
\par \hich\af0\dbch\af17\loch\f0       /* Get the parameter given to ioctl by the process */
\par \hich\af0\dbch\af17\loch\f0       temp = (char *) ioctl_param;
\par \hich\af0\dbch\af17\loch\f0    
\par \hich\af0\dbch\af17\loch\f0       /* Find the length of the message */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0       get_user(ch, temp);
\par \hich\af0\dbch\af17\loch\f0       for (i=0; ch && i<BUF_LEN; i++, temp++)
\par \hich\af0\dbch\af17\loch\f0         get_user(ch, temp);
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0       for (i=0; get_user(temp) && i<BUF_LEN; i++, temp++)
\par \tab \hich\af0\dbch\af17\loch\f0 ;
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par \hich\af0\dbch\af17\loch\f0       /* Don't reinvent the wheel - call device_write */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0       device_write(file, (char *) ioctl_param, i, 0);
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0       device_write(ino\hich\af0\dbch\af17\loch\f0 de, file, (char *) ioctl_param, i);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \hich\af0\dbch\af17\loch\f0       break;
\par 
\par \hich\af0\dbch\af17\loch\f0     case IOCTL_GET_MSG:
\par \hich\af0\dbch\af17\loch\f0       /* Give the current message to the calling 
\par \hich\af0\dbch\af17\loch\f0        * process - the parameter we got is a pointer, 
\par \hich\af0\dbch\af17\loch\f0        * fill it. */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0  \hich\af0\dbch\af17\loch\f0      i = device_read(file, (char *) ioctl_param, 99, 0); 
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0       i = device_read(inode, file, (char *) ioctl_param, 
\par \hich\af0\dbch\af17\loch\f0                       99); 
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \hich\af0\dbch\af17\loch\f0       /* Warning - we assume here the buffer length is 
\par \hich\af0\dbch\af17\loch\f0        * 100. If it's less than that we might overflow 
\par \hich\af0\dbch\af17\loch\f0        * the buffer, causing the process to core dump. 
\par \hich\af0\dbch\af17\loch\f0        *
\par \hich\af0\dbch\af17\loch\f0        * The reason we only allow up to 99 characters is 
\par \hich\af0\dbch\af17\loch\f0        * that the NULL which terminates the string also 
\par \hich\af0\dbch\af17\loch\f0        * needs room.\hich\af0\dbch\af17\loch\f0  */
\par 
\par \hich\af0\dbch\af17\loch\f0       /* Put a zero at the end of the buffer, so it 
\par \hich\af0\dbch\af17\loch\f0        * will be properly terminated */
\par \hich\af0\dbch\af17\loch\f0       put_user('\\0', (char *) ioctl_param+i);
\par \hich\af0\dbch\af17\loch\f0       break;
\par 
\par \hich\af0\dbch\af17\loch\f0     case IOCTL_GET_NTH_BYTE:
\par \hich\af0\dbch\af17\loch\f0       /* This ioctl is both input (ioctl_param) and 
\par \hich\af0\dbch\af17\loch\f0        * output \hich\af0\dbch\af17\loch\f0 (the return value of this function) */
\par \hich\af0\dbch\af17\loch\f0       return Message[ioctl_param];
\par \hich\af0\dbch\af17\loch\f0       break;
\par \hich\af0\dbch\af17\loch\f0   \}
\par 
\par \hich\af0\dbch\af17\loch\f0   return SUCCESS;
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Module Declarations *************************** */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This structure will hold the functions to be called 
\par \hich\af0\dbch\af17\loch\f0  * when a process does somethi\hich\af0\dbch\af17\loch\f0 ng to the device we 
\par \hich\af0\dbch\af17\loch\f0  * created. Since a pointer to this structure is kept in 
\par \hich\af0\dbch\af17\loch\f0  * the devices table, it can't be local to
\par \hich\af0\dbch\af17\loch\f0  * init_module. NULL is for unimplemented functions. */
\par \hich\af0\dbch\af17\loch\f0 struct file_operations Fops = \{
\par \hich\af0\dbch\af17\loch\f0   NULL,   /* seek */
\par \hich\af0\dbch\af17\loch\f0   device_read, 
\par \hich\af0\dbch\af17\loch\f0   device_write,
\par \hich\af0\dbch\af17\loch\f0   NULL,   /* readdir */
\par \hich\af0\dbch\af17\loch\f0   NULL,   /* select */
\par \hich\af0\dbch\af17\loch\f0   device_ioctl,   /* ioctl */
\par \hich\af0\dbch\af17\loch\f0   NULL,   /* mmap */
\par \hich\af0\dbch\af17\loch\f0   device_open,
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0   NULL,  /* flush */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \hich\af0\dbch\af17\loch\f0   device_release  /* a.k.a. close */
\par \}\hich\af0\dbch\af17\loch\f0 ;
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Initia\hich\af0\dbch\af17\loch\f0 lize the module - Register the character device */
\par \hich\af0\dbch\af17\loch\f0 int init_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   int ret_val;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Register the character device (atleast try) */
\par \hich\af0\dbch\af17\loch\f0   ret_val = module_register_chrdev(MAJOR_NUM, 
\par \hich\af0\dbch\af17\loch\f0                                  DEVICE_NAME,
\par \hich\af0\dbch\af17\loch\f0                         \hich\af0\dbch\af17\loch\f0          &Fops);
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Negative values signify an error */
\par \hich\af0\dbch\af17\loch\f0   if (ret_val < 0) \{
\par \hich\af0\dbch\af17\loch\f0     printk ("%s failed with %d\\n",
\par \hich\af0\dbch\af17\loch\f0             "Sorry, registering the character device ",
\par \hich\af0\dbch\af17\loch\f0             ret_val);
\par \hich\af0\dbch\af17\loch\f0     return ret_val;
\par \hich\af0\dbch\af17\loch\f0   \}
\par 
\par \hich\af0\dbch\af17\loch\f0   printk ("%s Th\hich\af0\dbch\af17\loch\f0 e major device number is %d.\\n",
\par \hich\af0\dbch\af17\loch\f0           "Registeration is a success", 
\par \hich\af0\dbch\af17\loch\f0           MAJOR_NUM);
\par \hich\af0\dbch\af17\loch\f0   printk ("If you want to talk to the device driver,\\n");
\par \hich\af0\dbch\af17\loch\f0   printk ("you'll have to create a device file. \\n");
\par \hich\af0\dbch\af17\loch\f0   printk ("We suggest you use:\\n");
\par \hich\af0\dbch\af17\loch\f0   printk ("m\hich\af0\dbch\af17\loch\f0 knod %s c %d 0\\n", DEVICE_FILE_NAME, 
\par \hich\af0\dbch\af17\loch\f0           MAJOR_NUM);
\par \hich\af0\dbch\af17\loch\f0   printk ("The device file name is important, because\\n");
\par \hich\af0\dbch\af17\loch\f0   printk ("the ioctl program assumes that's the\\n");
\par \hich\af0\dbch\af17\loch\f0   printk ("file you'll use.\\n");
\par 
\par \hich\af0\dbch\af17\loch\f0   return 0;
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Cleanup - unregister the approp\hich\af0\dbch\af17\loch\f0 riate file from /proc */
\par \hich\af0\dbch\af17\loch\f0 void cleanup_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   int ret;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Unregister the device */
\par \hich\af0\dbch\af17\loch\f0   ret = module_unregister_chrdev(MAJOR_NUM, DEVICE_NAME);
\par \hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0   /* If there's an error, report it */ 
\par \hich\af0\dbch\af17\loch\f0   if (ret < 0)
\par \hich\af0\dbch\af17\loch\f0     printk("Error in module_unregister_chrdev: %d\\\hich\af0\dbch\af17\loch\f0 n", ret);
\par \}
\par \hich\af0\dbch\af17\loch\f0 ex chardev.h \~\~ 
\par \hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0 /* chardev.h - the header file with the ioctl definitions.
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * The declarations here have to be in a header file, 
\par \hich\af0\dbch\af17\loch\f0  * because they need to be known both to the kernel 
\par \hich\af0\dbch\af17\loch\f0  * module (in chardev.c) and the process calling ioctl 
\par \hich\af0\dbch\af17\loch\f0  * (ioctl.c)
\par \hich\af0\dbch\af17\loch\f0  */
\par 
\par \hich\af0\dbch\af17\loch\f0 #ifndef CHARDEV_H
\par \hich\af0\dbch\af17\loch\f0 #define CHARDEV_H
\par 
\par \hich\af0\dbch\af17\loch\f0 #include <linux/ioctl.h> 
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The major device number. We can't rely on dynamic 
\par \hich\af0\dbch\af17\loch\f0  * registration any more, because ioctls need to know 
\par \hich\af0\dbch\af17\loch\f0  * it. */
\par \hich\af0\dbch\af17\loch\f0 #define MAJOR_NUM 100
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Set the message of the de\hich\af0\dbch\af17\loch\f0 vice driver */
\par \hich\af0\dbch\af17\loch\f0 #define IOCTL_SET_MSG _IOR(MAJOR_NUM, 0, char *)
\par \hich\af0\dbch\af17\loch\f0 /* _IOR means that we're creating an ioctl command 
\par \hich\af0\dbch\af17\loch\f0  * number for passing information from a user process
\par \hich\af0\dbch\af17\loch\f0  * to the kernel module. 
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * The first arguments, MAJOR_NUM, is the major device 
\par \hich\af0\dbch\af17\loch\f0  \hich\af0\dbch\af17\loch\f0 * number we're using.
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * The second argument is the number of the command 
\par \hich\af0\dbch\af17\loch\f0  * (there could be several with different meanings).
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * The third argument is the type we want to get from 
\par \hich\af0\dbch\af17\loch\f0  * the process to the kernel.
\par \hich\af0\dbch\af17\loch\f0  */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Get the message of the device\hich\af0\dbch\af17\loch\f0  driver */
\par \hich\af0\dbch\af17\loch\f0 #define IOCTL_GET_MSG _IOR(MAJOR_NUM, 1, char *)
\par \hich\af0\dbch\af17\loch\f0  /* This IOCTL is used for output, to get the message 
\par \hich\af0\dbch\af17\loch\f0   * of the device driver. However, we still need the 
\par \hich\af0\dbch\af17\loch\f0   * buffer to place the message in to be input, 
\par \hich\af0\dbch\af17\loch\f0   * as it is allocated by the process.
\par \hich\af0\dbch\af17\loch\f0   */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Get the n'th byte of the message */
\par \hich\af0\dbch\af17\loch\f0 #define IOCTL_GET_NTH_BYTE _IOWR(MAJOR_NUM, 2, int)
\par \hich\af0\dbch\af17\loch\f0  /* The IOCTL is used for both input and output. It 
\par \hich\af0\dbch\af17\loch\f0   * receives from the user a number, n, and returns 
\par \hich\af0\dbch\af17\loch\f0   * Message[n]. */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The name of the device file\hich\af0\dbch\af17\loch\f0  */
\par \hich\af0\dbch\af17\loch\f0 #define DEVICE_FILE_NAME "char_dev"
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \~\hich\af0\dbch\af17\loch\f0  \~ \~ \~ 
\par \hich\af0\dbch\af17\loch\f0 ex ioctl.c \~\~ 
\par \hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0 /* ioctl.c - the process to use ioctl's to control the 
\par \hich\af0\dbch\af17\loch\f0  * kernel module
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * Until now we could have used cat for input and 
\par \hich\af0\dbch\af17\loch\f0  * output. But now we need to do ioctl's, which requir\hich\af0\dbch\af17\loch\f0 e 
\par \hich\af0\dbch\af17\loch\f0  * writing our own process. 
\par \hich\af0\dbch\af17\loch\f0  */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Copyright (C) 1998 by Ori Pomerantz */
\par \hich\af0\dbch\af17\loch\f0  
\par 
\par \hich\af0\dbch\af17\loch\f0 /* device specifics, such as ioctl numbers and the 
\par \hich\af0\dbch\af17\loch\f0  * major device file. */
\par \hich\af0\dbch\af17\loch\f0 #include "chardev.h"    
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 #include <fcntl.h>      /* open */ 
\par \hich\af0\dbch\af17\loch\f0 #include <unistd.h>     /* exit */
\par \hich\af0\dbch\af17\loch\f0 #include <sys/ioctl.h>  /* ioctl */
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Functions for the ioctl calls */
\par 
\par \hich\af0\dbch\af17\loch\f0 ioctl_set_msg(int file_desc, char *message)
\par \{
\par \hich\af0\dbch\af17\loch\f0   int ret_val;
\par 
\par \hich\af0\dbch\af17\loch\f0   ret_val = ioctl(file_desc, IOCTL_SET_MSG, message);
\par 
\par \hich\af0\dbch\af17\loch\f0   if (ret_val < 0) \{
\par \hich\af0\dbch\af17\loch\f0     printf ("ioctl_set_msg failed:%d\\n", \hich\af0\dbch\af17\loch\f0 ret_val);
\par \hich\af0\dbch\af17\loch\f0     exit(-1);
\par \hich\af0\dbch\af17\loch\f0   \}
\par \}
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 ioctl_get_msg(int file_desc)
\par \{
\par \hich\af0\dbch\af17\loch\f0   int ret_val;
\par \hich\af0\dbch\af17\loch\f0   char message[100]; 
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Warning - this is dangerous because we don't tell 
\par \hich\af0\dbch\af17\loch\f0    * the kernel how far it's allowed to write, so it 
\par \hich\af0\dbch\af17\loch\f0    * might overflow the buffer. In a real pr\hich\af0\dbch\af17\loch\f0 oduction 
\par \hich\af0\dbch\af17\loch\f0    * program, we would have used two ioctls - one to tell
\par \hich\af0\dbch\af17\loch\f0    * the kernel the buffer length and another to give 
\par \hich\af0\dbch\af17\loch\f0    * it the buffer to fill
\par \hich\af0\dbch\af17\loch\f0    */
\par \hich\af0\dbch\af17\loch\f0   ret_val = ioctl(file_desc, IOCTL_GET_MSG, message);
\par 
\par \hich\af0\dbch\af17\loch\f0   if (ret_val < 0) \{
\par \hich\af0\dbch\af17\loch\f0     printf ("ioctl_get_m\hich\af0\dbch\af17\loch\f0 sg failed:%d\\n", ret_val);
\par \hich\af0\dbch\af17\loch\f0     exit(-1);
\par \hich\af0\dbch\af17\loch\f0   \}
\par 
\par \hich\af0\dbch\af17\loch\f0   printf("get_msg message:%s\\n", message);
\par \}
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 ioctl_get_nth_byte(int file_desc)
\par \{
\par \hich\af0\dbch\af17\loch\f0   int i;
\par \hich\af0\dbch\af17\loch\f0   char c;
\par 
\par \hich\af0\dbch\af17\loch\f0   printf("get_nth_byte message:");
\par 
\par \hich\af0\dbch\af17\loch\f0   i = 0;
\par \hich\af0\dbch\af17\loch\f0   while (c != 0) \{
\par \hich\af0\dbch\af17\loch\f0     c = ioctl(file_desc, IOCTL_GET_NTH_BYT\hich\af0\dbch\af17\loch\f0 E, i++);
\par 
\par \hich\af0\dbch\af17\loch\f0     if (c < 0) \{
\par \hich\af0\dbch\af17\loch\f0       printf(
\par \hich\af0\dbch\af17\loch\f0       "ioctl_get_nth_byte failed at the %d'th byte:\\n", i);
\par \hich\af0\dbch\af17\loch\f0       exit(-1);
\par \hich\af0\dbch\af17\loch\f0     \}
\par 
\par \hich\af0\dbch\af17\loch\f0     putchar(c);
\par \hich\af0\dbch\af17\loch\f0   \} 
\par \hich\af0\dbch\af17\loch\f0   putchar('\\n');
\par \}
\par 
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Main - Call the ioctl functions */
\par \hich\af0\dbch\af17\loch\f0 main()
\par \{
\par \hich\af0\dbch\af17\loch\f0   int file_desc, ret_val;
\par \hich\af0\dbch\af17\loch\f0   char *msg = "\hich\af0\dbch\af17\loch\f0 Message passed by ioctl\\n";
\par 
\par \hich\af0\dbch\af17\loch\f0   file_desc = open(DEVICE_FILE_NAME, 0);
\par \hich\af0\dbch\af17\loch\f0   if (file_desc < 0) \{
\par \hich\af0\dbch\af17\loch\f0     printf ("Can't open device file: %s\\n", 
\par \hich\af0\dbch\af17\loch\f0             DEVICE_FILE_NAME);
\par \hich\af0\dbch\af17\loch\f0     exit(-1);
\par \hich\af0\dbch\af17\loch\f0   \}
\par 
\par \hich\af0\dbch\af17\loch\f0   ioctl_get_nth_byte(file_desc);
\par \hich\af0\dbch\af17\loch\f0   ioctl_get_msg(file_desc);
\par \hich\af0\dbch\af17\loch\f0   ioctl\hich\af0\dbch\af17\loch\f0 _set_msg(file_desc, msg);
\par 
\par \hich\af0\dbch\af17\loch\f0   close(file_desc); 
\par \}
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard\plain \s1\qj \li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281303}
\hich\af0\dbch\af17\loch\f0 6}{\fs36 \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'c6\'f4\'b6\'af\'b2\'ce\'ca\'fd}{\fs36 {\*\bkmkend _Toc491281303}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'d4\'da\'d2\'d4\'c7\'b0\'b5\'c4
\'d0\'ed\'b6\'e0\'c0\'fd\'d7\'d3\'c0\'ef\'a3\'ac\'ce\'d2\'c3\'c7\'d2\'aa\'b0\'d1\'d2\'bb\'d0\'a9\'b6\'ab\'ce\'f7\'c7\'bf\'d6\'c6\'b5\'d8\'d0\'b4\'c8\'eb\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'a3\'ac\'b1\'c8\'c8\'e7}{\hich\af0\dbch\af17\loch\f0 /proc}{
\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'c3\'fb\'bb\'f2\'c9\'e8\'b1\'b8\'d6\'f7\'c2\'eb\'a3\'ac\'d2\'d4\'d6\'c1\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 ioctl\hich\f0 \rquote \loch\f0 s}{\loch\af0\hich\af0\dbch\f17 
\'b4\'a6\'c0\'ed\'cb\'fc\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'d1\'f9\'be\'e4\'ce\'a5\'b1\'b3\'c1\'cb}{\hich\af0\dbch\af17\loch\f0 Unix}{\loch\af0\hich\af0\dbch\f17 \'d2\'d4\'bc\'b0}{\hich\af0\dbch\af17\loch\f0 Linux}{\loch\af0\hich\af0\dbch\f17 
\'b5\'c4\'d4\'ad\'d4\'f2\'a3\'ba\'d0\'b4\'d3\'c3\'bb\'a7\'bf\'c9\'d2\'d4\'d7\'d4\'d3\'c9\'c9\'e8\'b6\'a8\'b5\'c4\'c1\'e9\'bb\'ee\'b3\'cc\'d0\'f2\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d4\'da\'b3\'cc\'d0\'f2\'bb\'f2\'d5\'df\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'c6\'f4\'b6\'af\'d6\'ae\'c7\'b0\'cd\'a8\'d6\'aa\'cb\'fc\'d2\'bb\'d0\'a9\'cf\'fb\'cf\'a2\'ca\'c7\'cd\'a8\'b9\'fd\'c3\'fc\'c1\'ee\'d0\'d0\'b2\'ce\'ca\'fd
\'d7\'f6\'b5\'bd\'b5\'c4\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'b5\'c4\loch\af0\hich\af0\dbch\f17 \'c7\'e9\'bf\'f6\'cf\'c2\'a3\'ac\'ce\'d2\'c3\'c7\'c3\'bb\'d3\'d0}{\hich\af0\dbch\af17\loch\f0 argc}{
\loch\af0\hich\af0\dbch\f17 \'ba\'cd}{\hich\af0\dbch\af17\loch\f0 argv}{\loch\af0\hich\af0\dbch\f17 \'b2\'ce\'ca\'fd\'a3\'ac\'b6\'f8\'ca\'c7\'d3\'d0\'b8\'fc\'ba\'c3\'b5\'c4\'b6\'ab\'ce\'f7\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'c3\'c7\'bf\'c9
\'d2\'d4\'d4\'da\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'c0\'ef\'b6\'a8\'d2\'e5\'c8\'ab\'be\'d6\'b1\'e4\'c1\'bf\'a3\'ac}{\hich\af0\dbch\af17\loch\f0 insmod}{\loch\af0\hich\af0\dbch\f17 \'bb\'e1\'b8\'f8\'ce\'d2\'c3\'c7\'b8\'b3\'d6\'b5\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d4\'da\'d5\'e2\'b8\'f6\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'d6\'d0\'a3\'ac\'ce\'d2\'c3\'c7\'b6\'a8\'d2\'e5\'c1\'cb\'c1\'bd\'b8\'f6\'b1\'e4\'c1\'bf\'a3\'ba}{\hich\af0\dbch\af17\loch\f0 str1}{\loch\af0\hich\af0\dbch\f17 \'ba\'cd}
{\hich\af0\dbch\af17\loch\f0 str2}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c4\'e3\'d0\'e8\'d2\'aa\'d7\'f6\'b5\'c4\'d6\'bb\'ca\'c7\'b1\'e0\'d2\'eb\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'a3\'ac\'c8\'bb\'ba\'f3\'d4\'cb\'d0\'d0}{
\hich\af0\dbch\af17\loch\f0 str1=xxx str2=yyy}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b5\'b1\'b5\'f7\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 init_module}{\loch\af0\hich\af0\dbch\f17 \'ca\'b1\'a3\'ac}{\hich\af0\dbch\af17\loch\f0 
str1}{\loch\af0\hich\af0\dbch\f17 \'bd\'ab\'d6\'b8\'cf\'f2\'b4\'ae}{\hich\af0\dbch\af17\loch\f0 xxx}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac}{\hich\af0\dbch\af17\loch\f0 str2}{\loch\af0\hich\af0\dbch\f17 \'bd\'ab\'d6\'b8\'cf\'f2\'b4\'ae}{
\hich\af0\dbch\af17\loch\f0 yyy}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d4\'da}{\hich\af0\dbch\af17\loch\f0 2.0}{\loch\af0\hich\af0\dbch\f17 \'b0\'e6\'b6\'d4\'d5\'e2\'d0\'a9\'b2\'ce\'ca\'fd\'c3\'bb\'d3\'d0\'c0\'e0\'d0\'cd\'bc\'ec\'b2\'e9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb}{
\hich\af0\dbch\af17\loch\f0 str1}{\loch\af0\hich\af0\dbch\f17 \'ba\'cd}{\hich\af0\dbch\af17\loch\f0 str2}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'b5\'da\'d2\'bb\'b8\'f6\'d7\'d6\'b7\'fb\'ca\'c7\'ca\'fd\'d7\'d6\'a3\'ac\'c4\'da\'ba\'cb\'be\'cd\'bb\'e1\'b0\'d1
\'d5\'e2\'d0\'a9\'b1\'e4\'c1\'bf\'b8\'b3\'ce\'aa\'d5\'fb\'ca\'fd\'a3\'ac\'b6\'f8\'b2\'bb\'ca\'c7\'d6\'b8\'cf\'f2\'b4\'ae\'b5\'c4\'d6\'b8\'d5\'eb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'d4\'da\'ca\'b5\'bc\'ca\'c7\'e9\'bf\'f6\'d6\'d0\'c4\'e3\'d2\'bb
\'b6\'a8\'d2\'aa\'bc\'ec\'b2\'e9\'c0\'e0\'d0\'cd\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'c1\'ed\'d2\'bb\'b7\'bd\'c3\'e6\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'d4\'da}{\hich\af0\dbch\af17\loch\f0 2.2}{\loch\af0\hich\af0\dbch\f17 \'b0\'e6\'b1\'be\loch\af0\hich\af0\dbch\f17 \'d6\'d0
\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'c4\'e3\'bf\'c9\'d2\'d4\'ca\'b9\'d3\'c3\'ba\'ea}{\hich\af0\dbch\af17\loch\f0 MACRO_PARM}{\loch\af0\hich\af0\dbch\f17 \'b8\'e6\'cb\'df}{\hich\af0\dbch\af17\loch\f0 insmod}{
\loch\af0\hich\af0\dbch\f17 \'c4\'e3\'d0\'e8\'d2\'aa\'d2\'bb\'b8\'f6\'b2\'ce\'ca\'fd\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'cb\'fc\'b5\'c4\'c3\'fb\'d7\'d6\'ba\'cd\'c0\'e0\'d0\'cd\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2
\'d1\'f9\'bd\'e2\'be\'f6\'c1\'cb\'c0\'e0\'d0\'cd\'ce\'ca\'cc\'e2\'a3\'ac\'b2\'a2\'c7\'d2\'d4\'ca\'d0\'ed\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'bd\'d3\'ca\'d5\'d2\'d4\'ca\'fd\'d7\'d6\'bf\'aa\'ca\'bc\'b5\'c4\'b4\'ae\'a1\'a3}{
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\hich\af0\dbch\af17\loch\f0 ex }{\b\fs27 \hich\af0\dbch\af17\loch\f0 param.c}{\hich\af0\dbch\af17\loch\f0  \~\~ }{\kerning0 
\par }{\hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0 /* param.c 
\par \hich\af0\dbch\af17\loch\f0  * 
\par \hich\af0\dbch\af17\loch\f0  * Receive command line parameters at module installation
\par \hich\af0\dbch\af17\loch\f0  */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Copyright (C) 1998-99 by Ori Pomerantz */
\par 
\par 
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The necessary header files */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Standard in kernel modules */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/kernel.h>   /* We're doing kernel work */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/module.h>   /* Specifically, a module */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Deal with CONFIG_MODVERSIONS */
\par \hich\af0\dbch\af17\loch\f0 #if CONFIG_MODVERSIONS==1
\par \hich\af0\dbch\af17\loch\f0 #define MODVERSIONS
\par \hich\af0\dbch\af17\loch\f0 #include <linux/modversion\hich\af0\dbch\af17\loch\f0 s.h>
\par \hich\af0\dbch\af17\loch\f0 #endif        
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 #include <stdio.h>  /* I need NULL */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* In 2.2.3 /usr/include/linux/version.h includes a 
\par \hich\af0\dbch\af17\loch\f0  * macro for this, but 2.0.35 doesn't - so I add it 
\par \hich\af0\dbch\af17\loch\f0  * here if necessary. */
\par \hich\af0\dbch\af17\loch\f0 #ifndef KERNEL_VERSION
\par \hich\af0\dbch\af17\loch\f0 #define KERNEL_VERSION(a,b,c) ((a)*65536\hich\af0\dbch\af17\loch\f0 +(b)*256+(c))
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Emmanuel Papirakis:
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * Prameter names are now (2.2) handled in a macro.
\par \hich\af0\dbch\af17\loch\f0  * The kernel doesn't resolve the symbol names
\par \hich\af0\dbch\af17\loch\f0  * like it seems to have once did.
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * To pass parameters to a module, you have to use a macro
\par \hich\af0\dbch\af17\loch\f0  * defined in include/linux/modules.h (line 176).
\par \hich\af0\dbch\af17\loch\f0  * The macro takes two parameters. The parameter's name and
\par \hich\af0\dbch\af17\loch\f0  * it's type. The type is a letter in double quotes.
\par \hich\af0\dbch\af17\loch\f0  * For example, "i" should be an integer and "s" should
\par \hich\af0\dbch\af17\loch\f0  * be a string.
\par \hich\af0\dbch\af17\loch\f0  */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 char *str1, *st\hich\af0\dbch\af17\loch\f0 r2;
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 MODULE_PARM(str1, "s");
\par \hich\af0\dbch\af17\loch\f0 MODULE_PARM(str2, "s");
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Initialize the module - show the parameters */
\par \hich\af0\dbch\af17\loch\f0 int init_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   if (str1 == NULL || str2 == NULL) \{
\par \hich\af0\dbch\af17\loch\f0     printk("Next time, do insmod para\hich\af0\dbch\af17\loch\f0 m str1=<something>");
\par \hich\af0\dbch\af17\loch\f0     printk("str2=<something>\\n");
\par \hich\af0\dbch\af17\loch\f0   \} else
\par \hich\af0\dbch\af17\loch\f0     printk("Strings:%s and %s\\n", str1, str2);
\par 
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0   printk("If you try to insmod this module twice,");
\par \hich\af0\dbch\af17\loch\f0   printk("(without rmmod'ing\\n");
\par \hich\af0\dbch\af17\loch\f0   printk("it first), you might get the wrong"); 
\par \hich\af0\dbch\af17\loch\f0   printk("error message:\\n");
\par \hich\af0\dbch\af17\loch\f0   printk("'symbol for parameters str1 not found'.\\n");
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par \hich\af0\dbch\af17\loch\f0   return 0;
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Cleanup */
\par \hich\af0\dbch\af17\loch\f0 void cleanup_module()
\par \{
\par \}
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard\plain \s1\qj \li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281304}
\hich\af0\dbch\af17\loch\f0 7}{\fs36 \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3}{\fs36 {\*\bkmkend _Toc491281304}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'b5\'bd\'b4\'cb\'ce\'aa\'d6\'b9
\'a3\'ac\'ce\'d2\'c3\'c7\'d7\'f6\'b5\'c4\'ca\'c2\'c7\'e9\'be\'cd\'ca\'c7\'ca\'b9\'d3\'c3\'b6\'a8\'d2\'e5\'ba\'c3\'b5\'c4\'c4\'da\'ba\'cb\'bb\'fa\'d6\'c6\'c0\'b4\'d7\'a2\'b2\'e1}{\hich\af0\dbch\af17\loch\f0 /proc}{\loch\af0\hich\af0\dbch\f17 \'ce\'c4
\'bc\'fe\'ba\'cd\'c9\'e8\'b1\'b8\'be\'e4\'b1\'fa\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'d4\'da\'d7\'f6\'c4\'da\'ba\'cb\'b3\'a3\'b9\'e6\'b4\'a6\'c0\'ed\'b5\'c4\'ca\'c2\'c7\'e9\'ca\'b1\'ca\'c7\'ba\'dc\'c0\'ed\'cf\'eb\'b5\'c4\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'b5\'ab\'ca\'c7\'c8\'e7\'b9\'fb\'c4\'e3\'cf\'a3\'cd\'fb\'d7\'f6\'d2\'bb\'d0\'a9\'b7\'c7\'b3\'a3\'b9\'e6\'b5\'c4\'ca\'c2\'c7\'e9\'a1\'a2\'b8\'c4\'b1\'e4\'cf\'b5\'cd\'b3\'b5\'c4\'d0\'d0\'ce\'aa\'b5\'c4\'ca\'b1\'ba\'f2\'b8\'c3
\'d4\'f5\'c3\'b4\'b0\'ec\'c4\'d8\'a3\'bf\'d5\'e2\'be\'cd\'b1\'d8\'d0\'eb\'d2\'c0\'bf\'bf\'d7\'d4\'bc\'ba\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'be\'cd\'ca\'c7\'c4\'da\'ba\'cb\'b1\'e0\'b3\'cc\'b1\'e4\'b5\'c3\'ce\'a3\'cf\'d5\'b5\'c4\'b5\'d8\'b7\'bd\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da\'d0\'b4\'cf\'c2\'c3\'e6\'b5\'c4\'c0\'fd\'d7\'d3\'b5\'c4\'ca\'b1
\'ba\'f2\'a3\'ac\'ce\'d2\'b9\'d8\'b1\'d5\'c1\'cb}{\hich\af0\dbch\af17\loch\f0 open}{\loch\af0\hich\af0\dbch\f17 \'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'d2\'e2\'ce\'b6\'d7\'c5\'ce\'d2\'b2\'bb\'c4\'dc\'b4\'f2\'bf\'aa
\'c8\'ce\'ba\'ce\'ce\'c4\'bc\'fe\'a3\'ac\'b2\'bb\'c4\'dc\'d4\'cb\'d0\'d0\'c8\'ce\'ba\'ce\'b3\'cc\'d0\'f2\'a3\'ac\'b6\'f8\'c7\'d2\'b2\'bb\'c4\'dc\'b9\'d8\'b1\'d5\'bc\'c6\'cb\'e3\'bb\'fa\'a1\'a3\'ce\'d2\'b1\'d8\'d0\'eb\'c0\'ad\'d7\'a1\'b5\'e7\'d4\'b4
\'bf\'aa\'b9\'d8\'a1\'a3\'d0\'d2\'d4\'cb\'b5\'c4\'ca\'c7\'a3\'ac\'c3\'bb\'d3\'d0\'ce\'c4\'bc\'fe\'b6\'aa\'ca\'a7\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'ce\'aa\'c8\'b7\'b1\'a3\'c4\'e3\'d2\'b2\'b2\'bb\'bb\'e1\'b6\'aa\'ca\'a7\'c8\'ce\'ba\'ce\'ce\'c4\'bc\'fe
\'a3\'ac\'d4\'da\'d7\'f6}{\hich\af0\dbch\af17\loch\f0 insmod}{\loch\af0\hich\af0\dbch\f17 \'d2\'d4\'bc\'b0}{\hich\af0\dbch\af17\loch\f0 rmmod}{\loch\af0\hich\af0\dbch\f17 \'c7\'b0\'c7\'eb\'d6\'b4\'d0\'d0}{\hich\af0\dbch\af17\loch\f0 sync}{
\loch\af0\hich\af0\dbch\f17 \'c8\'a8\'cf\'de\'a3\'ac}{
\par }{\loch\af0\hich\af0\dbch\f17 \'cd\'fc\'bc\'c7}{\hich\af0\dbch\af17\loch\f0 /pro\hich\af0\dbch\af17\loch\f0 c}{\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'a3\'ac\'cd\'fc\'bc\'c7\'c9\'e8\'b1\'b8\'ce\'c4\'bc\'fe\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'cb\'fc
\'c3\'c7\'d6\'bb\'ca\'c7\'b2\'bb\'d6\'d8\'d2\'aa\'b5\'c4\'cf\'b8\'bd\'da\'a1\'a3\'d5\'e6\'d5\'fd\'b5\'c4\'cd\'ac\'c4\'da\'ba\'cb\'cd\'a8\'d0\'c5\'b5\'c4\'b9\'fd\'b3\'cc\'bb\'fa\'d6\'c6\'ca\'c7\'b1\'bb\'cb\'f9\'d3\'d0\'bd\'f8\'b3\'cc\'b9\'ab\'d3\'c3
\'b5\'c4\'a3\'ac\'d5\'e2\'be\'cd\'ca\'c7\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'a1\'a3\'b5\'b1\'d2\'bb\'b8\'f6\'bd\'f8\'b3\'cc\'c7\'eb\'c7\'f3\'c4\'da\'ba\'cb\'b7\'fe\'ce\'f1\'ca\'b1\'a3\'a8\'b1\'c8\'c8\'e7\'b4\'f2\'bf\'aa\'ce\'c4\'bc\'fe\'a1\'a2\'b4\'b4
\'bd\'a8\'d2\'bb\'b8\'f6\'d0\'c2\'bd\'f8\'b3\'cc\'bb\'f2\'d5\'df\'d2\'aa\'c7\'f3\'b8\'fc\'b6\'e0\'c4\'da\'b4\'e6\'a3\'a9\'a3\'ac\'be\'cd\'d0\'e8\'d2\'aa\'ca\'b9\'d3\'c3\'d5\'e2\'b8\'f6\'bb\'fa\'d6\'c6\'a1\'a3\'c8\'e7\'b9\'fb\'c4\'e3\'cf\'eb\'d3\'c3
\'b1\'c8\'bd\'cf\'d3\'d0\'c8\'a4\'b5\'c4\'b7\'bd\'b7\'a8\'b8\'c4\'b1\'e4\'c4\'da\'ba\'cb\'d0\'d0\'ce\'aa\'a3\'ac\'d5\'e2\'be\'cd\'ca\'c7\'c4\'e3\'cb\'f9\'d0\'e8\'d2\'aa\'b5\'c4\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c1\'ed\'cd\'e2\'a3\'ac\'c8\'e7\'b9\'fb
\'c4\'e3\'cf\'a3\'cd\'fb\'bf\'b4\'b5\'bd\'b3\'cc\'d0\'f2\'ca\'b9\'d3\'c3\'c1\'cb\'c4\'c4\'d2\'bb\'b8\'f6\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'a3\'ac\'d4\'cb\'d0\'d0}{\hich\af0\dbch\af17\loch\f0 strace <command> <arguments>}{\loch\af0\hich\af0\dbch\f17 
\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d2\'bb\'b0\'e3\'b5\'c4\'a3\'ac\'bd\'f8\'b3\'cc\'ca\'c7\'b2\'bb\'c4\'dc\'b7\'c3\'ce\'ca\'c4\'da\'ba\'cb\'b5\'c4\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'cb\'fc\'b2\'bb\'c4\'dc\'b7\'c3\'ce\'ca\'c4\'da\'ba\'cb\'cb\'f9\'d5\'bc
\'c4\'da\'b4\'e6\'bf\'d5\'bc\'e4\'d2\'b2\'b2\'bb\'c4\'dc\'b5\'f7\'d3\'c3\'c4\'da\'ba\'cb\'ba\'af\'ca\'fd\'a1\'a3}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'d3\'b2\'bc\'fe\'be\'f6\'b6\'a8\'c1\'cb\'d5\'e2\'d0\'a9\'a3\'a8\'d5\'e2\'be\'cd
\'ca\'c7\'ce\'aa\'ca\'b2\'c3\'b4\'cb\'fc\'b1\'bb\'b3\'c6\'d7\'f7\'a1\'b0\'b1\'a3\'bb\'a4\'c4\'a3\'ca\'bd\'a1\'b1\'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'ca\'c7\'d5\'e2\loch\af0\hich\af0\dbch\f17 \'d0\'a9\'b9\'e6
\'d4\'f2\'b5\'c4\'d2\'bb\'b8\'f6\'c0\'fd\'cd\'e2\'a1\'a3\'c6\'e4\'d4\'ad\'c0\'ed\'ca\'c7\'bd\'f8\'b3\'cc\'cf\'c8\'d3\'c3\'ca\'ca\'b5\'b1\'b5\'c4\'d6\'b5\'cc\'ee\'b3\'e4\'bc\'c4\'b4\'e6\'c6\'f7\'a3\'ac\'c8\'bb\'ba\'f3\'b5\'f7\'d3\'c3\'d2\'bb\'b8\'f6
\'cc\'d8\'ca\'e2\'b5\'c4\'d6\'b8\'c1\'ee\'a3\'ac\'d5\'e2\'b8\'f6\'d6\'b8\'c1\'ee\'bb\'e1\'cc\'f8\'b5\'bd\'d2\'bb\'b8\'f6\'ca\'c2\'cf\'c8\'b6\'a8\'d2\'e5\'b5\'c4\'c4\'da\'ba\'cb\'d6\'d0\'b5\'c4\'d2\'bb\'b8\'f6\'ce\'bb\'d6\'c3\'a3\'a8\'b5\'b1\'c8\'bb
\'a3\'ac\'d5\'e2\'b8\'f6\'ce\'bb\'d6\'c3\'ca\'c7\'d3\'c3\'bb\'a7\'bd\'f8\'b3\'cc\'bf\'c9\'b6\'c1\'b5\'ab\'ca\'c7\'b2\'bb\'bf\'c9\'d0\'b4\'b5\'c4\'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da}{\hich\af0\dbch\af17\loch\f0 Intel CPU}{
\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'a3\'ac\'d5\'e2\'b8\'f6\'d3\'c9\'d6\'d0\'b6\'cf}{\hich\af0\dbch\af17\loch\f0 0x80}{\loch\af0\hich\af0\dbch\f17 \'ca\'b5\'cf\'d6\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d3\'b2\'bc\'fe\'d6\'aa\'b5\'c0\'d2\'bb\'b5\'a9
\'c4\'e3\'cc\'f8\'b5\'bd\'d5\'e2\'b8\'f6\'ce\'bb\'d6\'c3\'a3\'ac\'c4\'e3\'be\'cd\'b2\'bb\'ca\'c7\'d4\'da\'cf\'de\'d6\'c6\'c4\'a3\'ca\'bd\'cf\'c2\'d4\'cb\'d0\'d0\'b5\'c4\'d3\'c3\'bb\'a7\'a3\'ac\'b6\'f8\'ca\'c7\'d7\'f7\'ce\'aa\'b2\'d9\'d7\'f7\'cf\'b5
\'cd\'b3\'b5\'c4\'c4\'da\'ba\'cb}{\loch\af0\dbch\af17\hich\f0 \emdash \emdash }{\loch\af0\hich\af0\dbch\f17 \'cb\'f9\'d2\'d4\'c4\'e3\'be\'cd\'bf\'c9\'d2\'d4\'ce\'aa\'cb\'f9\'d3\'fb\'ce\'aa\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'bd\'f8\'b3\'cc\'bf\'c9\'d2\'d4\'cc\'f8\'d7\'aa\'b5\'bd\'b5\'c4\'c4\'da\'ba\'cb\'ce\'bb\'d6\'c3\'bd\'d0\'d7\'f6}{\hich\af0\dbch\af17\loch\f0 sysem_call}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\'d5\'e2\'b8\'f6\'b9\'fd\'b3\'cc
\'bc\'ec\'b2\'e9\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'ba\'c5\'a3\'ac\'d5\'e2\'b8\'f6\'ba\'c5\'c2\'eb\'b8\'e6\'cb\'df\'c4\'da\'ba\'cb\'bd\'f8\'b3\'cc\'c7\'eb\'c7\'f3\'c4\'c4\'d6\'d6\'b7\'fe\'ce\'f1\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'bb\'ba\'f3\'a3\'ac
\'cb\'fc\'b2\'e9\'bf\'b4\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'b1\'ed}{\hich\af0\dbch\af17\loch\f0 (sys_call_table)}{\loch\af0\hich\af0\dbch\f17 \'d5\'d2\'b5\'bd\'cb\'f9\'b5\'f7\'d3\'c3\'b5\'c4\'c4\'da\'ba\'cb\'ba\'af\'ca\'fd\'c8\'eb\'bf\'da
\loch\af0\hich\af0\dbch\f17 \'b5\'d8\'d6\'b7\'a1\'a3\'bd\'d3\'d7\'c5\'a3\'ac\'be\'cd\'b5\'f7\'d3\'c3\'ba\'af\'ca\'fd\'a3\'ac\'b5\'c8\'b7\'b5\'bb\'d8\'ba\'f3\'a3\'ac\'d7\'f6\'d2\'bb\'d0\'a9\'cf\'b5\'cd\'b3\'bc\'ec\'b2\'e9\'a3\'ac\'d7\'ee\'ba\'f3\'b7\'b5
\'bb\'d8\'b5\'bd\'bd\'f8\'b3\'cc\'a3\'a8\'bb\'f2\'b5\'bd\'c6\'e4\'cb\'fb\'bd\'f8\'b3\'cc\'a3\'ac\'c8\'e7\'b9\'fb\'d5\'e2\'b8\'f6\'bd\'f8\'b3\'cc\'ca\'b1\'bc\'e4\'d3\'c3\'be\'a1\'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'c4\'e3\'cf\'a3
\'cd\'fb\'b6\'c1\'d5\'e2\'b6\'ce\'b4\'fa\'c2\'eb\'a3\'ac\'cb\'fc\'d4\'da\'d4\'b4\'ce\'c4\'bc\'fe\'c4\'bf\'c2\'bc}{\hich\af0\dbch\af17\loch\f0 /<architecture>/kernel/entry.S}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac}{\hich\af0\dbch\af17\loch\f0 
Entry(system_call)}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'cf\'c2\'d2\'bb\'d0\'d0\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'cb\'f9\'d2\'d4\'a3\'ac\'c8\'e7\'b9\'fb\'ce\'d2\'c3\'c7\'cf\'a3\'cd\'fb\'b8\'c4\'b1\'e4\'c4\'b3\'b8\'f6\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'b5\'c4\'b9\'a4\'d7\'f7\'b7\'bd\'ca\'bd\'a3\'ac\'ce\'d2\'c3\'c7\'d0\'e8\'d2\'aa\'d0\'b4
\'ce\'d2\'c3\'c7\'d7\'d4\'bc\'ba\'b5\'c4\'ba\'af\'ca\'fd\'a3\'a8\'cd\'a8\'b3\'a3\'ca\'c7\'bc\'d3\'d2\'bb\'b5\'e3\'ce\'d2\'c3\'c7\'d7\'d4\'bc\'ba\'b5\'c4\'b4\'fa\'c2\'eb\'c8\'bb\'ba\'f3\'b5\'f7\'d3\'c3\'d4\'ad\'c0\'b4\'b5\'c4\'ba\'af\'ca\'fd\'a3\'a9
\'c0\'b4\'ca\'b5\'cf\'d6\'a3\'ac\'c8\'bb\'ba\'f3\'b8\'c4\'b1\'e4}{\hich\af0\dbch\af17\loch\f0 sys_call_table}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'b5\'c4\'d6\'b8\'d5\'eb\'ca\'b9\'c6\'e4\'d6\'b8\'cf\'f2\'ce\'d2\'c3\'c7\'b5\'c4\'ba\'af\'ca\'fd\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'d2\'f2\'ce\'aa\'ce\'d2\'c3\'c7\'bf\'c9\'c4\'dc\'d2\'d4\'ba\'f3\'bb\'e1\'c9\'be\'b3\'fd\'a3\'ac\'b6\'f8\'c7\'d2\'b2\'bb\'cf\'a3\'cd\'fb\'cf\'b5\'cd\'b3\'b4\'a6\'d4\'da\'b2\'bb\'ce\'c8\'b6\'a8\'d7\'b4\'cc\'ac\'a3\'ac\'cb\'f9
\'d2\'d4\'d4\'da}{\hich\af0\dbch\af17\loch\f0 cleanu\hich\af0\dbch\af17\loch\f0 p_module}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'b1\'a3\'b4\'e6\'b8\'c3\'b1\'ed\'b5\'c4\'d4\'ad\'c0\'b4\'d7\'b4\'cc\'ac\'ba\'dc\'d6\'d8\'d2\'aa\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'c0\'ef\'b5\'c4\'d4\'b4\'b4\'fa\'c2\'eb\'ca\'c7\'d2\'bb\'b8\'f6\'d5\'e2\'d1\'f9\'b5\'c4\'ba\'cb\'d0\'c4\'c4\'a3\'bf\'e9\'b5\'c4\'c0\'fd\'d7\'d3\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'c3\'c7\'cf\'a3\'cd\'fb
\'a1\'b0\'bf\'fa\'cc\'bd\'a1\'b1\'d2\'bb\'b8\'f6\'d3\'c3\'bb\'a7\'a3\'ac\'c3\'bf\'b5\'b1\'d5\'e2\'b8\'f6\'d3\'c3\'bb\'a7\'b4\'f2\'bf\'aa\'d2\'bb\'b8\'f6\'ce\'c4\'bc\'fe\'ca\'c7\'be\'cd}{\hich\af0\dbch\af17\loch\f0 printk}{\loch\af0\hich\af0\dbch\f17 
\'d2\'bb\'cc\'f5\'cf\'fb\'cf\'a2\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'ce\'aa\'b4\'ef\'b5\'bd\'d5\'e2\'b8\'f6\'c4\'bf\'b5\'c4\'a3\'ac\'ce\'d2\'c3\'c7\'b0\'d1\'b4\'f2\'bf\'aa\'ce\'c4\'bc\'fe\'b5\'c4\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'cc\'e6\'bb\'bb\'ce\'aa
\'ce\'d2\'c3\'c7\'d7\'d4\'bc\'ba\'b5\'c4\'ba\'af\'ca\'fd\'a3\'ac}{\hich\af0\dbch\af17\loch\f0 our_sys_open}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'ba\'af\'ca\'fd\'bc\'ec\'b2\'e9\'b5\'b1\'c7\'b0\'bd\'f8\'b3\'cc
\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 uid}{\loch\af0\hich\af0\dbch\f17 \'a3\'a8\'d3\'c3\'bb\'a7\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 id}{\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'a3\'ac\'c8\'e7\'b9\'fb\'cb\'fc\'b5\'c8\'d3\'da\'ce\'d2\'c3\'c7\'d2\'aa\'bf\'fa
\'cc\'bd\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 uid}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'be\'cd\'b5\'f7\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 printk}{\loch\af0\hich\af0\dbch\f17 \'c0\'b4\'cf\'d4\'ca\'be\'cb\'f9\'b4\'f2\'bf\'aa\'ce\'c4\'bc\'fe\'b5\'c4
\'ce\'c4\'bc\'fe\'c3\'fb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'bb\'ba\'f3\'a3\'ac\'bf\'c9\'d2\'d4\'d3\'c3\'c8\'ce\'ba\'ce\'d2\'bb\'d6\'d6\'b7\'bd\'b7\'a8\'a3\'ac\'d3\'c3\'cd\'ac\'d1\'f9\'b5\'c4\'b2\'ce\'ca\'fd\'b5\'f7\'d3\'c3\'d4\'ad\'c0\'b4\'b5\'c4}{
\hich\af0\dbch\af17\loch\f0 open}{\loch\af0\hich\af0\dbch\f17 \'ba\'af\'ca\'fd\'a3\'ac\'bb\'f2\'d5\'df\'d5\'e6\'d5\'fd\'b4\'f2\'bf\'aa\'ce\'c4\'bc\'fe\'a1\'a3}{\tab 
\par \hich\af0\dbch\af17\loch\f0 Init_module}{\loch\af0\hich\af0\dbch\f17 \'ba\'af\'ca\'fd\'b0\'d1}{\hich\af0\dbch\af17\loch\f0 sys_call_table}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'b5\'c4\loch\af0\hich\af0\dbch\f17 \'ca\'ca\'b5\'b1\'b5\'d8\'d6\'b7\'c9\'cf
\'b5\'c4\'c4\'da\'c8\'dd\'cc\'e6\'bb\'bb\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'b0\'d1\'d4\'ad\'c0\'b4\'b5\'c4\'d6\'b8\'d5\'eb\'b1\'a3\'b4\'e6\'d4\'da\'d2\'bb\'b8\'f6\'b1\'e4\'c1\'bf\'c0\'ef\'a1\'a3}{\hich\af0\dbch\af17\loch\f0 
Cleanup_module}{\loch\af0\hich\af0\dbch\f17 \'ba\'af\'ca\'fd\'d3\'c3\'d5\'e2\'d0\'a9\'b1\'e4\'c1\'bf\'bb\'d6\'b8\'b4\'cb\'f9\'d3\'d0\'b5\'c4\'b6\'ab\'ce\'f7\'a1\'a3\'d5\'e2\'d6\'d6\'b7\'bd\'b7\'a8\'ca\'c7\'ce\'a3\'cf\'d5\'b5\'c4\'a3\'ac\'d2\'f2\'ce\'aa
\'c1\'bd\'b8\'f6\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'bf\'c9\'c4\'dc\'b8\'c4\'b1\'e4\'c1\'cb\'cd\'ac\'d2\'bb\'b8\'f6\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c9\'e8\'cf\'eb\'ce\'d2\'c3\'c7\'d3\'c9\'c1\'bd\'b8\'f6\'c4\'da\'ba\'cb
\'c4\'a3\'bf\'e9\'a3\'ac}{\hich\af0\dbch\af17\loch\f0 A}{\loch\af0\hich\af0\dbch\f17 \'ba\'cd}{\hich\af0\dbch\af17\loch\f0 B}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3}{\hich\af0\dbch\af17\loch\f0 A}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4}{
\hich\af0\dbch\af17\loch\f0 open}{\loch\af0\hich\af0\dbch\f17 \'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 A_open}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac}{\hich\af0\dbch\af17\loch\f0 B}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4}{
\hich\af0\dbch\af17\loch\f0 open}{\loch\af0\hich\af0\dbch\f17 \'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 B_open}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\'cf\'d6\'d4\'da\'a3\'ac\'c8\'e7\'b9\'fb}{\hich\af0\dbch\af17\loch\f0 A}{
\loch\af0\hich\af0\dbch\f17 \'b2\'e5\'c8\'eb\'c4\'da\'ba\'cb\'a3\'ac\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'bd\'ab\'b1\'bb\'cc\'e6\'bb\'bb\'ce\'aa}{\hich\af0\dbch\af17\loch\f0 A_open}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'b5\'b1\'cd\'ea\'b3\'c9\'d2\'d4\'ba\'f3
\'b5\'f7\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 sys_open}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'bb\'ba\'f3\'a3\'ac}{\hich\af0\dbch\af17\loch\f0 B}{\loch\af0\hich\af0\dbch\f17 \'b1\'bb\'b2\'e5\'c8\'eb\'c4\'da\'ba\'cb\'a3\'ac
\'b0\'d1\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'cc\'e6\'bb\'bb\'ce\'aa}{\hich\af0\dbch\af17\loch\f0 B_open}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'b6\'f8\'cd\'ea\'b3\'c9\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'cb\'fc\'bd\'ab\'bb\'e1\'b5\'f7\'d3\'c3\'cb\'fc\'c8\'cf
\'ce\'aa\'d4\'ad\'ca\'bc\'b5\'c4\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 A_open}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'c4\'c7\'c3\'b4\'a3\'ac\'c8\'e7\'b9\'fb}{\hich\af0\dbch\af17\loch\f0 B}{\loch\af0\hich\af0\dbch\f17 \'b1\'bb\'ca\'d7\'cf\'c8\'c9\'be\'b3\'fd\'a3\'ac\'b2\'bb\'bb\'e1\'b3\'f6\'cf\'d6\'c8\'ce\'ba\'ce\'b4\'ed
\loch\af0\hich\af0\dbch\f17 \'ce\'f3}{\loch\af0\dbch\af17\hich\f0 \emdash \emdash }{\loch\af0\hich\af0\dbch\f17 \'cb\'fc\'d6\'bb\'ca\'c7\'b0\'d1\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'bb\'d6\'b8\'b4\'b3\'c9}{\hich\af0\dbch\af17\loch\f0 A_open}{
\loch\af0\hich\af0\dbch\f17 \'a3\'ac}{\hich\af0\dbch\af17\loch\f0 A_open}{\loch\af0\hich\af0\dbch\f17 \'d4\'d9\'c8\'a5\'b5\'f7\'d3\'c3\'d4\'ad\'ca\'bc\'b5\'c4\'b5\'c4\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'bb\'b6\'f8
\'a3\'ac\'c8\'e7\'b9\'fb\'cf\'c8\'c9\'be\'b3\'fd}{\hich\af0\dbch\af17\loch\f0 A}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'d4\'d9\'c9\'be\'b3\'fd}{\hich\af0\dbch\af17\loch\f0 B}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'cf\'b5\'cd\'b3\'be\'cd\'bb\'e1\'b1\'c0
\'c0\'a3\'a1\'a3}{\hich\af0\dbch\af17\loch\f0 A}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'c9\'be\'b3\'fd\'bd\'ab\'bb\'e1\'b0\'d1\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'bb\'d6\'b8\'b4\'b3\'c9}{\hich\af0\dbch\af17\loch\f0 sys_open}{\loch\af0\hich\af0\dbch\f17 
\'a3\'ac\'b6\'f8\'b0\'d1}{\hich\af0\dbch\af17\loch\f0 B}{\loch\af0\hich\af0\dbch\f17 \'c7\'d0\'bb\'bb\'b3\'f6\'c1\'cb\'d1\'ad\'bb\'b7\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'bb\'ba\'f3\'a3\'ac\'b5\'b1}{\hich\af0\dbch\af17\loch\f0 B}{
\loch\af0\hich\af0\dbch\f17 \'b1\'bb\'c9\'be\'b3\'fd\'ca\'b1\'a3\'ac\'bd\'ab\'bb\'e1\'b0\'d1\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'bb\'d6\'b8\'b4\'b3\'c9}{\hich\af0\dbch\af17\loch\f0 A_open}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'b5\'ab\'ca\'c7}{
\hich\af0\dbch\af17\loch\f0 A_open}{\loch\af0\hich\af0\dbch\f17 \'d2\'d1\'be\'ad\'b2\'bb\'d4\'da\'c4\'da\'b4\'e6\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b3\'f5\'bf\'b4\'c0\'b4\'a3\'ac\'cb\'c6\'ba\'f5\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'cd\'a8\'b9\'fd\'bc\'ec
\'b2\'e9\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'ca\'c7\'b7\'f1\'b5\'c8\'d3\'da\'ce\'d2\'c3\'c7\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 open}{\loch\af0\hich\af0\dbch\f17 \'ba\'af\'ca\'fd\'c0\'b4\'bd\'e2\'be\'f6\'d5\'e2\'b8\'f6\'ce\'ca\'cc\'e2\'a3\'ac\'c8\'e7
\'b9\'fb\'ca\'c7\'be\'cd\'b2\'bb\'d2\'aa\'b8\'c4\'b1\'e4\'cb\'fc\'a3\'a8\'d5\'e2\'d1\'f9}{\hich\af0\dbch\af17\loch\f0 B}{\loch\af0\hich\af0\dbch\f17 \'b1\'bb\'c9\'be\'b3\'fd\'b5\'c4\'ca\'b1\'ba\'f2\'be\'cd\'b2\'bb\'bb\'e1\'b8\'c4\'b1\'e4\'cf\'b5\'cd\'b3
\'b5\'f7\'d3\'c3\'a3\'a9\'a3\'ac\'b5\'ab\'ca\'c7\'d5\'e2\'d1\'f9\'bb\'e1\'d2\'fd\'c6\'f0\'d2\'bb\'b8\'f6\'b8\'fc\'bc\'d3\'b6\'f1\'c1\'d3\'b5\'c4\'ce\'ca\'cc\'e2\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b5\'b1}{\hich\af0\dbch\af17\loch\f0 A}{
\loch\af0\hich\af0\dbch\f17 \'b1\'bb\'c9\'be\'b3\'fd\'ca\'b1\'a3\'ac\'cb\'fc\'bf\'b4\'b5\'bd\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'b1\'bb\'b8\'c4\'b3\'c9\'c1\'cb}{\hich\af0\dbch\af17\loch\f0 B_open}{\loch\af0\hich\af0\dbch\f17 \'b6\'f8\'b2\'bb\'d4\'d9\'d6\'b8
\'cf\'f2}{\hich\af0\dbch\af17\loch\f0 A_op\hich\af0\dbch\af17\loch\f0 en}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'cb\'f9\'d2\'d4\'d4\'da\'cb\'fc\'b1\'bb\'c9\'be\'b3\'fd\'ca\'b1\'be\'cd\'b2\'bb\'bb\'e1\'bb\'d6\'b8\'b4}{\hich\af0\dbch\af17\loch\f0 sys_open}{
\loch\af0\hich\af0\dbch\f17 \'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b2\'bb\'d0\'d2\'b5\'c4\'ca\'c7\'a3\'ac}{\hich\af0\dbch\af17\loch\f0 B_open}{\loch\af0\hich\af0\dbch\f17 \'c8\'d4\'c8\'bb\'ca\'d4\'cd\'bc\'bb\'d6\'b8\'b4}{\hich\af0\dbch\af17\loch\f0 A_open}
{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'b5\'ab\'cb\'fc\'d2\'d1\'b2\'bb\'d4\'d9\'c4\'da\'b4\'e6\'a3\'ac\'d5\'e2\'d1\'f9\'a3\'ac\'bc\'b4\'ca\'b9\'c3\'bb\'d3\'d0\'c9\'be\'b3\'fd}{\hich\af0\dbch\af17\loch\f0 B}{\loch\af0\hich\af0\dbch\f17 \'cf\'b5\'cd\'b3
\'d2\'b2\'bb\'e1\'b1\'c0\'c0\'a3\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'bf\'c9\'d2\'d4\'cc\'e1\'b3\'f6\'c1\'bd\'b8\'f6\'b7\'bd\'b7\'a8\'c0\'b4\'bd\'e2\'be\'f6\'d5\'e2\'b8\'f6\'ce\'ca\'cc\'e2\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b5\'da\'d2\'bb\'b8\'f6\'b7\'bd\'b7\'a8\'ca\'c7\'b0\'d1
\'b5\'f7\'d3\'c3\'bb\'d6\'b8\'b4\'b3\'c9\'d4\'ad\'ca\'bc\'d6\'b5\'a3\'ac}{\hich\af0\dbch\af17\loch\f0 sys_open}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\'b2\'bb\'d0\'d2\'b5\'c4\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 sys_open}{\loch\af0\hich\af0\dbch\f17 
\'b2\'bb\'ca\'c7\'d4\'da}{\hich\af0\dbch\af17\loch\f0 /proc/ksyms}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'b5\'c4\'c4\'da\'ba\'cb\'cf\'b5\'cd\'b3\'b1\'ed\'d6\'d0\'b5\'c4\'d2\'bb\'b2\'bf\'b7\'d6\'a3\'ac\'cb\'f9\'d2\'d4\'ce\'d2\'c3\'c7\'b2\'bb\'c4\'dc\'b7\'c3
\'ce\'ca\'cb\'fc\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c1\'ed\'d2\'bb\'b8\'f6\'bd\'e2\'be\'f6\'b0\'ec\'b7\'a8\'ca\'c7\'ca\'b9\'d3\'c3\'cb\'f7\'d2\'fd\'bc\'c6\'ca\'fd\'c6\'f7\'c0\'b4\'d7\'e8\'d6\'b9}{\hich\af0\dbch\af17\loch\f0 root }{
\loch\af0\hich\af0\dbch\f17 \'c8\'a5}{\hich\af0\dbch\af17\loch\f0 rmmod}{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'c4\'a3\'bf\'e9\'a3\'ac\'d2\'bb\'b5\'a9\'cb\'fc\'b1\'bb\'d7\'b0\'d4\'d8\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'d4\'da\'c9\'fa
\'b2\'fa\'d0\'d4\'c4\'a3\'bf\'e9\'d6\'d0\'ca\'c7\'ba\'c3\'b5\'c4\'a3\'ac\'b5\'ab\'ca\'c7\'b6\'d4\'bd\'cc\'d1\'a7\'c0\'ef\'d6\'d0\'b2\'bb\'ca\'c7\'ba\'dc\'ba\'c3}{\loch\af0\dbch\af17\hich\f0 \emdash \emdash }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'be\'cd
\'ca\'c7\'ce\'aa\'ca\'b2\'c3\'b4\'ce\'d2\'b2\'bb\'d4\'da\'d5\'e2\'c0\'ef\'d5\'e2\'d1\'f9\'d7\'f6\'a1\'a3}{
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\hich\af0\dbch\af17\loch\f0 ex }{\b \hich\af0\dbch\af17\loch\f0 syscall.c \~\~ }{\b\kerning0 
\par }{\hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0 /* syscall.c 
\par \hich\af0\dbch\af17\loch\f0  * 
\par \hich\af0\dbch\af17\loch\f0  * System call "stealing" sample
\par \hich\af0\dbch\af17\loch\f0  */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Copyright (C) 1998-99 by Ori Pomerantz */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The necessary header files */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Standard in kernel modules */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/kernel.h>   /* We're doing kernel work */
\par \hich\af0\dbch\af17\loch\f0 #include <l\hich\af0\dbch\af17\loch\f0 inux/module.h>   /* Specifically, a module */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Deal with CONFIG_MODVERSIONS */
\par \hich\af0\dbch\af17\loch\f0 #if CONFIG_MODVERSIONS==1
\par \hich\af0\dbch\af17\loch\f0 #define MODVERSIONS
\par \hich\af0\dbch\af17\loch\f0 #include <linux/modversions.h>
\par \hich\af0\dbch\af17\loch\f0 #endif        
\par 
\par \hich\af0\dbch\af17\loch\f0 #include <sys/syscall.h>  /* The list of system calls */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* For the current (pro\hich\af0\dbch\af17\loch\f0 cess) structure, we need
\par \hich\af0\dbch\af17\loch\f0  * this to know who the current user is. */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/sched.h>  
\par 
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* In 2.2.3 /usr/include/linux/version.h includes a 
\par \hich\af0\dbch\af17\loch\f0  * macro for this, but 2.0.35 doesn't - so I add it 
\par \hich\af0\dbch\af17\loch\f0  * here if necessary. */
\par \hich\af0\dbch\af17\loch\f0 #ifndef KERNEL_VERSION
\par \hich\af0\dbch\af17\loch\f0 #define KERNEL_VERSION(a,b,c) ((a)*65536+(b)*256+(c))
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 #include <asm/uaccess.h>
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The system call table (a table of functions). We 
\par \hich\af0\dbch\af17\loch\f0  * just define this as external, and the kernel will 
\par \hich\af0\dbch\af17\loch\f0  *\hich\af0\dbch\af17\loch\f0  fill it up for us when we are insmod'ed 
\par \hich\af0\dbch\af17\loch\f0  */
\par \hich\af0\dbch\af17\loch\f0 extern void *sys_call_table[];
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* UID we want to spy on - will be filled from the 
\par \hich\af0\dbch\af17\loch\f0  * command line */
\par \hich\af0\dbch\af17\loch\f0 int uid;  
\par 
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 MODULE_PARM(uid, "i");
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par \hich\af0\dbch\af17\loch\f0 /* A pointer to the original system call. The reason 
\par \hich\af0\dbch\af17\loch\f0  * we keep this, rather than call the original function 
\par \hich\af0\dbch\af17\loch\f0  * (sys_open), is because somebody else might have 
\par \hich\af0\dbch\af17\loch\f0  * replaced the system call before us. Note that this 
\par \hich\af0\dbch\af17\loch\f0  * is not 100% safe, because if anothe\hich\af0\dbch\af17\loch\f0 r module 
\par \hich\af0\dbch\af17\loch\f0  * replaced sys_open before us, then when we're inserted 
\par \hich\af0\dbch\af17\loch\f0  * we'll call the function in that module - and it 
\par \hich\af0\dbch\af17\loch\f0  * might be removed before we are.
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * Another reason for this is that we can't get sys_open.
\par \hich\af0\dbch\af17\loch\f0  * It's a static variable, so it is not \hich\af0\dbch\af17\loch\f0 exported. */
\par \hich\af0\dbch\af17\loch\f0 asmlinkage int (*original_call)(const char *, int, int);
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* For some reason, in 2.2.3 current->uid gave me 
\par \hich\af0\dbch\af17\loch\f0  * zero, not the real user ID. I tried to find what went 
\par \hich\af0\dbch\af17\loch\f0  * wrong, but I couldn't do it in a short time, and 
\par \hich\af0\dbch\af17\loch\f0  * I'm lazy - so I'll\hich\af0\dbch\af17\loch\f0  just use the system call to get the 
\par \hich\af0\dbch\af17\loch\f0  * uid, the way a process would. 
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * For some reason, after I recompiled the kernel this 
\par \hich\af0\dbch\af17\loch\f0  * problem went away. 
\par \hich\af0\dbch\af17\loch\f0  */
\par \hich\af0\dbch\af17\loch\f0 asmlinkage int (*getuid_call)();
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The function we'll replace sys_open (the function 
\par \hich\af0\dbch\af17\loch\f0  * called when you call the open system call) with. To 
\par \hich\af0\dbch\af17\loch\f0  * find the exact prototype, with the number and type 
\par \hich\af0\dbch\af17\loch\f0  * of arguments, we find the original function first 
\par \hich\af0\dbch\af17\loch\f0  * (it's at fs/open.c). 
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * In theory, this means that we're tied to the 
\par \hich\af0\dbch\af17\loch\f0  * current ver\hich\af0\dbch\af17\loch\f0 sion of the kernel. In practice, the 
\par \hich\af0\dbch\af17\loch\f0  * system calls almost never change (it would wreck havoc 
\par \hich\af0\dbch\af17\loch\f0  * and require programs to be recompiled, since the system
\par \hich\af0\dbch\af17\loch\f0  * calls are the interface between the kernel and the 
\par \hich\af0\dbch\af17\loch\f0  * processes).
\par \hich\af0\dbch\af17\loch\f0  */
\par \hich\af0\dbch\af17\loch\f0 asmlinkage int our_sys_ope\hich\af0\dbch\af17\loch\f0 n(const char *filename, 
\par \hich\af0\dbch\af17\loch\f0                             int flags, 
\par \hich\af0\dbch\af17\loch\f0                             int mode)
\par \{
\par \hich\af0\dbch\af17\loch\f0   int i = 0;
\par \hich\af0\dbch\af17\loch\f0   char ch;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Check if this is the user we're spying on */
\par \hich\af0\dbch\af17\loch\f0   if (uid == getuid_call()) \{  
\par \hich\af0\dbch\af17\loch\f0    /* getuid_call is the getuid system call,\hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0     * which gives the uid of the user who
\par \hich\af0\dbch\af17\loch\f0     * ran the process which called the system
\par \hich\af0\dbch\af17\loch\f0     * call we got */
\par 
\par \hich\af0\dbch\af17\loch\f0     /* Report the file, if relevant */
\par \hich\af0\dbch\af17\loch\f0     printk("Opened file by %d: ", uid); 
\par \hich\af0\dbch\af17\loch\f0     do \{
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0       get_user(ch, filename+i);
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0       ch = get_user(filename+i);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \hich\af0\dbch\af17\loch\f0       i++;
\par \hich\af0\dbch\af17\loch\f0       printk("%c", ch);
\par \hich\af0\dbch\af17\loch\f0     \} while (ch != 0);
\par \hich\af0\dbch\af17\loch\f0     printk("\\n");
\par \hich\af0\dbch\af17\loch\f0   \}
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Call the original sys_open - otherwise, we lose 
\par \hich\af0\dbch\af17\loch\f0    * the ability to open files */
\par \hich\af0\dbch\af17\loch\f0   return \hich\af0\dbch\af17\loch\f0 original_call(filename, flags, mode);
\par \}
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Initialize the module - replace the system call */
\par \hich\af0\dbch\af17\loch\f0 int init_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* Warning - too late for it now, but maybe for 
\par \hich\af0\dbch\af17\loch\f0    * next time... */
\par \hich\af0\dbch\af17\loch\f0   printk("I'm dangerous. I hope you did a ");
\par \hich\af0\dbch\af17\loch\f0   printk("sync before you insmod'ed me.\\n");
\par \hich\af0\dbch\af17\loch\f0   printk("My counterpart, cleanup_module(), is even"); 
\par \hich\af0\dbch\af17\loch\f0   printk("more dangerous. If\\n");
\par \hich\af0\dbch\af17\loch\f0   printk("you value your file system, it will ");
\par \hich\af0\dbch\af17\loch\f0   printk("be \\"sync; rmmod\\" \\n");
\par \hich\af0\dbch\af17\loch\f0   printk("when you remove this modul\hich\af0\dbch\af17\loch\f0 e.\\n");
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Keep a pointer to the original function in 
\par \hich\af0\dbch\af17\loch\f0    * original_call, and then replace the system call 
\par \hich\af0\dbch\af17\loch\f0    * in the system call table with our_sys_open */
\par \hich\af0\dbch\af17\loch\f0   original_call = sys_call_table[__NR_open];
\par \hich\af0\dbch\af17\loch\f0   sys_call_table[__NR_open] = our_sys_open;
\par 
\par \hich\af0\dbch\af17\loch\f0   /\hich\af0\dbch\af17\loch\f0 * To get the address of the function for system 
\par \hich\af0\dbch\af17\loch\f0    * call foo, go to sys_call_table[__NR_foo]. */
\par 
\par \hich\af0\dbch\af17\loch\f0   printk("Spying on UID:%d\\n", uid);
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Get the system call for getuid */
\par \hich\af0\dbch\af17\loch\f0   getuid_call = sys_call_table[__NR_getuid];
\par 
\par \hich\af0\dbch\af17\loch\f0   return 0;
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Cleanup - unre\hich\af0\dbch\af17\loch\f0 gister the appropriate file from /proc */
\par \hich\af0\dbch\af17\loch\f0 void cleanup_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* Return the system call back to normal */
\par \hich\af0\dbch\af17\loch\f0   if (sys_call_table[__NR_open] != our_sys_open) \{
\par \hich\af0\dbch\af17\loch\f0     printk("Somebody else also played with the ");
\par \hich\af0\dbch\af17\loch\f0     printk("open system call\\n");
\par \hich\af0\dbch\af17\loch\f0     printk("The system may be left in ");
\par \hich\af0\dbch\af17\loch\f0     printk("an unstable state.\\n");
\par \hich\af0\dbch\af17\loch\f0   \}
\par 
\par \hich\af0\dbch\af17\loch\f0   sys_call_table[__NR_open] = original_call;
\par \}
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard\plain \s1\qj \li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281305}
\hich\af0\dbch\af17\loch\f0 8}{\fs36 \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'d7\'e8\'c8\'fb\'bd\'f8\'b3\'cc}{\fs36 {\*\bkmkend _Toc491281305}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'d3\'d0\'c8\'cb
\'c8\'c3\'c4\'e3\'d7\'f6\'c4\'e3\'d2\'bb\'ca\'b1\'d7\'f6\'b2\'bb\'b5\'bd\'b5\'c4\'ca\'c2\'c7\'e9\'c4\'e3\'bb\'e1\'d4\'f5\'c3\'b4\'b0\'ec\'c4\'d8\'a3\'bf\'c8\'e7\'b9\'fb\'c4\'e3\'ca\'c7\'b8\'f6\'c8\'cb\'b1\'bb\'c1\'ed\'d2\'bb\'b8\'f6\'c8\'cb\'b4\'f2
\'c8\'c5\'a3\'ac\'c4\'e3\'ce\'a8\'d2\'bb\'bf\'c9\'d2\'d4\'d7\'f6\'b5\'c4\'be\'cd\'ca\'c7\'b6\'d4\'cb\'fb\'cb\'b5\'a3\'ba\'a1\'b0\'cf\'d6\'d4\'da\'b2\'bb\'d0\'d0\'a3\'ac\'ce\'d2\'ba\'dc\'c3\'a6\'a3\'ac\'d7\'df\'bf\'aa\'a3\'a1\'a1\'b1
\loch\af0\hich\af0\dbch\f17 \'b5\'ab\'ca\'c7\'c8\'e7\'b9\'fb\'c4\'e3\'ca\'c7\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'a3\'ac\'b1\'bb\'bd\'f8\'b3\'cc\'b4\'f2\'c8\'c5\'a3\'ac\'c4\'e3\'be\'cd\'d3\'d0\'c1\'ed\'d2\'bb\'d6\'d6\'d1\'a1\'d4\'f1\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'c4\'e3\'bf\'c9\'d2\'d4\'c8\'c3\'d5\'e2\'b8\'f6\'bd\'f8\'b3\'cc\'c8\'a5\'b9\'d2\'c6\'f0\'d6\'b1\'b5\'bd\'c4\'e3\'bf\'c9\'d2\'d4\'ce\'aa\'d6\'ae\'cc\'e1\'b9\'a9\'b7\'fe\'ce\'f1\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b1\'cf
\'be\'b9\'a3\'ac\'bd\'f8\'b3\'cc\'ca\'c7\'d4\'da\'b2\'bb\'cd\'a3\'b5\'c4\'b1\'bb\'c4\'da\'ba\'cb\'b9\'d2\'c6\'f0\'bb\'f2\'bb\'bd\'d0\'d1\'a3\'a8\'d5\'e2\'be\'cd\'ca\'c7\'b6\'e0\'b8\'f6\'bd\'f8\'b3\'cc\'bf\'b4\'c9\'cf\'c8\'a5\'cd\'ac\'ca\'b1\'d4\'da
\'d2\'bb\'b8\'f6\'b4\'a6\'c0\'ed\'c6\'f7\'c9\'cf\'d4\'cb\'d0\'d0\'b5\'c4\'b7\'bd\'b7\'a8\'a3\'a9\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'be\'cd\'ca\'c7\'d2\'bb\'b8\'f6\'d5\'e2\'d1\'f9\'b5\'c4\'c0\'fd\'d7\'d3\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'ce\'c4\'bc\'fe\'a3\'a8\'b3\'c6\'d7\'f7}{
\hich\af0\dbch\af17\loch\f0 /proc/sleep}{\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'d4\'da\'d2\'bb\'b8\'f6\'ca\'b1\'bf\'cc\'d6\'bb\'c4\'dc\'b1\'bb\'d2\'bb\'b8\'f6\'bd\'f8\'b3\'cc\'b4\'f2\'bf\'aa\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'d5\'e2
\'b8\'f6\'ce\'c4\'bc\'fe\'d2\'d1\'be\'ad\'b1\'bb\'b4\'f2\'bf\'aa\'a3\'ac\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'be\'cd\'b5\'f7\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 module_interruptible_sleep_on}{\loch\af0\hich\af0\dbch\f17 \'a3\'a8\'d7\'a2}{
\hich\af0\dbch\af17\loch\f0 8.1}{\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'a1\'a3\'d5\'e2\'b8\'f6\'ba\'af\'ca\'fd\'b0\'d1\'c8\'ce\'ce\'f1\'a3\'a8\'d2\'bb\'b8\'f6\'c8\'ce\'ce\'f1\'ca\'c7\'d2\'bb\'b8\'f6\'c4\'da\'ba\'cb\'ca\'fd\'be\'dd\'bd\'e1\'b9\'b9\'a3\'ac
\'cb\'fc\'b0\'fc\'ba\'ac\'bd\'f8\'b3\'cc\'d2\'d4\'bc\'b0\'cb\'fc\'cb\'f9\'d4\'da\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'b5\'c4\'d0\'c5\'cf\'a2\'a3\'a9\'b5\'c4\'d7\'b4\'cc\'ac\'b8\'c4\'b1\'e4\'b3\'c9}{\hich\af0\dbch\af17\loch\f0 TASK_INTER
\hich\af0\dbch\af17\loch\f0 RUPTIBLE}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'b1\'ed\'ca\'be\'d6\'b1\'b5\'bd\'b1\'bb\'bb\'bd\'d0\'d1\'c8\'ce\'ce\'f1\'b2\'bb\'bb\'e1\'d4\'cb\'d0\'d0\'a3\'ac\'b2\'a2\'c7\'d2\'b0\'d1\'cb\'fc\'bc\'d3\'c8\'eb\'b5\'bd}{
\hich\af0\dbch\af17\loch\f0 WaitQ\hich\f0 \emdash \emdash }{\loch\af0\hich\af0\dbch\f17 \'b5\'c8\'b4\'fd\'b7\'c3\'ce\'ca\'ce\'c4\'bc\'fe\'b5\'c4\'c8\'ce\'ce\'f1\'b6\'d3\'c1\'d0\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c4\'c7\'c3\'b4\'a3\'ac\'d5\'e2\'b8\'f6
\'ba\'af\'ca\'fd\'b5\'f7\'d3\'c3\'b5\'f7\'b6\'c8\'c6\'f7\'bd\'f8\'d0\'d0\'c9\'cf\'cf\'c2\'ce\'c4\'c7\'d0\'bb\'bb\'b5\'bd\'c6\'e4\'cb\'fb\'d2\'aa\'ca\'b9\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'bd\'f8\'b3\'cc\'a1\'a3
}{
\par }{\loch\af0\hich\af0\dbch\f17 \'b5\'b1\'bd\'f8\'b3\'cc\'cd\'ea\'b3\'c9\'b6\'d4\'ce\'c4\'bc\'fe\'b5\'c4\'b4\'a6\'c0\'ed\'ba\'f3\'a3\'ac\'b9\'d8\'b1\'d5\'b8\'c3\'ce\'c4\'bc\'fe\'b2\'a2\'c7\'d2\'b5\'f7\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 module_ close}{
\loch\af0\hich\af0\dbch\f17 \'a1\'a3\'d5\'e2\'b8\'f6\'ba\'af\'ca\'fd\'bb\'bd\'d0\'d1\'cb\'f9\'d3\'d0\'b6\'d3\'c1\'d0\'d6\'d0\'b5\'c4\'bd\'f8\'b3\'cc\'a3\'a8\'bb\'b9\'c3\'bb\'d3\'d0\'d2\'bb\'b8\'f6\'bb\'fa\'d6\'c6\'bb\'bd\'d0\'d1\'c6\'e4\'d6\'d0\'d2\'bb
\'b8\'f6\'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'bb\'ba\'f3\'b7\'b5\'bb\'d8\'a3\'ac\'b8\'d5\'b2\'c5\'b9\'d8\'b1\'d5\'ce\'c4\'bc\'fe\'b5\'c4\'bd\'f8\'b3\'cc\'bf\'c9\'d2\'d4\'bc\'cc\'d0\'f8\'d4\'cb\'d0\'d0\'a1\'a3\loch\af0\hich\af0\dbch\f17 
\'b5\'f7\'b6\'c8\'c6\'f7\'bc\'b0\'ca\'b1\'be\'f6\'b6\'a8\'c4\'c4\'b8\'f6\'bd\'f8\'b3\'cc\'d2\'d1\'be\'ad\'cd\'ea\'b3\'c9\'a3\'ac\'b2\'a2\'c7\'d2\'b0\'d1}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'bf\'d8\'d6\'c6\'b8\'f8\'c1\'ed
\'d2\'bb\'b8\'f6\'bd\'f8\'b3\'cc\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'cd\'ac\'ca\'b1\'a3\'ac\'b6\'d3\'c1\'d0\'d6\'d0\'b5\'c4\'c4\'b3\'b8\'f6\'bd\'f8\'b3\'cc\'bd\'ab\'bb\'e1\'b4\'d3\'b5\'f7\'b6\'c8\'c6\'f7\'c4\'c7\'c0\'ef\'b5\'c3\'b5\'bd\'b6\'d4}{
\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'bf\'d8\'d6\'c6\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'cb\'fc\'d5\'fd\'d4\'da\'b6\'d4}{\hich\af0\dbch\af17\loch\f0 module_interruptible_s\hich\af0\dbch\af17\loch\f0 leep_on}{
\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'b5\'f7\'d3\'c3\'ba\'f3\'bf\'aa\'ca\'bc\'a1\'a3\'c8\'bb\'ba\'f3\'cb\'fc\'bf\'c9\'d2\'d4\'c9\'e8\'d6\'c3\'d2\'bb\'b8\'f6\'c8\'ab\'be\'d6\'b1\'e4\'c1\'bf\'b8\'e6\'cb\'df\'b1\'f0\'b5\'c4\'bd\'f8\'b3\'cc\'d5\'e2\'b8\'f6
\'ce\'c4\'bc\'fe\'bb\'b9\'b4\'f2\'bf\'aa\'d7\'c5\'a3\'ac\'d5\'fd\'d4\'da\'bc\'cc\'d0\'f8\'cb\'fc\'b5\'c4\'c9\'fa\'c3\'fc\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b5\'b1\'b1\'f0\'b5\'c4\'bd\'f8\'b3\'cc\'d3\'d0\'b5\'c3\'b5\'bd}{\hich\af0\dbch\af17\loch\f0 CPU}{
\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'bb\'fa\'bb\'e1\'ca\'b1\'a3\'ac\'cb\'fc\'c3\'c7\'bb\'e1\'bf\'b4\'b5\'bd\'d5\'e2\'b8\'f6\'c8\'ab\'be\'d6\'b1\'e4\'c1\'bf\'a3\'ac\'c8\'bb\'ba\'f3\'be\'cd\'d6\'d8\'d0\'c2\'b9\'d2\'c6\'f0\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'ce\'aa\'ca\'b9\'c9\'fa\'c3\'fc\'b8\'fc\'bc\'d3\'be\'ab\'b2\'ca\'a3\'ac}{\hich\af0\dbch\af17\loch\f0 module_close}{\loch\af0\hich\af0\dbch\f17 \'b2\'a2\'c3\'bb\'d3\'d0\'b6\'d4\'bb\'bd\'d0\'d1\'b5\'c8\'b4\'fd\'b7\'c3\'ce\'ca
\'ce\'c4\'bc\'fe\'b5\'c4\'bd\'f8\'b3\'cc\'bd\'f8\'d0\'d0\'c2\'a2\'b6\'cf\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d2\'bb\'b8\'f6\'cf\'f3}{\hich\af0\dbch\af17\loch\f0 Ctrl-C}{\loch\af0\hich\af0\dbch\f17 \'a3\'a8}{\hich\af0\dbch\af17\loch\f0 SIGINT}{
\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'d6\'ae\'c0\'e0\'b5\'c4\'d0\'c5\'ba\'c5\'cd\'ac\'d1\'f9\'bf\'c9\'d2\'d4\'bb\'bd\'d0\'d1\'bd\'f8\'b3\'cc\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da\'d5\'e2\'d6\'d6\'c7\'e9\'bf\'f6\'cf\'c2\'a3\'ac\'ce\'d2\'c3\'c7
\'cf\'a3\'cd\'fb\'c1\'a2\'bc\'b4\'b7\'b5\'bb\'d8}{\hich\af0\dbch\af17\loch\f0 -EINTR}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'ca\'c7\'ba\'dc\'d6\'d8\'d2\'aa\'b5\'c4\'a3\'ac\'b1\'c8\'c8\'e7\'d3\'c3\'bb\'a7\'bf\'c9\'d2\'d4
\'d4\'da\'bd\'f8\'b3\'cc\'bd\'d3\'b5\'bd\'ce\'c4\'bc\'fe\'c7\'b0\'c9\'b1\'cb\'c0\'bd\'f8\'b3\'cc\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'bb\'b9\'d3\'d0\'d2\'bb\'b5\'e3\'d0\'e8\'d2\'aa\'bc\'c7\'d7\'a1\'a1\'a3\'d3\'d0\'d0\'a9\'ca\'b1\'ba\'f2\'bd\'f8\'b3\'cc\'b2\'bb\'cf\'a3\'cd\'fb\'b1\'bb\'b9\'d2\'c6\'f0\'a3\'ac\'cb\'fc\'c3\'c7\'cf\'a3\'cd\'fb\'c1\'a2\'bf\'cc
\'b5\'c3\'b5\'bd\'cb\'fc\'c3\'c7\'d2\'aa\'b5\'c4\'b6\'ab\'ce\'f7\'a3\'ac\'bb\'f2\'d5\'df\'b1\'bb\'b8\'e6\'d6\'aa\'b2\'bb\'c4\'dc\'d7\'f6\'b5\'bd\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'d1\'f9\'b5\'c4\'bd\'f8\'b3\'cc\'d4\'da\'b4\'f2\'bf\'aa\'ce\'c4
\'bc\'fe\'ca\'b1\'ca\'b9\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 O_NONBLOCK}{\loch\af0\hich\af0\dbch\f17 \'b1\'ea\'d6\'be\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c4\'da\'ba\'cb\'d4\'da\'d3\'f6\'b5\'bd\'c6\'e4\'cb\'fb\'b7\'bd\'c3\'e6\'b5\'c4\'b9\'d2\'c6\'f0
\'bd\'f8\'b3\'cc\'b5\'c4\'b2\'d9\'d7\'f7\'a3\'a8\'b1\'c8\'c8\'e7\'b1\'be\'c0\'fd\'d6\'d0\'b5\'c4\'b4\'f2\'bf\'aa\'ce\'c4\'bc\'fe\'a3\'a9\'ca\'b1\'d2\'aa\'b7\'b5\'bb\'d8\'d2\'bb\'b8\'f6\'b4\'ed\'ce\'f3\'c2\'eb}{\hich\af0\dbch\af17\loch\f0 -ERROR}{
\loch\af0\hich\af0\dbch\f17 \'d7\'f7\'ce\'aa\'bb\'d8\'d3\'a6\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b3\'cc\'d0\'f2}{\hich\af0\dbch\af17\loch\f0 cat_noblock}{\loch\af0\hich\af0\dbch\f17 \'be\'cd\'bf\'c9\'d2\'d4\'d3\'c3\'c0\'b4\'ca\'b9\'d3\'c3\'b1\'ea\'d6\'be
}{\hich\af0\dbch\af17\loch\f0 O_NONBLOCK}{\loch\af0\hich\af0\dbch\f17 \'b4\'f2\'bf\'aa\'ce\'c4\'bc\'fe\'a3\'ac\'cb\'fc\'bf\'c9\'d2\'d4\'d4\'da\'b1\'be\'d5\'c2\'d4\'b4\'b3\'cc\'d0\'f2\'c4\'bf\'c2\'bc\'d6\'d0\'d5\'d2\'b5\'bd\'a1\'a3}{
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\hich\af0\dbch\af17\loch\f0 ex }{\b\fs27 \hich\af0\dbch\af17\loch\f0 sleep.c}{\hich\af0\dbch\af17\loch\f0  \~\~ }{\kerning0 
\par }{\hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0 /* sleep.c - create a /proc file, and if several 
\par \hich\af0\dbch\af17\loch\f0  * processes try to open it at the same time, put all 
\par \hich\af0\dbch\af17\loch\f0  * but\hich\af0\dbch\af17\loch\f0  one to sleep */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Copyright (C) 1998-99 by Ori Pomerantz */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The necessary header files */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Standard in kernel modules */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/kernel.h>   /* We're doing kernel work */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/module.h>   /* Specifically, a module */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Deal with CONFIG_MODVERSIONS */
\par \hich\af0\dbch\af17\loch\f0 #if CONFIG_MODVERSIONS==1
\par \hich\af0\dbch\af17\loch\f0 #define MODVERSIONS
\par \hich\af0\dbch\af17\loch\f0 #include <linux/modversions.h>
\par \hich\af0\dbch\af17\loch\f0 #endif        
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Necessary because we use proc fs */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/proc_fs.h>
\par 
\par \hich\af0\dbch\af17\loch\f0 /* For putting processes to sleep and waking them up */
\par \hich\af0\dbch\af17\loch\f0 #incl\hich\af0\dbch\af17\loch\f0 ude <linux/sched.h>
\par \hich\af0\dbch\af17\loch\f0 #include <linux/wrapper.h>
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* In 2.2.3 /usr/include/linux/version.h includes a 
\par \hich\af0\dbch\af17\loch\f0  * macro for this, but 2.0.35 doesn't - so I add it 
\par \hich\af0\dbch\af17\loch\f0  * here if necessary. */
\par \hich\af0\dbch\af17\loch\f0 #ifndef KERNEL_VERSION
\par \hich\af0\dbch\af17\loch\f0 #define KERNEL_VERSION(a,b,c) ((a)*65536+(b)*256+(c)\hich\af0\dbch\af17\loch\f0 )
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 #include <asm/uaccess.h>  /* for get_user and put_user */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The module's file functions ********************** */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Here we keep the last message received, to prove 
\par \hich\af0\dbch\af17\loch\f0  * that we can process our input */
\par \hich\af0\dbch\af17\loch\f0 #define MESSAGE_LENGTH 80
\par \hich\af0\dbch\af17\loch\f0 static char Message[MESSAGE_LENGTH];
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Since we use the file operations struct, we can't use 
\par \hich\af0\dbch\af17\loch\f0  * the special proc output provisions - we have to use 
\par \hich\af0\dbch\af17\loch\f0  * a standard read function, which is thi\hich\af0\dbch\af17\loch\f0 s function */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 static ssize_t module_output(
\par \hich\af0\dbch\af17\loch\f0     struct file *file,   /* The file read */
\par \hich\af0\dbch\af17\loch\f0     char *buf, /* The buffer to put data to (in the
\par \hich\af0\dbch\af17\loch\f0                 * user segment) */
\par \hich\af0\dbch\af17\loch\f0     size_t len,  /* The length o\hich\af0\dbch\af17\loch\f0 f the buffer */
\par \hich\af0\dbch\af17\loch\f0     loff_t *offset) /* Offset in the file - ignore */
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0 static int module_output(
\par \hich\af0\dbch\af17\loch\f0     struct inode *inode, /* The inode read */
\par \hich\af0\dbch\af17\loch\f0     struct file *file,   /* The file read */
\par \hich\af0\dbch\af17\loch\f0     char *buf, /* The buffer to put data to (in the
\par \hich\af0\dbch\af17\loch\f0                 * user segment) */
\par \hich\af0\dbch\af17\loch\f0     int len)  /* The length of the buffer */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \{
\par \hich\af0\dbch\af17\loch\f0   static int finished = 0;
\par \hich\af0\dbch\af17\loch\f0   int i;
\par \hich\af0\dbch\af17\loch\f0   char message[MESSAGE_LENGTH+30];
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Return 0 to signify end of file - that we have 
\par \hich\af0\dbch\af17\loch\f0    * nothing more to say at this point. */
\par \hich\af0\dbch\af17\loch\f0   if (finished) \{
\par \hich\af0\dbch\af17\loch\f0     finished = 0;
\par \hich\af0\dbch\af17\loch\f0     return 0;
\par \hich\af0\dbch\af17\loch\f0   \}
\par 
\par \hich\af0\dbch\af17\loch\f0   /* If you don't understand this by now, you're 
\par \hich\af0\dbch\af17\loch\f0    * hopeless as a kernel  programmer. */
\par \hich\af0\dbch\af17\loch\f0   sprintf(message, "Last input:%s\\n", Message);
\par \hich\af0\dbch\af17\loch\f0   for(i=0; i<len && message[i]; i++) 
\par \hich\af0\dbch\af17\loch\f0     put_user(message[i\hich\af0\dbch\af17\loch\f0 ], buf+i);
\par 
\par \hich\af0\dbch\af17\loch\f0   finished = 1;
\par \hich\af0\dbch\af17\loch\f0   return i;  /* Return the number of bytes "read" */
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This function receives input from the user when 
\par \hich\af0\dbch\af17\loch\f0  * the user writes to the /proc file. */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 static ssize_t module_input(
\par \hich\af0\dbch\af17\loch\f0     struct file *file,   /* The file itself */
\par \hich\af0\dbch\af17\loch\f0     const char *buf,     /* The buffer with input */
\par \hich\af0\dbch\af17\loch\f0     size_t length,       /* The buffer's length */
\par \hich\af0\dbch\af17\loch\f0     loff_t *offset)      /* offset to file - ignore */
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0 static int module_input(
\par \hich\af0\dbch\af17\loch\f0     struct inode *i\hich\af0\dbch\af17\loch\f0 node, /* The file's inode */
\par \hich\af0\dbch\af17\loch\f0     struct file *file,   /* The file itself */
\par \hich\af0\dbch\af17\loch\f0     const char *buf,     /* The buffer with the input */
\par \hich\af0\dbch\af17\loch\f0     int length)          /* The buffer's length */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \{
\par \hich\af0\dbch\af17\loch\f0   int i;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Put the input into Message, where module_output 
\par \hich\af0\dbch\af17\loch\f0    * will later be able to use it */
\par \hich\af0\dbch\af17\loch\f0   for(i=0; i<MESSAGE_LENGTH-1 && i<length; i++)
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0      get_user(Message[i], buf+i);
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0   Message[i] = get_user(buf+i);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \hich\af0\dbch\af17\loch\f0 /* we want a standard, zero terminated stri\hich\af0\dbch\af17\loch\f0 ng */
\par \hich\af0\dbch\af17\loch\f0   Message[i] = '\\0';  
\par \hich\af0\dbch\af17\loch\f0   
\par \hich\af0\dbch\af17\loch\f0   /* We need to return the number of input 
\par \hich\af0\dbch\af17\loch\f0    * characters used */
\par \hich\af0\dbch\af17\loch\f0   return i;
\par \}
\par 
\par \hich\af0\dbch\af17\loch\f0 /* 1 if the file is currently open by somebody */
\par \hich\af0\dbch\af17\loch\f0 int Already_Open = 0;
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Queue of processes who want our file */
\par \hich\af0\dbch\af17\loch\f0 static struct wait_queue *WaitQ = NULL;
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Called when the /proc file is opened */
\par \hich\af0\dbch\af17\loch\f0 static int module_open(struct inode *inode,
\par \hich\af0\dbch\af17\loch\f0                        struct file *file)
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* If the file's flags include O_NONBLOCK, it means 
\par \hich\af0\dbch\af17\loch\f0    * the process doesn't wan\hich\af0\dbch\af17\loch\f0 t to wait for the file. 
\par \hich\af0\dbch\af17\loch\f0    * In this case, if the file is already open, we 
\par \hich\af0\dbch\af17\loch\f0    * should fail with -EAGAIN, meaning "you'll have to 
\par \hich\af0\dbch\af17\loch\f0    * try again", instead of blocking a process which 
\par \hich\af0\dbch\af17\loch\f0    * would rather stay awake. */
\par \hich\af0\dbch\af17\loch\f0   if ((file->f_flags & O_NONBLOCK) &\hich\af0\dbch\af17\loch\f0 & Already_Open) 
\par \hich\af0\dbch\af17\loch\f0     return -EAGAIN;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* This is the correct place for MOD_INC_USE_COUNT 
\par \hich\af0\dbch\af17\loch\f0    * because if a process is in the loop, which is 
\par \hich\af0\dbch\af17\loch\f0    * within the kernel module, the kernel module must
\par \hich\af0\dbch\af17\loch\f0    * not be removed. */
\par \hich\af0\dbch\af17\loch\f0   MOD_INC_USE_COUNT;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* If the \hich\af0\dbch\af17\loch\f0 file is already open, wait until it isn't */
\par \hich\af0\dbch\af17\loch\f0   while (Already_Open) 
\par \hich\af0\dbch\af17\loch\f0   \{
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0     int i, is_sig=0;
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par \hich\af0\dbch\af17\loch\f0     /* This function puts the current process, 
\par \hich\af0\dbch\af17\loch\f0      * including any system calls, such as us, to sleep. 
\par \hich\af0\dbch\af17\loch\f0      * Execution will be resumed right after the function 
\par \hich\af0\dbch\af17\loch\f0      * call, either because somebody called 
\par \hich\af0\dbch\af17\loch\f0      * wake_up(&WaitQ) (only module_close does that, 
\par \hich\af0\dbch\af17\loch\f0      * when the file is closed) or when a signal, such 
\par \hich\af0\dbch\af17\loch\f0      * as Ctrl-C, is sent to the process *\hich\af0\dbch\af17\loch\f0 /
\par \hich\af0\dbch\af17\loch\f0     module_interruptible_sleep_on(&WaitQ);
\par \hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0     /* If we woke up because we got a signal we're not 
\par \hich\af0\dbch\af17\loch\f0      * blocking, return  -EINTR (fail the system call). 
\par \hich\af0\dbch\af17\loch\f0      * This allows processes to be killed or stopped. */
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /*
\par \hich\af0\dbch\af17\loch\f0  * Emmanuel Papirakis:
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * This\hich\af0\dbch\af17\loch\f0  is a little update to work with 2.2.*. Signals 
\par \hich\af0\dbch\af17\loch\f0  * now are contained in two words (64 bits) and are 
\par \hich\af0\dbch\af17\loch\f0  * stored in a structure that contains an array of two 
\par \hich\af0\dbch\af17\loch\f0  * unsigned longs. We now have to make 2 checks in our if.
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * Ori Pomerantz:
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * Nobo\hich\af0\dbch\af17\loch\f0 dy promised me they'll never use more than 64 
\par \hich\af0\dbch\af17\loch\f0  * bits, or that this book won't be used for a version 
\par \hich\af0\dbch\af17\loch\f0  * of Linux with a word size of 16 bits. This code
\par \hich\af0\dbch\af17\loch\f0  * would work in any case.
\par \hich\af0\dbch\af17\loch\f0  */\tab   
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par 
\par \hich\af0\dbch\af17\loch\f0     for(i=0; i<_NSI\hich\af0\dbch\af17\loch\f0 G_WORDS && !is_sig; i++)
\par \hich\af0\dbch\af17\loch\f0       is_sig = current->signal.sig[i] & 
\par \hich\af0\dbch\af17\loch\f0         ~current->blocked.sig[i];
\par \hich\af0\dbch\af17\loch\f0     if (is_sig) \{
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0     if (current->signal & ~current->blocked) \{
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \hich\af0\dbch\af17\loch\f0       /* It's important to put MOD_DEC_USE_COUNT here, 
\par \hich\af0\dbch\af17\loch\f0        * because for p\hich\af0\dbch\af17\loch\f0 rocesses where the open is 
\par \hich\af0\dbch\af17\loch\f0        * interrupted there will never be a corresponding
\par \hich\af0\dbch\af17\loch\f0        * close. If we don't decrement the usage count 
\par \hich\af0\dbch\af17\loch\f0        * here, we will be left with a positive usage 
\par \hich\af0\dbch\af17\loch\f0        * count which we'll have no way to bring down to
\par \hich\af0\dbch\af17\loch\f0       \hich\af0\dbch\af17\loch\f0  * zero, giving us an immortal module, which can 
\par \hich\af0\dbch\af17\loch\f0        * only be killed by rebooting the machine. */
\par \hich\af0\dbch\af17\loch\f0       MOD_DEC_USE_COUNT;
\par \hich\af0\dbch\af17\loch\f0       return -EINTR;
\par \hich\af0\dbch\af17\loch\f0     \}
\par \hich\af0\dbch\af17\loch\f0   \}
\par 
\par \hich\af0\dbch\af17\loch\f0   /* If we got here, Already_Open must be zero */
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Open the file */
\par \hich\af0\dbch\af17\loch\f0   Already_Open = 1;
\par \hich\af0\dbch\af17\loch\f0   r\hich\af0\dbch\af17\loch\f0 eturn 0;  /* Allow the access */
\par \}
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Called when the /proc file is closed */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0 int module_close(struct inode *inode, struct file *file)
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0 void module_close(struct inode *inode, struct file *file)
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* Set Already_Open to zero, so one of the processes 
\par \hich\af0\dbch\af17\loch\f0    * in the WaitQ will be able to set Already_Open back 
\par \hich\af0\dbch\af17\loch\f0    * to one and to open the file. All the other processes 
\par \hich\af0\dbch\af17\loch\f0    * will be called when Already_Open is back to one, so
\par \hich\af0\dbch\af17\loch\f0    * they'll go back to \hich\af0\dbch\af17\loch\f0 sleep. */
\par \hich\af0\dbch\af17\loch\f0   Already_Open = 0;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Wake up all the processes in WaitQ, so if anybody 
\par \hich\af0\dbch\af17\loch\f0    * is waiting for the file, they can have it. */
\par \hich\af0\dbch\af17\loch\f0   module_wake_up(&WaitQ);
\par 
\par \hich\af0\dbch\af17\loch\f0   MOD_DEC_USE_COUNT;
\par 
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0   return 0;  /* succe\hich\af0\dbch\af17\loch\f0 ss */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \}
\par 
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This function decides whether to allow an operation 
\par \hich\af0\dbch\af17\loch\f0  * (return zero) or not allow it (return a non-zero 
\par \hich\af0\dbch\af17\loch\f0  * which indicates why it is not allowed).
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * The operation can be one of the following values:
\par \hich\af0\dbch\af17\loch\f0  * 0 - Execute (run the "file\hich\af0\dbch\af17\loch\f0 " - meaningless in our case)
\par \hich\af0\dbch\af17\loch\f0  * 2 - Write (input to the kernel module)
\par \hich\af0\dbch\af17\loch\f0  * 4 - Read (output from the kernel module)
\par \hich\af0\dbch\af17\loch\f0  *
\par \hich\af0\dbch\af17\loch\f0  * This is the real function that checks file 
\par \hich\af0\dbch\af17\loch\f0  * permissions. The permissions returned by ls -l are 
\par \hich\af0\dbch\af17\loch\f0  * for referece only, and can be ove\hich\af0\dbch\af17\loch\f0 rridden here. 
\par \hich\af0\dbch\af17\loch\f0  */
\par \hich\af0\dbch\af17\loch\f0 static int module_permission(struct inode *inode, int op)
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* We allow everybody to read from our module, but 
\par \hich\af0\dbch\af17\loch\f0    * only root (uid 0) may write to it */ 
\par \hich\af0\dbch\af17\loch\f0   if (op == 4 || (op == 2 && current->euid == 0))
\par \hich\af0\dbch\af17\loch\f0     return 0; 
\par 
\par \hich\af0\dbch\af17\loch\f0   /* If it's a\hich\af0\dbch\af17\loch\f0 nything else, access is denied */
\par \hich\af0\dbch\af17\loch\f0   return -EACCES;
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Structures to register as the /proc file, with 
\par \hich\af0\dbch\af17\loch\f0  * pointers to all the relevant functions. *********** */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* File operations for our proc file. This is where 
\par \hich\af0\dbch\af17\loch\f0  * we place pointers to all the func\hich\af0\dbch\af17\loch\f0 tions called when 
\par \hich\af0\dbch\af17\loch\f0  * somebody tries to do something to our file. NULL 
\par \hich\af0\dbch\af17\loch\f0  * means we don't want to deal with something. */
\par \hich\af0\dbch\af17\loch\f0 static struct file_operations File_Ops_4_Our_Proc_File =
\par \hich\af0\dbch\af17\loch\f0   \{
\par \hich\af0\dbch\af17\loch\f0     NULL,  /* lseek */
\par \hich\af0\dbch\af17\loch\f0     module_output,  /* "read" from the file */
\par \hich\af0\dbch\af17\loch\f0    \hich\af0\dbch\af17\loch\f0  module_input,   /* "write" to the file */
\par \hich\af0\dbch\af17\loch\f0     NULL,  /* readdir */
\par \hich\af0\dbch\af17\loch\f0     NULL,  /* select */
\par \hich\af0\dbch\af17\loch\f0     NULL,  /* ioctl */
\par \hich\af0\dbch\af17\loch\f0     NULL,  /* mmap */
\par \hich\af0\dbch\af17\loch\f0     module_open,/* called when the /proc file is opened */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0     NULL,   \hich\af0\dbch\af17\loch\f0 /* flush */
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \hich\af0\dbch\af17\loch\f0     module_close      /* called when it's classed */
\par \hich\af0\dbch\af17\loch\f0   \};
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Inode operations for our proc file. We need it so 
\par \hich\af0\dbch\af17\loch\f0  * we'll have somewhere to specify the file operations 
\par \hich\af0\dbch\af17\loch\f0  * structure we want to use, and the function we use for 
\par \hich\af0\dbch\af17\loch\f0  * permi\hich\af0\dbch\af17\loch\f0 ssions. It's also possible to specify functions 
\par \hich\af0\dbch\af17\loch\f0  * to be called for anything else which could be done to an
\par \hich\af0\dbch\af17\loch\f0  * inode (although we don't bother, we just put NULL). */
\par \hich\af0\dbch\af17\loch\f0 static struct inode_operations Inode_Ops_4_Our_Proc_File =
\par \hich\af0\dbch\af17\loch\f0   \{
\par \hich\af0\dbch\af17\loch\f0     &File_Ops_4_Our_Proc_F\hich\af0\dbch\af17\loch\f0 ile,
\par \hich\af0\dbch\af17\loch\f0     NULL, /* create */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* lookup */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* link */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* unlink */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* symlink */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* mkdir */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* rmdir */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* mknod */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* rename */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* readlink */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* follow_lin\hich\af0\dbch\af17\loch\f0 k */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* readpage */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* writepage */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* bmap */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* truncate */
\par \hich\af0\dbch\af17\loch\f0     module_permission /* check for permissions */
\par \hich\af0\dbch\af17\loch\f0   \};
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Directory entry */
\par \hich\af0\dbch\af17\loch\f0 static struct proc_dir_entry Our_Proc_File = 
\par \hich\af0\dbch\af17\loch\f0   \{
\par \hich\af0\dbch\af17\loch\f0     0, /* Inode number - i\hich\af0\dbch\af17\loch\f0 gnore, it will be filled by 
\par \hich\af0\dbch\af17\loch\f0         * proc_register[_dynamic] */
\par \hich\af0\dbch\af17\loch\f0     5, /* Length of the file name */
\par \hich\af0\dbch\af17\loch\f0     "sleep", /* The file name */
\par \hich\af0\dbch\af17\loch\f0     S_IFREG | S_IRUGO | S_IWUSR, 
\par \hich\af0\dbch\af17\loch\f0     /* File mode - this is a regular file which 
\par \hich\af0\dbch\af17\loch\f0      * can be read by its owner, its \hich\af0\dbch\af17\loch\f0 group, and everybody
\par \hich\af0\dbch\af17\loch\f0      * else. Also, its owner can write to it.
\par \hich\af0\dbch\af17\loch\f0      *
\par \hich\af0\dbch\af17\loch\f0      * Actually, this field is just for reference, it's
\par \hich\af0\dbch\af17\loch\f0      * module_permission that does the actual check. It 
\par \hich\af0\dbch\af17\loch\f0      * could use this field, but in our implementation it
\par \hich\af0\dbch\af17\loch\f0      * does\hich\af0\dbch\af17\loch\f0 n't, for simplicity. */
\par \hich\af0\dbch\af17\loch\f0     1,  /* Number of links (directories where the 
\par \hich\af0\dbch\af17\loch\f0          * file is referenced) */
\par \hich\af0\dbch\af17\loch\f0     0, 0,  /* The uid and gid for the file - we give 
\par \hich\af0\dbch\af17\loch\f0             * it to root */
\par \hich\af0\dbch\af17\loch\f0     80, /* The size of the file reported by ls. */
\par \hich\af0\dbch\af17\loch\f0     &Inode_Ops\hich\af0\dbch\af17\loch\f0 _4_Our_Proc_File, 
\par \hich\af0\dbch\af17\loch\f0     /* A pointer to the inode structure for
\par \hich\af0\dbch\af17\loch\f0      * the file, if we need it. In our case we
\par \hich\af0\dbch\af17\loch\f0      * do, because we need a write function. */
\par \hich\af0\dbch\af17\loch\f0     NULL  /* The read function for the file. 
\par \hich\af0\dbch\af17\loch\f0            * Irrelevant, because we put it
\par \hich\af0\dbch\af17\loch\f0          \hich\af0\dbch\af17\loch\f0   * in the inode structure above */
\par \hich\af0\dbch\af17\loch\f0   \}; 
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Module initialization and cleanup **************** */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Initialize the module - register the proc file */
\par \hich\af0\dbch\af17\loch\f0 int init_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* Success if proc_register_dynamic is a success, 
\par \hich\af0\dbch\af17\loch\f0    * failure otherwise */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0   return proc_register(&proc_root, &Our_Proc_File);
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0   return proc_register_dynamic(&proc_root, &Our_Proc_File);
\par \hich\af0\dbch\af17\loch\f0 #endif 
\par 
\par \hich\af0\dbch\af17\loch\f0   /* proc_root is the root directory for the proc 
\par \hich\af0\dbch\af17\loch\f0    * fs (/proc). This is where\hich\af0\dbch\af17\loch\f0  we want our file to be 
\par \hich\af0\dbch\af17\loch\f0    * located. 
\par \hich\af0\dbch\af17\loch\f0    */
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Cleanup - unregister our file from /proc. This could 
\par \hich\af0\dbch\af17\loch\f0  * get dangerous if there are still processes waiting in 
\par \hich\af0\dbch\af17\loch\f0  * WaitQ, because they are inside our open function, 
\par \hich\af0\dbch\af17\loch\f0  * which will get unloaded. I'll expl\hich\af0\dbch\af17\loch\f0 ain how to avoid 
\par \hich\af0\dbch\af17\loch\f0  * removal of a kernel module in such a case in 
\par \hich\af0\dbch\af17\loch\f0  * chapter 10. */
\par \hich\af0\dbch\af17\loch\f0 void cleanup_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   proc_unregister(&proc_root, Our_Proc_File.low_ino);
\par \}
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard\plain \s1\qj \li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281306}
\hich\af0\dbch\af17\loch\f0 9}{\fs36 \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'cc\'e6\'bb\'bb}{\fs36 \hich\af0\dbch\af17\loch\f0 printk\loch\af0\dbch\af17\hich\f0 \rquote \hich\af0\dbch\af17\loch\f0 s{\*\bkmkend _Toc491281306}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'d4\'da\'bf\'aa\'ca\'bc\'a3\'a8
\'b5\'da}{\hich\af0\dbch\af17\loch\f0 1}{\loch\af0\hich\af0\dbch\f17 \'d5\'c2\'a3\'a9\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'ce\'d2\'c3\'c7\'cb\'b5\'b9\'fd}{\hich\af0\dbch\af17\loch\f0 X}{\loch\af0\hich\af0\dbch\f17 \'d3\'eb\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9
\'b1\'e0\'b3\'cc\'b2\'a2\'b2\'bb\'bb\'ec\'ba\'cf\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'bf\'aa\'b7\'a2\'c4\'da\'ba\'cb\'b5\'c4\'ca\'b1\'ba\'f2\'d5\'e2\'ca\'c7\'d5\'fd\'c8\'b7\'b5\'c4\'a3\'ac\'b5\'ab\'ca\'c7\'d4\'da\'ca\'b5\'bc\'ca\'d3\'a6\'d3\'c3
\'d6\'d0\'ce\'d2\'c3\'c7\'cf\'a3\'cd\'fb\'b0\'d1\'cf\'fb\'cf\'a2\'cb\'cd\'b5\'bd\'b8\'f8\'c4\'a3\'bf\'e9\'b5\'c4\'c3\'fc\'c1\'ee\'b7\'a2\'c0\'b4\'b5\'c4\'c8\'ce\'ba\'ce\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 tty}{\loch\af0\hich\af0\dbch\f17 \'a3\'a8
\'d7\'a2}{\hich\af0\dbch\af17\loch\f0 9.1}{\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'d4\'da\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'b1\'bb\'ca\'cd\'b7\'c5\'ca\'b1\'c8\'b7\'c8\'cf\'b4\'ed\'ce\'f3\'ca\'c7\'ba\'dc\'d6\'d8
\'d2\'aa\'b5\'c4\'a3\'ac\'d2\'f2\'ce\'aa\'cb\'fc\'bd\'ab\'bb\'e1\'d4\'da\'cb\'f9\'d3\'d0\'c4\'da\'ba\'cb\'d6\'d0\'ca\'b9\'d3\'c3\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'d1\'f9\'d7\'f6\'b5\'c4\'b7\'bd\'b7\'a8\'ca\'c7\'ca\'b9\'d3\'c3\'b5\'b1\'c7\'b0\'b5\'c4\'b8\'c5\'c4\'ee\'a3\'ac\'d2\'bb\'b8\'f6\'d6\'b8\'cf\'f2\'b5\'b1\'c7\'b0\'d4\'cb\'d0\'d0\'c8\'ce\'ce\'f1\'b5\'c4\'d6\'b8\'d5\'eb
\'a3\'ac\'b4\'d3\'b6\'f8\'b5\'c3\'b5\'bd\'b5\'b1\'c7\'b0\'c8\'ce\'ce\'f1\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 tty}{\loch\af0\hich\af0\dbch\f17 \'bd\'e1\'b9\'b9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'bb\'ba\'f3\'a3\'ac\'ce\'d2\'c3\'c7\'b5\'bd}{
\hich\af0\dbch\af17\loch\f0 tty}{\loch\af0\hich\af0\dbch\f17 \'bd\'e1\'b9\'b9\'c0\'ef\'d1\'b0\'d5\'d2\'d2\'bb\'b8\'f6\'d6\'b8\'cf\'f2\'d0\'b4\'b4\'ae\'ba\'af\'ca\'fd\'b5\'c4\'d6\'b8\'d5\'eb\'a3\'ac\'ce\'d2\'c3\'c7\'d3\'c3\'d5\'e2\'b8\'f6\'ba\'af\'ca\'fd
\'b0\'d1\'d2\'bb\'b8\'f6\'b4\'ae\'d0\'b4\'bd\'f8}{\hich\af0\dbch\af17\loch\f0 tty}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3}{
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\hich\af0\dbch\af17\loch\f0 ex }{\fs27 \hich\af0\dbch\af17\loch\f0 printk.c}{\hich\af0\dbch\af17\loch\f0  \~\~ }{\kerning0 
\par }{\hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0 /* printk.c - send textual output to the tty you're 
\par \hich\af0\dbch\af17\loch\f0  * runni\hich\af0\dbch\af17\loch\f0 ng on, regardless of whether it's passed 
\par \hich\af0\dbch\af17\loch\f0  * through X11, telnet, etc. */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Copyright (C) 1998 by Ori Pomerantz */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The necessary header files */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Standard in kernel modules */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/kernel.h>   /* We're doing kernel work */
\par \hich\af0\dbch\af17\loch\f0 #include <l\hich\af0\dbch\af17\loch\f0 inux/module.h>   /* Specifically, a module */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Deal with CONFIG_MODVERSIONS */
\par \hich\af0\dbch\af17\loch\f0 #if CONFIG_MODVERSIONS==1
\par \hich\af0\dbch\af17\loch\f0 #define MODVERSIONS
\par \hich\af0\dbch\af17\loch\f0 #include <linux/modversions.h>
\par \hich\af0\dbch\af17\loch\f0 #endif        
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Necessary here */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/sched.h>    /* For current */
\par \hich\af0\dbch\af17\loch\f0 #include <linu\hich\af0\dbch\af17\loch\f0 x/tty.h>      /* For the tty declarations */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Print the string to the appropriate tty, the one 
\par \hich\af0\dbch\af17\loch\f0  * the current task uses */
\par \hich\af0\dbch\af17\loch\f0 void print_string(char *str)
\par \{
\par \hich\af0\dbch\af17\loch\f0   struct tty_struct *my_tty;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* The tty for the current task */
\par \hich\af0\dbch\af17\loch\f0   my_tty = current->tty;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* If my_tty is NULL, it means that the current task 
\par \hich\af0\dbch\af17\loch\f0    * has no tty you can print to (this is possible, for 
\par \hich\af0\dbch\af17\loch\f0    * example, if it's a daemon). In this case, there's 
\par \hich\af0\dbch\af17\loch\f0    * nothing we can do. */ 
\par \hich\af0\dbch\af17\loch\f0   if (my_tty != NULL) \{ 
\par 
\par \hich\af0\dbch\af17\loch\f0     /* my_tty->driver is a struct\hich\af0\dbch\af17\loch\f0  which holds the tty's 
\par \hich\af0\dbch\af17\loch\f0      * functions, one of which (write) is used to 
\par \hich\af0\dbch\af17\loch\f0      * write strings to the tty. It can be used to take 
\par \hich\af0\dbch\af17\loch\f0      * a string either from the user's memory segment 
\par \hich\af0\dbch\af17\loch\f0      * or the kernel's memory segment. 
\par \hich\af0\dbch\af17\loch\f0      *
\par \hich\af0\dbch\af17\loch\f0      * The function's \hich\af0\dbch\af17\loch\f0 first parameter is the tty to 
\par \hich\af0\dbch\af17\loch\f0      * write to, because the  same function would 
\par \hich\af0\dbch\af17\loch\f0      * normally be used for all tty's of a certain type.
\par \hich\af0\dbch\af17\loch\f0      * The second parameter controls whether the 
\par \hich\af0\dbch\af17\loch\f0      * function receives a string from kernel memory 
\par \hich\af0\dbch\af17\loch\f0      * (false\hich\af0\dbch\af17\loch\f0 , 0) or from user memory (true, non zero). 
\par \hich\af0\dbch\af17\loch\f0      * The third parameter is a pointer to a string, 
\par \hich\af0\dbch\af17\loch\f0      * and the fourth parameter is the length of 
\par \hich\af0\dbch\af17\loch\f0      * the string.
\par \hich\af0\dbch\af17\loch\f0      */
\par \hich\af0\dbch\af17\loch\f0     (*(my_tty->driver).write)(
\par \hich\af0\dbch\af17\loch\f0         my_tty, /* The tty itself */
\par \hich\af0\dbch\af17\loch\f0         0, /* We don't take the string from user space */
\par \tab \hich\af0\dbch\af17\loch\f0 str, /* String */
\par \tab \hich\af0\dbch\af17\loch\f0 strlen(str));  /* Length */
\par 
\par \hich\af0\dbch\af17\loch\f0     /* ttys were originally hardware devices, which 
\par \hich\af0\dbch\af17\loch\f0      * (usually) adhered strictly to the ASCII standard. 
\par \hich\af0\dbch\af17\loch\f0      * According to ASCII, to move to \hich\af0\dbch\af17\loch\f0 a new line you 
\par \hich\af0\dbch\af17\loch\f0      * need two characters, a carriage return and a 
\par \hich\af0\dbch\af17\loch\f0      * line feed. In Unix, on the other hand, the 
\par \hich\af0\dbch\af17\loch\f0      * ASCII line feed is used for both purposes - so 
\par \hich\af0\dbch\af17\loch\f0      * we can't just use \\n, because it wouldn't have 
\par \hich\af0\dbch\af17\loch\f0      * a carriage return a\hich\af0\dbch\af17\loch\f0 nd the next line will 
\par \hich\af0\dbch\af17\loch\f0      * start at the column right
\par \hich\af0\dbch\af17\loch\f0      *                          after the line feed. 
\par \hich\af0\dbch\af17\loch\f0      *
\par \hich\af0\dbch\af17\loch\f0      * BTW, this is the reason why the text file 
\par \hich\af0\dbch\af17\loch\f0      *  is different between Unix and Windows. 
\par \hich\af0\dbch\af17\loch\f0      * In CP/M and its derivatives, such \hich\af0\dbch\af17\loch\f0 as MS-DOS and 
\par \hich\af0\dbch\af17\loch\f0      * Windows, the ASCII standard was strictly 
\par \hich\af0\dbch\af17\loch\f0      * adhered to, and therefore a new line requires 
\par \hich\af0\dbch\af17\loch\f0      * both a line feed and a carriage return. 
\par \hich\af0\dbch\af17\loch\f0      */
\par \hich\af0\dbch\af17\loch\f0     (*(my_tty->driver).write)(
\par \hich\af0\dbch\af17\loch\f0       my_tty,  
\par \hich\af0\dbch\af17\loch\f0       0,
\par \hich\af0\dbch\af17\loch\f0       "\\015\\012",
\par \hich\af0\dbch\af17\loch\f0       2);
\par \hich\af0\dbch\af17\loch\f0   \}
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Module initialization and cleanup ****************** */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Initialize the module - register the proc file */
\par \hich\af0\dbch\af17\loch\f0 int init_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   print_string("Module Inserted");
\par 
\par \hich\af0\dbch\af17\loch\f0   return 0;
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Cleanup - unregister our file from /proc */
\par \hich\af0\dbch\af17\loch\f0 void \hich\af0\dbch\af17\loch\f0 cleanup_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   print_string("Module Removed");
\par \}
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard\plain \s1\qj \li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281307}
\hich\af0\dbch\af17\loch\f0 10}{\fs36 \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'b5\'f7\'b6\'c8\'c8\'ce\'ce\'f1}{\fs36 {\*\bkmkend _Toc491281307}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'be\'ad\'b3\'a3\'b5\'d8\'a3\'ac
\'ce\'d2\'c3\'c7\'d3\'d0\'b1\'d8\'d0\'eb\'b6\'a8\'ca\'b1\'d7\'f6\'bb\'f2\'d5\'df\'be\'ad\'b3\'a3\'d7\'f6\'b5\'c4\'a1\'b0\'bc\'d2\'ce\'f1\'ca\'c2\'a1\'b1\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'d5\'e2\'b8\'f6\'c8\'ce\'ce\'f1\'d3\'c9\'d2\'bb
\'b8\'f6\'bd\'f8\'b3\'cc\'cd\'ea\'b3\'c9\'a3\'ac\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'b0\'d1\'cd\'a8\'b9\'fd\'b0\'d1\'cb\'fc\'b7\'c5\'c8\'eb}{\hich\af0\dbch\af17\loch\f0 crontab}{\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'b6\'f8\'d7\'f6\'b5\'bd\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'d5\'e2\'b8\'f6\'c8\'ce\'ce\'f1\'d3\'c9\'d2\'bb\'b8\'f6\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'cd\'ea\'b3\'c9\'a3\'ac\'ce\'d2\'c3\'c7\'d3\'d0\'c1\'bd\'d6\'d6\'bf\'c9\'c4\'dc\'b5\'c4\'d1\'a1\'d4\'f1\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'b5\'da\'d2\'bb\'d6\'d6\'ca\'c7\'b0\'d1\'d2\'bb\'b8\'f6\'bd\'f8\'b3\'cc\'b7\'c5\'c8\'eb}{\hich\af0\dbch\af17\loch\f0 crontab}{\loch\af0\hich\af0\dbch\f17 \'ce\'c4\'bc\'fe\'a3\'ac\'cb\'fc\'bd\'ab\'d4\'da\'b1\'d8\'d2\'aa\'b5\'c4
\'ca\'b1\'ba\'f2\'cd\'a8\'b9\'fd\'d2\'bb\'b8\'f6\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'bb\'bd\'d0\'d1\'c4\'a3\'bf\'e9\'a3\'ac\'b1\'c8\'c8\'e7\'b4\'f2\'bf\'aa\'d2\'bb\'b8\'f6\'ce\'c4\'bc\'fe\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'bb\'b6\'f8\'a3\'ac\'d5\'e2
\'d1\'f9\'d7\'f6\'ca\'b1\'b7\'c7\'b3\'a3\'b5\'cd\'d0\'a7\'b5\'c4\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'ce\'d2\'c3\'c7\'d0\'e8\'d2\'aa\'d4\'cb\'d0\'d0\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 crontab}{\loch\af0\hich\af0\dbch\f17 \'cd\'e2\'b5\'c4\'d0\'c2
\'bd\'f8\'b3\'cc\'a3\'ac\'b0\'d1\'d2\'bb\'b8\'f6\'d0\'c2\'b5\'c4\'d6\'b4\'d0\'d0\'b1\'ed\'b6\'c1\'c8\'eb\'c4\'da\'b4\'e6\'a3\'ac\'b6\'f8\'cb\'f9\'d3\'d0\'d5\'e2\'d0\'a9\'d6\'bb\'ca\'c7\'ce\'aa\'c1\'cb\'bb\'bd\'d0\'d1\'d2\'bb\'b8\'f6\'c4\'da\'b4\'e6
\'d6\'d0\'b5\'c4\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'c3\'c7\'b2\'bb\'d0\'e8\'d2\'aa\'d5\'e2\'d1\'f9\'d7\'f6\'a1\'a3\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'b4\'b4\'bd\'a8\'d2\'bb\'b8\'f6\'ba\'af\'ca\'fd\'a3\'ac\'d4\'da\'c3\'bf\'b8\'f6\'ca\'b1\'bc\'e4\'d6\'d0\'b6\'cf\'ca\'b1
\'b1\'bb\'b5\'f7\'d3\'c3\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b7\'bd\'b7\'a8\'ca\'c7\'b4\'b4\'bd\'a8\'d2\'bb\'b8\'f6\'c8\'ce\'ce\'f1\'a3\'ac\'b0\'fc\'ba\'ac\'d4\'da\'d2\'bb\'b8\'f6\'bd\'e1\'b9\'b9\'cc\'e5}{\hich\af0\dbch\af17\loch\f0 tq_struct}{
\loch\af0\hich\af0\dbch\f17 \'c0\'ef\'a3\'ac\'d4\'da\'b4\'cb\'bd\'e1\'b9\'b9\'d6\'d0\'b0\'fc\'ba\'ac\'d2\'bb\'b8\'f6\'d6\'b8\'cf\'f2\'ba\'af\'ca\'fd\'c8\'eb\'bf\'da\'b5\'d8\'d6\'b7\'b5\'c4\'d6\'b8\'d5\'eb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'bb
\'ba\'f3\'a3\'ac\'ce\'d2\'c3\'c7\'ca\'b9\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 queue_task}{\loch\af0\hich\af0\dbch\f17 \'b0\'d1\'d5\'e2\'b8\'f6\'c8\'ce\'ce\'f1\'b7\'c5\'c8\'eb\'d2\'bb\'b8\'f6\'bd\'d0\'d7\'f6}{\hich\af0\dbch\af17\loch\f0 tq_timer}{
\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'c8\'ce\'ce\'f1\'c1\'d0\'b1\'ed\'d6\'d0\'a3\'ac\'d5\'e2\'ca\'c7\'d2\'bb\'b8\'f6\'d4\'da\'cf\'c2\'b4\'ce\'ca\'b1\'bc\'e4\'d6\'d0\'b6\'cf\'ca\'b1\'d2\'aa\'d6\'b4\'d0\'d0\'b5\'c4\'c8\'ce\'ce\'f1\'c1\'d0\'b1\'ed\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'d2\'f2\'ce\'aa\'ce\'d2\'c3\'c7\'cf\'a3\'cd\'fb\'d5\'e2\'b8\'f6\'ba\'af\'ca\'fd\'b1\'bb\'b3\'d6\'d0\'f8\'d6\'b4\'d0\'d0\'a3\'ac\'ce\'d2\'c3\'c7\'d0\'e8\'d2\'aa\'d4\'da\'c3\'bf\'b4\'ce\'b5\'f7\'d3\'c3\'ba\'f1\'b0\'d1\'cb\'fc
\'b7\'c5\'bb\'d8}{\hich\af0\dbch\af17\loch\f0 tq_timer}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'d2\'d4\'b1\'b8\'cf\'c2\'b4\'ce\'ca\'b1\'bc\'e4\'d6\'d0\'b6\'cf\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'c0\'ef\'bb\'b9\loch\af0\hich\af0\dbch\f17 \'d3\'d0\'d2\'bb\'b5\'e3\'d0\'e8\'d2\'aa\'bc\'c7\'d7\'a1\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b5\'b1\'d2\'bb\'b8\'f6\'c4\'a3\'bf\'e9\'b1\'bb}{\hich\af0\dbch\af17\loch\f0 
rmmod}{\loch\af0\hich\af0\dbch\f17 \'c9\'be\'b3\'fd\'ca\'b1\'a3\'ac\'ca\'d7\'cf\'c8\'cb\'fb\'b5\'c4\'cb\'f7\'d2\'fd\'bc\'c6\'ca\'fd\'c6\'f7\'b1\'bb\'bc\'ec\'b2\'e9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 0}
{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'be\'cd\'b5\'f7\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 module_cleanup}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\'c8\'bb\'ba\'f3\'a3\'ac\'d5\'e2\'b8\'f6\'c4\'a3\'bf\'e9\'d2\'d4\'bc\'b0\'cb\'fc\'b5\'c4\'cb\'f9\'d3\'d0\'ba\'af
\'ca\'fd\'b6\'bc\'b4\'d3\'c4\'da\'b4\'e6\'d6\'d0\'c9\'be\'b3\'fd\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c3\'bb\'d3\'d0\'c8\'cb\'bc\'ec\'b2\'e9\'ca\'c7\'b7\'f1\'ca\'b1\'d6\'d3\'b5\'c4\'c8\'ce\'ce\'f1\'c1\'d0\'b1\'ed\'c8\'d4\'c8\'bb\'b0\'fc\'ba\'ac\'d6\'b8
\'cf\'f2\'d5\'e2\'d0\'a9\'ba\'af\'ca\'fd\'b5\'c4\'d6\'b8\'d5\'eb\'a3\'ac\'b6\'f8\'cf\'d6\'d4\'da\'d2\'d1\'b2\'bb\'bf\'c9\'d3\'c3\'a1\'a3\'ba\'dc\'be\'c3\'d2\'d4\'ba\'f3\'a3\'a8\'b4\'d3\'bc\'c6\'cb\'e3\'bb\'fa\'bf\'b4\'c0\'b4\'a3\'ac\'d4\'da\'c8\'cb
\'b5\'c4\'d1\'db\'be\'a6\'c0\'ef\'ca\'c7\'ba\'dc\'b6\'cc\'b5\'c4\'a3\'ac\'bf\'c9\'c4\'dc\'ca\'c7\'b0\'d9\'b7\'d6\'d6\'ae\'d2\'bb\'c3\'eb\'a3\'a9\'a3\'ac\'c4\'da\'ba\'cb\'d3\'d0\'c1\'cb\'d2\'bb\'b8\'f6\'ca\'b1\'d6\'d3\'d6\'d0\'b6\'cf\'a3\'ac\'ca\'d4
\'cd\'bc\'b5\'f7\'d3\'c3\'c8\'ce\'ce\'f1\'c1\'d0\'b1\'ed\'d6\'d0\'b5\'c4\'cb\'f9\'d3\'d0\'ba\'af\'ca\'fd\'a1\'a3\'b2\'bb\'d0\'d2\'b5\'c4\'ca\'c7\'a3\'ac\'d5\'e2\'b8\'f6\'ba\'af\'ca\'fd\'d2\'d1\'b2\'bb\'b4\'e6\'d4\'da\'a1\'a3\'d4\'da\'b6\'e0\'ca\'fd
\'c7\'e9\'bf\'f6\'cf\'c2\'a3\'ac\'cb\'fc\'cb\'f9\'d4\'da\'b5\'c4\'c4\'da\'b4\'e6\'bb\'b9\'ce\'b4\'b1\'bb\'ca\'b9\'d3\'c3\'a3\'ac\'b6\'f8\'c4\'e3\'b5\'c3\'b5\'bd\'c1\'cb\'d2\'bb\'b8\'f6\'bc\'ab\'b6\'cb\'b4\'ed\'ce\'f3\'b5\'c4\'d0\'c5\'cf\'a2\'a1\'a3
\'b5\'ab\'ca\'c7\'a3\'ac\'c8\'e7\'b9\'fb\'d3\'d0\'b1\'f0\'b5\'c4\'b4\'fa\'c2\'eb\'b3\'f6\'d4\'da\'cf\'e0\'cd\'ac\'b5\'c4\'b5\'d8\'d6\'b7\'a3\'ac\'c7\'e9\'bf\'f6\'bb\'e1\'b7\'c7\'b3\'a3\'d4\'e3\'b8\'e2\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b2\'bb\'d0\'d2
\'b5\'c4\'ca\'c7\'a3\'ac\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'c3\'c7\'c3\'bb\'d3\'d0\'d2\'bb\'b8\'f6\'b4\'d3\'c8\'ce\'ce\'f1\'c1\'d0\'b1\'ed\'d6\'d0\'d7\'a2\'cf\'fa\'d2\'bb\'b8\'f6\'c8\'ce\'ce\'f1\'b5\'c4\'b7\'bd\'b7\'a8\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'bc\'c8\'c8\'bb}{\hich\af0\dbch\af17\loch\f0 cleanup_module}{\loch\af0\hich\af0\dbch\f17 \'ba\'af\'ca\'fd\'b2\'bb\'c4\'dc\'b7\'b5\'bb\'d8\'d2\'bb\'b8\'f6\'b4\'ed\'ce\'f3\'c2\'ed\'a3\'a8\'cb\'fc\'ca\'c7}{
\hich\af0\dbch\af17\loch\f0 void}{\loch\af0\hich\af0\dbch\f17 \'d0\'cd\'ba\'af\'ca\'fd\'a3\'a9\'a3\'ac\'c4\'c7\'c3\'b4\'bd\'e2\'be\'f6\'b7\'bd\'b7\'a8\'ca\'c7\'be\'cd\'b2\'bb\'d2\'aa\'c8\'c3\'cb\'fc\'b7\'b5\'bb\'d8\'a1\'a3\loch\af0\hich\af0\dbch\f17 
\'b6\'f8\'ca\'c7\'b5\'f7\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 sleep_on}{\loch\af0\hich\af0\dbch\f17 \'bb\'f2}{\hich\af0\dbch\af17\loch\f0 module_sleep_on}{\loch\af0\hich\af0\dbch\f17 \'a3\'a8\'d7\'a2}{\hich\af0\dbch\af17\loch\f0 10.1}{
\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'b0\'d1}{\hich\af0\dbch\af17\loch\f0 rmmod}{\loch\af0\hich\af0\dbch\f17 \'bd\'f8\'b3\'cc\'b9\'d2\'c6\'f0\'a1\'a3\'d4\'da\'b4\'cb\'d6\'ae\'c7\'b0\'a3\'ac\'cb\'fc\'c9\'e8\'d6\'c3\'d2\'bb\'b8\'f6\'b1\'e4\'c1\'bf\'cd\'a8
\'d6\'aa\'d4\'da\'ca\'b1\'d6\'d3\'d6\'d0\'b6\'cf\'ca\'b1\'b5\'f7\'d3\'c3\'b5\'c4\'ba\'af\'ca\'fd\'cd\'a3\'d6\'b9\'b8\'bd\'bc\'d3\'d7\'d4\'bc\'ba\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c4\'c7\'c3\'b4\'a3\'ac\'d4\'da\'cf\'c2\'b4\'ce\'ca\'b1\'d6\'d3\'d6\'d0
\'b6\'cf\'ca\'b1\'a3\'ac}{\hich\af0\dbch\af17\loch\f0 rmmod}{\loch\af0\hich\af0\dbch\f17 \'bd\'f8\'b3\'cc\'bd\'ab\'b1\'bb\'bb\'bd\'d0\'d1\'a3\'ac\'b6\'f8\'ce\'d2\'c3\'c7\'b5\'c4\'ba\'af\'ca\'fd\'d2\'d1\'be\'ad\'b2\'bb\'d4\'da\'b6\'d3\'c1\'d0\'d6\'d0
\'a3\'ac\'d5\'e2\'d1\'f9\'be\'cd\'bf\'c9\'d2\'d4\'ba\'dc\'b0\'b2\'c8\'ab\'b5\'c4\'c9\'be\'b3\'fd\'c4\'a3\'bf\'e9\'a1\'a3}{
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\hich\af0\dbch\af17\loch\f0 ex }{\b\fs27 \hich\af0\dbch\af17\loch\f0 sched.c}{\hich\af0\dbch\af17\loch\f0  \~\~ }{\kerning0 
\par }{\hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0 /* sched.c - scheduale a functi\hich\af0\dbch\af17\loch\f0 on to be called on 
\par \hich\af0\dbch\af17\loch\f0  * every timer interrupt. */
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Copyright (C) 1998 by Ori Pomerantz */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The necessary header files */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Standard in kernel modules */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/kernel.h>   /* We're doing kernel work */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/module.h>   /* Specifically, a module */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Deal with CONFIG_MODVERSIONS */
\par \hich\af0\dbch\af17\loch\f0 #if CONFIG_MODVERSIONS==1
\par \hich\af0\dbch\af17\loch\f0 #define MODVERSIONS
\par \hich\af0\dbch\af17\loch\f0 #include <linux/modversions.h>
\par \hich\af0\dbch\af17\loch\f0 #endif        
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Necessary because we use the proc fs */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/proc_fs.h>
\par 
\par \hich\af0\dbch\af17\loch\f0 /* We scheduale tasks here */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/tqueue.h>
\par 
\par \hich\af0\dbch\af17\loch\f0 /* We also need the ability to put ourselves to sleep 
\par \hich\af0\dbch\af17\loch\f0  * and wake up later */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/sched.h>
\par 
\par \hich\af0\dbch\af17\loch\f0 /* In 2.2.3 /usr/include/linux/version.h includes a 
\par \hich\af0\dbch\af17\loch\f0  * macro for this, but 2.0.35 doesn't - \hich\af0\dbch\af17\loch\f0 so I add it 
\par \hich\af0\dbch\af17\loch\f0  * here if necessary. */
\par \hich\af0\dbch\af17\loch\f0 #ifndef KERNEL_VERSION
\par \hich\af0\dbch\af17\loch\f0 #define KERNEL_VERSION(a,b,c) ((a)*65536+(b)*256+(c))
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The number of times the timer interrupt has been 
\par \hich\af0\dbch\af17\loch\f0  * called so far */
\par \hich\af0\dbch\af17\loch\f0 static int TimerIntrpt = 0;
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This is used by cleanup, to prevent the module from 
\par \hich\af0\dbch\af17\loch\f0  * being unloaded while intrpt_routine is still in 
\par \hich\af0\dbch\af17\loch\f0  * the task queue */
\par \hich\af0\dbch\af17\loch\f0 static struct wait_queue *WaitQ = NULL;
\par 
\par \hich\af0\dbch\af17\loch\f0 static void intrpt_routine(void *);
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The task queue structure for this task, from \hich\af0\dbch\af17\loch\f0 tqueue.h */
\par \hich\af0\dbch\af17\loch\f0 static struct tq_struct Task = \{
\par \hich\af0\dbch\af17\loch\f0   NULL,   /* Next item in list - queue_task will do 
\par \hich\af0\dbch\af17\loch\f0            * this for us */
\par \hich\af0\dbch\af17\loch\f0   0,      /* A flag meaning we haven't been inserted 
\par \hich\af0\dbch\af17\loch\f0            * into a task queue yet */
\par \hich\af0\dbch\af17\loch\f0   intrpt_routine, /* The function to r\hich\af0\dbch\af17\loch\f0 un */
\par \hich\af0\dbch\af17\loch\f0   NULL    /* The void* parameter for that function */
\par \}\hich\af0\dbch\af17\loch\f0 ;
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This function will be called on every timer 
\par \hich\af0\dbch\af17\loch\f0  * interrupt. Notice the void* pointer - task functions 
\par \hich\af0\dbch\af17\loch\f0  * can be used for more than one purpose, each time 
\par \hich\af0\dbch\af17\loch\f0  * getting a different parameter. */
\par \hich\af0\dbch\af17\loch\f0 static void intrpt_routine(void *irrelevant)
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* Increment the counter */
\par \hich\af0\dbch\af17\loch\f0   TimerIntrpt++;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* If cleanup wants us to die */
\par \hich\af0\dbch\af17\loch\f0   if (WaitQ != NULL) 
\par \hich\af0\dbch\af17\loch\f0     wake_up(&WaitQ);   /* Now cleanup_module can return */
\par \hich\af0\dbch\af17\loch\f0   else
\par \hich\af0\dbch\af17\loch\f0  \hich\af0\dbch\af17\loch\f0    /* Put ourselves back in the task queue */
\par \hich\af0\dbch\af17\loch\f0     queue_task(&Task, &tq_timer);  
\par \}
\par 
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Put data into the proc fs file. */
\par \hich\af0\dbch\af17\loch\f0 int procfile_read(char *buffer, 
\par \hich\af0\dbch\af17\loch\f0                   char **buffer_location, off_t offset, 
\par \hich\af0\dbch\af17\loch\f0                   int buffer_length, int\hich\af0\dbch\af17\loch\f0  zero)
\par \{
\par \hich\af0\dbch\af17\loch\f0   int len;  /* The number of bytes actually used */
\par 
\par \hich\af0\dbch\af17\loch\f0   /* This is static so it will still be in memory 
\par \hich\af0\dbch\af17\loch\f0    * when we leave this function */
\par \hich\af0\dbch\af17\loch\f0   static char my_buffer[80];  
\par 
\par \hich\af0\dbch\af17\loch\f0   static int count = 1;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* We give all of our information in one go, so if 
\par \hich\af0\dbch\af17\loch\f0    * the anybody asks us if we have more information 
\par \hich\af0\dbch\af17\loch\f0    * the answer should always be no. 
\par \hich\af0\dbch\af17\loch\f0    */
\par \hich\af0\dbch\af17\loch\f0   if (offset > 0)
\par \hich\af0\dbch\af17\loch\f0     return 0;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Fill the buffer and get its length */
\par \hich\af0\dbch\af17\loch\f0   len = sprintf(my_buffer, 
\par \hich\af0\dbch\af17\loch\f0                 "Timer was called %d times so far\\n", 
\par \hich\af0\dbch\af17\loch\f0                 TimerIntrpt);
\par \hich\af0\dbch\af17\loch\f0   count++;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Tell the function which called us where the 
\par \hich\af0\dbch\af17\loch\f0    * buffer is */
\par \hich\af0\dbch\af17\loch\f0   *buffer_location = my_buffer;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Return the length */
\par \hich\af0\dbch\af17\loch\f0   return len;
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 struct proc_di\hich\af0\dbch\af17\loch\f0 r_entry Our_Proc_File = 
\par \hich\af0\dbch\af17\loch\f0   \{
\par \hich\af0\dbch\af17\loch\f0     0, /* Inode number - ignore, it will be filled by 
\par \hich\af0\dbch\af17\loch\f0         * proc_register_dynamic */
\par \hich\af0\dbch\af17\loch\f0     5, /* Length of the file name */
\par \hich\af0\dbch\af17\loch\f0     "sched", /* The file name */
\par \hich\af0\dbch\af17\loch\f0     S_IFREG | S_IRUGO, 
\par \hich\af0\dbch\af17\loch\f0     /* File mode - this is a regular file which can
\par \hich\af0\dbch\af17\loch\f0      * be read by its owner, its group, and everybody
\par \hich\af0\dbch\af17\loch\f0      * else */
\par \hich\af0\dbch\af17\loch\f0     1,  /* Number of links (directories where 
\par \hich\af0\dbch\af17\loch\f0          * the file is referenced) */
\par \hich\af0\dbch\af17\loch\f0     0, 0,  /* The uid and gid for the file - we gi\hich\af0\dbch\af17\loch\f0 ve 
\par \hich\af0\dbch\af17\loch\f0             * it to root */
\par \hich\af0\dbch\af17\loch\f0     80, /* The size of the file reported by ls. */
\par \hich\af0\dbch\af17\loch\f0     NULL, /* functions which can be done on the 
\par \hich\af0\dbch\af17\loch\f0            * inode (linking, removing, etc.) - we don't 
\par \hich\af0\dbch\af17\loch\f0            * support any. */
\par \hich\af0\dbch\af17\loch\f0     procfile_read, 
\par \hich\af0\dbch\af17\loch\f0     /* The read fu\hich\af0\dbch\af17\loch\f0 nction for this file, the function called
\par \hich\af0\dbch\af17\loch\f0      * when somebody tries to read something from it. */
\par \hich\af0\dbch\af17\loch\f0     NULL 
\par \hich\af0\dbch\af17\loch\f0     /* We could have here a function to fill the 
\par \hich\af0\dbch\af17\loch\f0      * file's inode, to enable us to play with 
\par \hich\af0\dbch\af17\loch\f0      * permissions, ownership, etc. */
\par \hich\af0\dbch\af17\loch\f0   \}; 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /*\hich\af0\dbch\af17\loch\f0  Initialize the module - register the proc file */
\par \hich\af0\dbch\af17\loch\f0 int init_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* Put the task in the tq_timer task queue, so it 
\par \hich\af0\dbch\af17\loch\f0    * will be executed at next timer interrupt */
\par \hich\af0\dbch\af17\loch\f0   queue_task(&Task, &tq_timer);
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Success if proc_registe\hich\af0\dbch\af17\loch\f0 r_dynamic is a success, 
\par \hich\af0\dbch\af17\loch\f0    * failure otherwise */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE > KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0   return proc_register(&proc_root, &Our_Proc_File);
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0   return proc_register_dynamic(&proc_root, &Our_Proc_File);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Cleanup */
\par \hich\af0\dbch\af17\loch\f0 void cleanup_mo\hich\af0\dbch\af17\loch\f0 dule()
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* Unregister our /proc file */
\par \hich\af0\dbch\af17\loch\f0   proc_unregister(&proc_root, Our_Proc_File.low_ino);
\par \hich\af0\dbch\af17\loch\f0   
\par \hich\af0\dbch\af17\loch\f0   /* Sleep until intrpt_routine is called one last 
\par \hich\af0\dbch\af17\loch\f0    * time. This is necessary, because otherwise we'll 
\par \hich\af0\dbch\af17\loch\f0    * deallocate the memory holding intrpt_routine\hich\af0\dbch\af17\loch\f0  and
\par \hich\af0\dbch\af17\loch\f0    * Task while tq_timer still references them. 
\par \hich\af0\dbch\af17\loch\f0    * Notice that here we don't allow signals to 
\par \hich\af0\dbch\af17\loch\f0    * interrupt us. 
\par \hich\af0\dbch\af17\loch\f0    *
\par \hich\af0\dbch\af17\loch\f0    * Since WaitQ is now not NULL, this automatically 
\par \hich\af0\dbch\af17\loch\f0    * tells the interrupt routine it's time to die. */
\par \hich\af0\dbch\af17\loch\f0  sleep_on(&WaitQ);
\par \}
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard\plain \s1\qj \li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281308}
\hich\af0\dbch\af17\loch\f0 11}{\fs36 \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'d6\'d0\'b6\'cf\'b4\'a6\'c0\'ed\'b3\'cc\'d0\'f2}{\fs36 {\*\bkmkend _Toc491281308}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'b3\'fd\'d7\'ee\'ba\'f3\'d2\'bb
\'d5\'c2\'cd\'e2\'a3\'ac\'c4\'bf\'c7\'b0\'ce\'d2\'c3\'c7\'d4\'da\'c4\'da\'ba\'cb\'d6\'d0\'cb\'f9\'d7\'f6\'b5\'c4\'ca\'c2\'c7\'e9\'be\'cd\'ca\'c7\'cf\'ec\'d3\'a6\'d2\'bb\'b8\'f6\'bd\'f8\'b3\'cc\'b5\'c4\'c7\'eb\'c7\'f3\'a3\'ac\'bf\'c9\'c4\'dc\'cd\'a8
\'b9\'fd\'b4\'a6\'c0\'ed\'d2\'bb\'b8\'f6\'cc\'d8\'ca\'e2\'ce\'c4\'bc\'fe\'a1\'a2\'b7\'a2\'cb\'cd\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 ioctl}{\loch\af0\hich\af0\dbch\f17 \'bb\'f2\'bd\'f8\'d0\'d0\'d2\'bb\'b8\'f6\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3
\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b5\'ab\'ca\'c7\'c4\'da\'ba\'cb\'b5\'c4\'b9\'a4\'d7\'f7\'b2\'bb\'d6\'bb\'ca\'c7\'cf\'ec\'d3\'a6\'bd\'f8\'b3\'cc\'c7\'eb\'c7\'f3\'a3\'ac\'c1\'ed\'d2\'bb\'b8\'f6\'d2\'b2\'ca\'c7\'ba\'dc\'d6\'d8\'d2\'aa\'b5\'c4\'b9\'a4
\'d7\'f7\'ca\'c7\'cf\'f2\'c1\'ac\'bd\'d3\'b5\'bd\'bb\'fa\'c6\'f7\'b5\'c4\'d3\'b2\'bc\'fe\'b7\'a2\'b2\'bc\'c3\'fc\'c1\'ee\'bb\'f2\'cf\'fb\'cf\'a2\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'ba\'cd\'c6\'e4\'cb\'fb\'d3\'b2\'bc\'fe\'b5\'c4\'bd\'bb\'bb\'a5\'d3\'d0\'c1\'bd\'d6\'d6\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b5\'da\'d2\'bb\'d6\'d6\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 CPU}{
\loch\af0\hich\af0\dbch\f17 \'b8\'f8\'d3\'b2\'bc\'fe\'b7\'a2\'c3\'fc\'c1\'ee\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c1\'ed\'d2\'bb\'d6\'d6\'ca\'c7\'d3\'b2\'bc\'fe\'d0\'e8\'d2\'aa\'b8\'e6\'cb\'df}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 
\'d2\'bb\'d0\'a9\'b6\'ab\'ce\'f7\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b5\'da\'b6\'fe\'d6\'d6\'bd\'bb\'bb\'a5\'bd\'d0\'d7\'f6\'d6\'d0\'b6\'cf\'a3\'ac\'cb\'fc\'ba\'dc\'c4\'d1\'ca\'b5\'cf\'d6\'a3\'ac\'d2\'f2\'ce\'aa\'cb\'fc\'d0\'e8\'d2\'aa\'b4\'a6\'c0\'ed
\'d3\'b2\'bc\'fe\'a3\'ac\'b6\'f8\'b2\'bb\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d3\'b2\'bc\'fe\'c9\'e8\'b1\'b8\'cd\'a8\'b3\'a3\'d3\'c9\'d2\'bb\'b8\'f6\'b7\'c7\'b3\'a3\'d0\'a1\'b5\'c4}{
\hich\af0\dbch\af17\loch\f0 ram}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'b6\'f8\'c8\'e7\'b9\'fb\'c4\'e3\'b2\'bb\'d4\'da\'d5\'e2\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 ram}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'b5\'c4\'d0\'c5\'cf\'a2\'bf\'c9\'d3\'c3\'ca\'b1
\'b0\'d1\'cb\'fc\'c3\'c7\'b6\'c1\'b3\'f6\'a3\'ac\'cb\'fc\'c3\'c7\'be\'cd\'bb\'e1\'b6\'aa\'ca\'a7\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d4\'da}{\hich\af0\dbch\af17\loch\f0 Linux}{\loch\af0\hich\af0\dbch\f17 \'cf\'c2\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'d3\'b2\'bc\'fe\'d6\'d0\'b6\'cf\'bd\'d0\'d7\'f6}{\hich\af0\dbch\af17\loch\f0 
IRQ}{\loch\af0\hich\af0\dbch\f17 \'a3\'a8}{\hich\af0\dbch\af17\loch\f0 Interrupt Requests}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'cb\'f5\'d0\'b4\loch\af0\hich\af0\dbch\f17 \'a3\'a9\loch\af0\hich\af0\dbch\f17 \'a1\'a3\'d3\'d0\'c1\'bd\'d6\'d6}{
\hich\af0\dbch\af17\loch\f0 IRQ}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'b6\'cc\'c0\'e0\'d0\'cd\'ba\'cd\'b3\'a4\'c0\'e0\'d0\'cd\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b6\'cc}{\hich\af0\dbch\af17\loch\f0 IRQ}{
\loch\af0\hich\af0\dbch\f17 \'d0\'e8\'d2\'aa\'ba\'dc\'b6\'cc\'b5\'c4\'ca\'b1\'bc\'e4\'a3\'ac\'d4\'da\'b4\'cb\'c6\'da\'bc\'e4\'bb\'fa\'c6\'f7\'b5\'c4\'c6\'e4\'cb\'fb\'b2\'bf\'b7\'d6\'b1\'bb\'cb\'f8\'b6\'a8\'a3\'ac\'b6\'f8\'c7\'d2\'c3\'bb\'d3\'d0\'c6\'e4
\'cb\'fb\'d6\'d0\'b6\'cf\'b1\'bb\'b4\'a6\'c0\'ed\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d2\'bb\'b8\'f6\'b3\'a4}{\hich\af0\dbch\af17\loch\f0 IRQ}{\loch\af0\hich\af0\dbch\f17 \'d0\'e8\'d2\'aa\'bd\'cf\'b3\'a4\'b5\'c4\'ca\'b1\'bc\'e4\'a3\'ac\'d4\'da\'b4\'cb
\'c6\'da\'bc\'e4\'bf\'c9\'c4\'dc\'b7\'a2\'c9\'fa\'c6\'e4\'cb\'fb\'d6\'d0\'b6\'cf\'a3\'a8\'b5\'ab\'b2\'bb\'ca\'c7\'b7\'a2\'d7\'d4\'cd\'ac\'d2\'bb\'b8\'f6\'c9\'e8\'b1\'b8\'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'bf\'c9\'c4\'dc\'b5\'c4
\'bb\'b0\'a3\'ac\'d7\'ee\'ba\'c3\'b0\'d1\'d2\'bb\'b8\'f6\'d6\'d0\'b6\'ce\'c9\'f9\'c3\'f7\'ce\'aa\'b3\'a4\'c0\'e0\'d0\'cd\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'bd\'d3\'b5\'bd\'d2\'bb\'b8\'f6\'d6\'d0\'b6\'cf\'a3\'ac\'cb\'fc\'be\'cd\'bb\'e1\'cd\'a3\'d6\'b9\'d2\'bb\'c7\'d0\'b9\'a4\'d7\'f7\'a3\'a8\'b3\'fd
\'b7\'c7\'cb\'fc\'d5\'fd\'d4\'da\'b4\'a6\'c0\'ed\'d2\'bb\'b8\'f6\'b8\'fc\'d6\'d8\'d2\'aa\'b5\'c4\'d6\'d0\'b6\'cf\'a3\'ac\'d4\'da\'d5\'e2\'d6\'d6\'c7\'e9\'bf\'f6\'cf\'c2\'d2\'aa\'b5\'c8\'b5\'bd\'b8\'fc\'d6\'d8\'d2\'aa\'b5\'c4\'d6\'d0\'b6\'cf\'b4\'a6
\'c0\'ed\'bd\'e1\'ca\'f8\'ba\'f3\'b2\'c5\'bb\'e1\'b4\'a6\'c0\'ed\'d5\'e2\'b8\'f6\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'b6\'cf\'a3\'a9\'a3\'ac\'b0\'d1\'cf\'e0\'b9\'d8\'b5\'c4\'b2\'ce\'ca\'fd\'b4\'e6\'b4\'a2\'b5\'bd\'d5\'bb\'c0\'ef\'a3\'ac\'c8\'bb\'ba\'f3
\'b5\'f7\'d3\'c3\'d6\'d0\'b6\'cf\'b4\'a6\'c0\'ed\'b3\'cc\'d0\'f2\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'d2\'e2\'ce\'b6\'d7\'c5\'d4\'da\'d6\'d0\'b6\'cf\'b4\'a6\'c0\'ed\'b3\'cc\'d0\'f2\'b1\'be\'c9\'ed\'d6\'d0\'d3\'d0\'d0\'a9\'ca\'c2\'c7\'e9\'ca\'c7
\'b2\'bb\'d4\'ca\'d0\'ed\'b5\'c4\'a3\'ac\'d2\'f2\'ce\'aa\'d5\'e2\'ca\'b1\'cf\'b5\'cd\'b3\'b4\'a6\'d4\'da\'d2\'bb\'b8\'f6\'ce\'b4\'d6\'aa\'d7\'b4\'cc\'ac\'a1\'a3\'bd\'e2\'be\'f6\'d5\'e2\'b8\'f6\'ce\'ca\'cc\'e2\'b5\'c4\'b7\'bd\'b7\'a8\'ca\'c7\'c8\'c3
\'d6\'d0\'b6\'cf\'b4\'a6\'c0\'ed\'b3\'cc\'d0\'f2\'d7\'f6\'d0\'e8\'d2\'aa\'c2\'ed\'c9\'cf\'d7\'f6\'b5\'c4\'ca\'c2\'a3\'ac\'cd\'a8\'b3\'a3\'ca\'c7\'b4\'d3\'d3\'b2\'bc\'fe\'b6\'c1\'c8\'a1\'d0\'c5\'cf\'a2\'bb\'f2\'b8\'f8\'d3\'b2\'bc\'fe\'b7\'a2\'cb\'cd
\'d0\'c5\'cf\'a2\'a3\'ac\'c8\'bb\'ba\'f3\'b0\'d1\'b6\'d4\'d0\'c2\'d0\'c5\'cf\'a2\'b5\'c4\'b4\'a6\'c0\'ed\'b5\'f7\'b6\'c8\'b5\'bd\'d2\'d4\'ba\'f3\'c8\'a5\'d7\'f6\'a3\'a8\'d5\'e2\'bd\'d0\'d7\'f6\'b0\'eb\'b5\'d7\'a3\'a9\'a3\'ac\'b7\'b5\'bb\'d8\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'c4\'da\'ba\'cb\'c8\'b7\'b1\'a3\'be\'a1\'bf\'ec\'b5\'f7\'d3\'c3\'b0\'eb\'b5\'d7\'a3\'ac\'b6\'f8\'b5\'b1\'b5\'f7\'d3\'c3\'ca\'b1\'a3\'ac\'c8\'ce\'ba\'ce\'d4\'ca\'d0\'ed\'d4\'da\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'d6\'d0\'d7\'f6
\'b5\'c4\'ca\'c2\'c7\'e9\'be\'cd\'b6\'bc\'bf\'c9\'d2\'d4\'d7\'f6\'c1\'cb\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'ca\'b5\'cf\'d6\'b5\'c4\'b7\'bd\'b7\'a8\'ca\'c7\'d4\'da\'bd\'d3\'b5\'bd\'cf\'e0\'b9\'d8\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 IRQ}{\loch\af0\hich\af0\dbch\f17 \'a3\'a8\'d4\'da}{\hich\af0\dbch\af17\loch\f0 Intel}{
\loch\af0\hich\af0\dbch\f17 \'c6\'bd\'cc\'a8\'c9\'cf\'d3\'d0}{\hich\af0\dbch\af17\loch\f0 16}{\loch\af0\hich\af0\dbch\f17 \'b8\'f6}{\hich\af0\dbch\af17\loch\f0 IRQ}{\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'ca\'b1\'b5\'f7\'d3\'c3\'d6\'d0\'b6\'cf\'b4\'a6
\'c0\'ed\'b3\'cc\'d0\'f2\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'ba\'af\'ca\'fd\'bd\'d3\'b5\'bd}{\hich\af0\dbch\af17\loch\f0 IRQ}{\loch\af0\hich\af0\dbch\f17 \'ba\'c5\'c2\'eb\'a1\'a2\'ba\'af\'ca\'fd\'c3\'fb\'a1\'a2\'b1\'ea\'d6\'be\'a1\'a2
\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 /proc/interrup\hich\af0\dbch\af17\loch\f0 ts}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'c3\'fb\'d7\'d6\'ba\'cd\'b4\'ab\'b8\'f8\'d6\'d0\'b6\'cf\'b4\'a6\'c0\'ed\'b3\'cc\'d0\'f2\'b5\'c4\'d2\'bb\'b8\'f6\'b2\'ce
\'ca\'fd\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b1\'ea\'d6\'be\'d6\'d0\'bf\'c9\'d2\'d4\'b0\'fc\'c0\'a8}{\hich\af0\dbch\af17\loch\f0 SA_SHIRQ}{\loch\af0\hich\af0\dbch\f17 \'c0\'b4\'b1\'ed\'c3\'f7\'c4\'e3\'cf\'a3\'cd\'fb\'ba\'cd\'c6\'e4\'cb\'fb\'b4\'a6
\'c0\'ed\'b3\'cc\'d0\'f2\'b9\'b2\'cf\'ed\'b4\'cb}{\hich\af0\dbch\af17\loch\f0 IRQ}{\loch\af0\hich\af0\dbch\f17 \'a3\'a8\'cd\'a8\'b3\'a3\'ba\'dc\'b6\'e0\'c9\'e8\'b1\'b8\'b9\'ab\'d3\'c3\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 IRQ}{
\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'a3\'ac\'bb\'f2\'d5\'df\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 SA_INTERRUPT}{\loch\af0\hich\af0\dbch\f17 \'b1\'ed\'c3\'f7\'d5\'e2\'ca\'c7\'d2\'bb\'b8\'f6\'bd\'f4\'bc\'b1\'d6\'d0\'b6\'cf\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'ba\'af\'ca\'fd\'bd\'f6\'d4\'da\'b4\'cb}{\hich\af0\dbch\af17\loch\f0 IRQ}{\loch\af0\hich\af0\dbch\f17 \'c3\'bb\'d3\'d0\'c6\'e4\'cb\'fb\'b4\'a6\'c0\'ed\'b3\'cc\'d0\'f2\'bb\'f2\'d0\'e8\'d2\'aa\'b9\'b2\'cf\'ed
\'cb\'f9\'d3\'d0\'b4\'a6\'c0\'ed\'b3\'cc\'d0\'f2\'ca\'b1\'b2\'c5\'bb\'e1\'b3\'c9\'b9\'a6\'d4\'cb\'d0\'d0\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'c4\'c7\'c3\'b4\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'d3\'d0\'c1\'cb\'d6\'d0\'b6\'cf\'b4\'a6\'c0\'ed\'b3\'cc\'d0\'f2\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'c3\'c7
\'be\'cd\'bf\'c9\'d2\'d4\'ba\'cd\'d3\'b2\'bc\'fe\'cd\'a8\'d0\'c5\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'b2\'a2\'c7\'d2\'bf\'c9\'d2\'d4\'ca\'b9\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 queue_task_irq}{\loch\af0\hich\af0\dbch\f17 
\'ba\'cd}{\hich\af0\dbch\af17\loch\f0 tq_immediate}{\loch\af0\hich\af0\dbch\f17 \'ba\'cd}{\hich\af0\dbch\af17\loch\f0 mark_bh(BH_IMMEDIATE)}{\loch\af0\hich\af0\dbch\f17 \'c0\'b4\'b5\'f7\'b6\'c8\'b0\'eb\'b5\'d7\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da}{
\hich\af0\dbch\af17\loch\f0 2.0}{\loch\af0\hich\af0\dbch\f17 \'b0\'e6\'b1\'be\'d6\'d0\'b2\'bb\'c4\'dc\'ca\'b9\'d3\'c3\'b1\'ea\'d7\'bc}{\hich\af0\dbch\af17\loch\f0 queue_task}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'d4\'ad\'d2\'f2\'ca\'c7\'d6\'d0\'b6\'cf
\'bf\'c9\'c4\'dc\'b7\'a2\'c9\'fa\'d4\'da\'c4\'b3\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 q\hich\af0\dbch\af17\loch\f0 ueue_task}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'d6\'d0\'bc\'e4\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'c3\'c7\'d0\'e8\'d2\'aa}{
\hich\af0\dbch\af17\loch\f0 mark_bh}{\loch\af0\hich\af0\dbch\f17 \'ca\'c7\'d2\'f2\'ce\'aa\'d4\'e7\'c6\'da\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 Linux}{\loch\af0\hich\af0\dbch\f17 \'b0\'e6\'b1\'be\'d6\'bb\'d3\'d0\'d2\'bb\'b8\'f6\'b3\'a4\'b6\'c8\'ce\'aa}{
\hich\af0\dbch\af17\loch\f0 32}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'b0\'eb\'b5\'d7\'b6\'d3\'c1\'d0\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'cf\'d6\'d4\'da\'cb\'fc\'c3\'c7\'d6\'d0\'b5\'c4\'d2\'bb\'b8\'f6\'a3\'a8}{\hich\af0\dbch\af17\loch\f0 BH_IMMEDIATE}{
\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'d3\'c3\'d3\'da\'c4\'c7\'d0\'a9\'c3\'bb\'d3\'d0\'b5\'c3\'b5\'bd\'b7\'d6\'c5\'e4\'b8\'f8\'cb\'fc\'c3\'c7\'b5\'c4\'b0\'eb\'b5\'d7\'c8\'eb\'bf\'da\'b5\'c4\'c7\'fd\'b6\'af\'b3\'cc\'d0\'f2\'b5\'c4\'b0\'eb\'b5\'d7\'c1\'b4
\'b1\'ed\'a1\'a3}{
\par }\pard\plain \s2\qj \li0\ri0\sb260\sa260\sl416\slmult1\keep\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \b\fs32\lang1033\langfe2052\kerning2\loch\af1\hich\af1\dbch\af21\cgrid\langnp1033\langfenp2052 {
{\*\bkmkstart _Toc491281309}\hich\af1\dbch\af21\loch\f1 11.1  Intel }{\loch\af1\hich\af1\dbch\f21 \'bd\'e1\'b9\'b9\'c9\'cf\'b5\'c4\'bc\'fc\'c5\'cc}{{\*\bkmkend _Toc491281309}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'d7\'a2\'d2\'e2
\loch\af0\hich\af0\dbch\f17 \'a3\'ba\'b1\'be\'d5\'c2\'cf\'c2\'c3\'e6\'b5\'c4\'c4\'da\'c8\'dd\'b6\'bc\'ca\'c7\'cd\'ea\'c8\'ab\'d5\'eb\'b6\'d4}{\hich\af0\dbch\af17\loch\f0 Intel}{\loch\af0\hich\af0\dbch\f17 \'bd\'e1\'b9\'b9\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'c4\'e3\'b2\'bb\'ca\'c7\'d4\'da}{\hich\af0\dbch\af17\loch\f0 Intel}{\loch\af0\hich\af0\dbch\f17 \'c6\'bd\'cc\'a8\'c9\'cf\'b5\'c4\'bb\'b0\'a3\'ac\'b3\'cc\'d0\'f2\'be\'cd\'b2\'bb\'c4\'dc\'b9\'a4\'d7\'f7\'a3\'ac
\'d2\'b2\'b2\'bb\'c3\'bb\'d3\'d0\'b1\'d8\'d2\'aa\'ca\'d4\'cd\'bc\'b1\'e0\'d2\'eb\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d4\'da\'d0\'b4\'b1\'be\'d5\'c2\'c0\'fd\'d7\'d3\'d6\'d0\'b5\'c4\'b3\'cc\'d0\'f2\'b5\'c4\'ca\'b1\'ba\'f2\'ce\'d2\'d3\'f6\'b5\'bd\'d2\'bb\'b8\'f6\'ce\'ca\'cc\'e2\'a1\'a3\'d2\'bb\'b7\'bd\'c3\'e6\'a3\'ac\'d7\'f7\'ce\'aa\'d2\'bb
\'b8\'f6\'d3\'d0\'d3\'c3\'b5\'c4\'c0\'fd\'d7\'d3\'cb\'fc\'d0\'e8\'d2\'aa\'d4\'da\'c3\'bf\'b8\'f6\'c8\'cb\'b5\'c4\'bb\'fa\'c6\'f7\'c9\'cf\'d4\'cb\loch\af0\hich\af0\dbch\f17 \'d0\'d0\'a3\'ac\'b5\'c3\'b5\'bd\'d5\'fd\'c8\'b7\'b5\'c4\'bd\'e1\'b9\'fb\'a1\'a3
\'c1\'ed\'d2\'bb\'b7\'bd\'c3\'e6\'a3\'ac\'c4\'da\'ba\'cb\'d2\'d1\'be\'ad\'b0\'fc\'ba\'ac\'c1\'cb\'cb\'f9\'d3\'d0\'c6\'d5\'cd\'a8\'c9\'e8\'b1\'b8\'b5\'c4\'c7\'fd\'b6\'af\'b3\'cc\'d0\'f2\'a3\'ac\'d5\'e2\'d0\'a9\'c7\'fd\'b6\'af\'b3\'cc\'d0\'f2\'ba\'cd
\'ce\'d2\'d2\'aa\'d0\'b4\'b5\'c4\'b4\'fa\'c2\'eb\'b2\'bb\'d2\'bb\'b6\'a8\'c4\'dc\'b9\'bb\'b9\'b2\'b4\'e6\'a1\'a3\'ce\'d2\'d5\'d2\'b5\'bd\'b5\'c4\'b7\'bd\'b7\'a8\'ca\'c7\'b8\'f8\'bc\'fc\'c5\'cc\'d6\'d0\'b6\'cf\'d0\'b4\'b5\'e3\'b6\'ab\'ce\'f7\'a3\'ac
\'b2\'a2\'c7\'d2\'ca\'d7\'cf\'c8\'ca\'b9\'d5\'fd\'b3\'a3\'b5\'c4\'bc\'fc\'c5\'cc\'d6\'d0\'b6\'cf\'ce\'de\'d0\'a7\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d2\'f2\'ce\'aa\'d4\'da\'c4\'da\'ba\'cb\'d4\'b4\'ce\'c4\'bc\'fe\'a3\'a8}{\hich\af0\dbch\af17\loch\f0 
drivers/char/keyboard.c}{\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'c0\'ef\'cb\'fc\'ca\'c7\'d7\'f7\'ce\'aa\'d2\'bb\'b8\'f6\'be\'b2\'cc\'ac\'b7\'fb\'ba\'c5\'b1\'bb\'b6\'a8\'d2\'e5\'b5\'c4\'a3\'ac\'c3\'bb\'d3\'d0\'b0\'ec\'b7\'a8\'bb\'d6\'b8\'b4\'cb\'fc\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'d4\'da}{\hich\af0\dbch\af17\loch\f0 insmod}{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b6\'ce\'b4\'fa\'c2\'eb\'c7\'b0\'a3\'ac\'d4\'da\'c1\'ed\'d2\'bb\'b8\'f6\'d6\'d5\'b6\'cb}{\hich\af0\dbch\af17\loch\f0 sleep 120}{
\loch\af0\hich\af0\dbch\f17 \'c9\'cf\'d7\'f6\'d2\'bb\'b4\'ce\'a3\'ac\'c8\'e7\'b9\'fb\'d2\'aa\'c6\'c0\'b9\'c0\'ce\'c4\'bc\'fe}{\tab }{\loch\af0\hich\af0\dbch\f17 \'cf\'b5\'cd\'b3\'b5\'c4\'bb\'b0\'a3\'ac\'d0\'e8\'d2\'aa}{\hich\af0\dbch\af17\loch\f0 reboot}{
\loch\af0\hich\af0\dbch\f17 \'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b6\'ce\'b4\'fa\'c2\'eb\'b0\'d1\'cb\'fc\'d7\'d4\'bc\'ba\'b0\'f3\'b6\'a8\'b5\'bd}{\hich\af0\dbch\af17\loch\f0 IRQ1}{\loch\af0\hich\af0\dbch\f17 \'c9\'cf\'a3\'ac\'d4\'da}{\hich\af0\dbch\af17\loch\f0 Interl}{
\loch\af0\hich\af0\dbch\f17 \'bd\'e1\'b9\'b9\'cf\'c2\'d5\'e2\'ca\'c7\'bc\'fc\'c5\'cc\'bf\'d8\'d6\'c6\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 IRQ}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'bb\'ba\'f3\'a3\'ac\'b5\'b1\'cb\'fc\'bd\'d3
\'b5\'bd\'d2\'bb\'b8\'f6\'bc\'fc\'c5\'cc\'d6\'d0\'b6\'cf\'ca\'b1\'a3\'ac\'b6\'c1\'b3\'f6\'bc\'fc\loch\af0\hich\af0\dbch\f17 \'c5\'cc\'b5\'c4\'d7\'b4\'cc\'ac\'a3\'a8\'d5\'e2\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 inb(0x64)}{\loch\af0\hich\af0\dbch\f17 
\'b5\'c4\'c4\'bf\'b5\'c4\'a3\'a9\'ba\'cd\'d3\'c9\'bc\'fc\'c5\'cc\'b7\'b5\'bb\'d8\'b5\'c4\'c9\'a8\'c3\'e8\'c2\'eb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'bb\'ba\'f3\'a3\'ac\'d6\'bb\'d2\'aa\'c4\'da\'ba\'cb\'c8\'cf\'ce\'aa\'bf\'c9\'d2\'d4\'ca\'b1\'a3\'ac
\'cb\'fc\'be\'cd\'d4\'cb\'d0\'d0}{\hich\af0\dbch\af17\loch\f0 got_char}{\loch\af0\hich\af0\dbch\f17 \'b8\'f8\'b3\'f6\'bc\'fc\'b5\'c4\'b1\'e0\'c2\'eb\'a3\'a8\'c9\'a8\'c3\'e8\'c2\'eb\'b5\'c4\'c7\'b0}{\hich\af0\dbch\af17\loch\f0 7}{
\loch\af0\hich\af0\dbch\f17 \'ce\'bb\'a3\'a9\'ba\'cd\'ca\'c7\'b7\'f1\'b1\'bb\'b0\'b4\'cf\'c2\'b5\'c4\'d0\'c5\'cf\'a2\'a3\'a8\'c8\'e7\'b9\'fb\'b5\'da}{\hich\af0\dbch\af17\loch\f0 8}{\loch\af0\hich\af0\dbch\f17 \'ce\'bb\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 
0}{\loch\af0\hich\af0\dbch\f17 \'d4\'f2\'b1\'ed\'ca\'be\'b0\'b4\'cf\'c2\'a3\'ac\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 1}{\loch\af0\hich\af0\dbch\f17 \'b1\'ed\'ca\'be\'ca\'cd\'b7\'c5\'a3\'a9\'a1\'a3}{
\par }\pard \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\hich\af0\dbch\af17\loch\f0 ex }{\fs27 \hich\af0\dbch\af17\loch\f0 intrpt.c}{\hich\af0\dbch\af17\loch\f0  \~\~ }{\kerning0 
\par }{\hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0 /* intrpt.c - An interrupt handler. */
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Copyright (C) 1998 by Ori Pomerantz */
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* The necessary header files */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Standard in kernel modules */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/kernel.h>   /* We're doing kernel work */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/module.h>   /* Specifically, a module */
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Deal with CONFIG_MODVERSIONS */
\par \hich\af0\dbch\af17\loch\f0 #if CONFIG_MODVERSIONS==1
\par \hich\af0\dbch\af17\loch\f0 #define MODVERSIONS
\par \hich\af0\dbch\af17\loch\f0 #include <linux/modversion\hich\af0\dbch\af17\loch\f0 s.h>
\par \hich\af0\dbch\af17\loch\f0 #endif        
\par 
\par \hich\af0\dbch\af17\loch\f0 #include <linux/sched.h>
\par \hich\af0\dbch\af17\loch\f0 #include <linux/tqueue.h>
\par 
\par \hich\af0\dbch\af17\loch\f0 /* We want an interrupt */
\par \hich\af0\dbch\af17\loch\f0 #include <linux/interrupt.h>
\par 
\par \hich\af0\dbch\af17\loch\f0 #include <asm/io.h>
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* In 2.2.3 /usr/include/linux/version.h includes a 
\par \hich\af0\dbch\af17\loch\f0  * macro for this, but 2.0.35 doesn't - so I add it\hich\af0\dbch\af17\loch\f0  
\par \hich\af0\dbch\af17\loch\f0  * here if necessary. */
\par \hich\af0\dbch\af17\loch\f0 #ifndef KERNEL_VERSION
\par \hich\af0\dbch\af17\loch\f0 #define KERNEL_VERSION(a,b,c) ((a)*65536+(b)*256+(c))
\par \hich\af0\dbch\af17\loch\f0 #endif
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Bottom Half - this will get called by the kernel 
\par \hich\af0\dbch\af17\loch\f0  * as soon as it's safe to do everything normally 
\par \hich\af0\dbch\af17\loch\f0  * allowed by kernel modules. */
\par \hich\af0\dbch\af17\loch\f0 static void got_char(void *scancode)
\par \{
\par \hich\af0\dbch\af17\loch\f0   printk("Scan Code %x %s.\\n",
\par \hich\af0\dbch\af17\loch\f0     (int) *((char *) scancode) & 0x7F,
\par \hich\af0\dbch\af17\loch\f0     *((char *) scancode) & 0x80 ? "Released" : "Pressed");
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* This function services keyboard interrupts. It reads 
\par \hich\af0\dbch\af17\loch\f0  * the relevant information\hich\af0\dbch\af17\loch\f0  from the keyboard and then 
\par \hich\af0\dbch\af17\loch\f0  * scheduales the bottom half to run when the kernel
\par \hich\af0\dbch\af17\loch\f0  * considers it safe. */
\par \hich\af0\dbch\af17\loch\f0 void irq_handler(int irq, 
\par \hich\af0\dbch\af17\loch\f0                  void *dev_id, 
\par \hich\af0\dbch\af17\loch\f0                  struct pt_regs *regs)
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* This variables are static because they need \hich\af0\dbch\af17\loch\f0 to be 
\par \hich\af0\dbch\af17\loch\f0    * accessible (through pointers) to the bottom 
\par \hich\af0\dbch\af17\loch\f0    * half routine. */
\par \hich\af0\dbch\af17\loch\f0   static unsigned char scancode;
\par \hich\af0\dbch\af17\loch\f0   static struct tq_struct task = 
\par \hich\af0\dbch\af17\loch\f0         \{NULL, 0, got_char, &scancode\};
\par \hich\af0\dbch\af17\loch\f0   unsigned char status;
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Read keyboard status */
\par \hich\af0\dbch\af17\loch\f0   status = inb(0x64);
\par \hich\af0\dbch\af17\loch\f0   scancode = inb(0x60);
\par \hich\af0\dbch\af17\loch\f0   
\par \hich\af0\dbch\af17\loch\f0   /* Scheduale bottom half to run */
\par \hich\af0\dbch\af17\loch\f0 #if LINUX_VERSION_CODE > KERNEL_VERSION(2,2,0)
\par \hich\af0\dbch\af17\loch\f0   queue_task(&task, &tq_immediate);
\par \hich\af0\dbch\af17\loch\f0 #else
\par \hich\af0\dbch\af17\loch\f0   queue_task_irq(&task, &tq_immediate);
\par \hich\af0\dbch\af17\loch\f0 #endif
\par \hich\af0\dbch\af17\loch\f0   mark_bh(IMMEDIATE_BH);
\par \}
\par 
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* I\hich\af0\dbch\af17\loch\f0 nitialize the module - register the IRQ handler */
\par \hich\af0\dbch\af17\loch\f0 int init_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* Since the keyboard handler won't co-exist with 
\par \hich\af0\dbch\af17\loch\f0    * another handler, such as us, we have to disable 
\par \hich\af0\dbch\af17\loch\f0    * it (free its IRQ) before we do anything. Since we 
\par \hich\af0\dbch\af17\loch\f0    * don't know where \hich\af0\dbch\af17\loch\f0 it is, there's no way to 
\par \hich\af0\dbch\af17\loch\f0    * reinstate it later - so the computer will have to 
\par \hich\af0\dbch\af17\loch\f0    * be rebooted when we're done.
\par \hich\af0\dbch\af17\loch\f0    */
\par \hich\af0\dbch\af17\loch\f0   free_irq(1, NULL);
\par 
\par \hich\af0\dbch\af17\loch\f0   /* Request IRQ 1, the keyboard IRQ, to go to our 
\par \hich\af0\dbch\af17\loch\f0    * irq_handler. */
\par \hich\af0\dbch\af17\loch\f0   return request_irq(
\par \hich\af0\dbch\af17\loch\f0     1,  /* The number of the keyboard IRQ on PCs */ 
\par \hich\af0\dbch\af17\loch\f0     irq_handler,  /* our handler */
\par \hich\af0\dbch\af17\loch\f0     SA_SHIRQ, 
\par \hich\af0\dbch\af17\loch\f0     /* SA_SHIRQ means we're willing to have othe
\par \hich\af0\dbch\af17\loch\f0      * handlers on this IRQ.
\par \hich\af0\dbch\af17\loch\f0      *
\par \hich\af0\dbch\af17\loch\f0      * SA_INTERRUPT can be used to make the
\par \hich\af0\dbch\af17\loch\f0      * handler into a f\hich\af0\dbch\af17\loch\f0 ast interrupt. 
\par \hich\af0\dbch\af17\loch\f0      */
\par \hich\af0\dbch\af17\loch\f0     "test_keyboard_irq_handler", NULL);
\par \}
\par 
\par 
\par \hich\af0\dbch\af17\loch\f0 /* Cleanup */
\par \hich\af0\dbch\af17\loch\f0 void cleanup_module()
\par \{
\par \hich\af0\dbch\af17\loch\f0   /* This is only here for completeness. It's totally 
\par \hich\af0\dbch\af17\loch\f0    * irrelevant, since we don't have a way to restore 
\par \hich\af0\dbch\af17\loch\f0    * the normal keyboard interrupt so th\hich\af0\dbch\af17\loch\f0 e computer
\par \hich\af0\dbch\af17\loch\f0    * is completely useless and has to be rebooted. */
\par \hich\af0\dbch\af17\loch\f0   free_irq(1, NULL);
\par \}
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard\plain \s1\qj \li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281310}
\hich\af0\dbch\af17\loch\f0 12}{\fs36 \loch\af0\hich\af0\dbch\f17 \'a3\'ae\'b6\'d4\'b3\'c6\'b6\'e0\'b4\'a6\'c0\'ed}{\fs36 {\*\bkmkend _Toc491281310}
\par }\pard\plain \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\hich\af0\dbch\af17\loch\f0    }{\loch\af0\hich\af0\dbch\f17 \'cc\'e1
\'b8\'df\'d3\'b2\'bc\'fe\'d0\'d4\'c4\'dc\'b5\'c4\'d7\'ee\'bc\'f2\'b5\'a5\'a3\'a8\'d7\'ee\'b1\'e3\'d2\'cb\'a3\'a9\'b5\'c4\'b7\'bd\'b7\'a8\'ca\'c7\'d4\'da\'d6\'f7\'b0\'e5\'c9\'cf\'d4\'f6\'bc\'d3}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 
\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'bf\'c9\'d2\'d4\'c8\'c3\'b2\'bb\'cd\'ac}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'d7\'f6\'b2\'bb\'cd\'ac\'b9\'a4\'d7\'f7\'a3\'a8\'b7\'c7\'b6\'d4\'b3\'c6\'b6\'e0\'b4\'a6\'c0\'ed\'a3\'a9
\'bb\'f2\'d5\'df\'c8\'c3\'cb\'fc\'c3\'c7\'b2\'a2\'d0\'d0\'d4\'cb\'d0\'d0\'a3\'ac\'d7\'f6\'cf\'e0\'cd\'ac\'b9\'a4\'d7\'f7\'a3\'a8\'b6\'d4\'b3\'c6\'b6\'e0\'b4\'a6\'c0\'ed\'a3\'ac\'d2\'b2\'bd\'d0}{\hich\af0\dbch\af17\loch\f0  SMP}{
\loch\af0\hich\af0\dbch\f17 \'a3\'a9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d3\'d0\'d0\'a7\'b5\'c4\'bd\'f8\'d0\'d0\'b7\'c9\'b6\'d4\'b3\'c6\'b6\'e0\'b4\'a6\'c0\'ed\'d0\'e8\'d2\'aa\'d3\'d0\'b6\'d4\'bc\'c6\'cb\'e3\'bb\'fa\'c8\'ce\'ce\'f1\'d6\'b4\'d0\'d0
\'d7\'a8\'d2\'b5\'d6\'aa\'ca\'b6\'a3\'ac\'b5\'ab\'d4\'da\'d2\'bb\'b0\'e3\'b2\'d9\'d7\'f7\'cf\'b5\'cd\'b3\'b1\'c8\loch\af0\hich\af0\dbch\f17 \'c8\'e7}{\hich\af0\dbch\af17\loch\f0 Linux}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'d5\'e2\'ca\'c7\'b2\'bb\'bf\'c9
\'d6\'aa\'b5\'c4\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c1\'ed\'d2\'bb\'b7\'bd\'c3\'e6\'a3\'ac\'b6\'d4\'b3\'c6\'b6\'e0\'b4\'a6\'c0\'ed\'cf\'e0\'b6\'d4\'c8\'dd\'d2\'d7\'ca\'b5\'cf\'d6\'a1\'a3\'cb\'f9\'ce\'bd\'cf\'e0\'b6\'d4\'a3\'ac\'be\'cd\'ca\'c7\'cb\'b5
\'b2\'bb\'ca\'c7\'d5\'e6\'b5\'c4\'ba\'dc\'c8\'dd\'d2\'d7\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da\'b6\'d4\'b3\'c6\'b6\'e0\'b4\'a6\'c0\'ed\'bb\'b7\'be\'b3\'c0\'ef\'a3\'ac\'cb\'f9\'d3\'d0}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 
\'b9\'b2\'cf\'ed\'cd\'ac\'d2\'bb\'c4\'da\'b4\'e6\'a3\'ac\'c4\'c7\'c3\'b4\'a3\'ac\'d4\'da\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'c9\'cf\'d4\'cb\'d0\'d0\'b5\'c4\'b4\'fa\'c2\'eb\'bb\'e1\'d3\'b0\'cf\'ec\'b1\'bb\'c1\'ed
\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'ca\'b9\'d3\'c3\'b5\'c4\'c4\'da\'b4\'e6\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c4\'e3\'be\'cd\'b2\'bb\'c4\'dc\'c8\'b7\'b1\'a3\'c4\'e3\'d4\'da\'c4\'b3\'d2\'bb\'d0\'d0\'c9\'e8
\'b6\'a8\'b5\'c4\'b1\'e4\'c1\'bf\'d4\'da\'cf\'c2\'d2\'bb\'d0\'d0\'c8\'d4\'c8\'bb\'ca\'c7\'d4\'ad\'c0\'b4\'b5\'c4\'d6\'b5}{\loch\af0\dbch\af17\hich\f0 \emdash \emdash }{\loch\af0\hich\af0\dbch\f17 \'c1\'ed\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 CPU}{
\loch\af0\hich\af0\dbch\f17 \'bf\'c9\'c4\'dc\'d4\'da\'c4\'e3\'c3\'bb\'bf\'b4\'b5\'bd\'b5\'c4\'ca\'b1\'ba\'f2\'b8\'c4\'b1\'e4\'c1\'cb\'cb\'fc\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'cf\'d4\'c8\'bb\'a3\'ac\'b2\'bb\'c4\'dc\'d5\'e2\'d1\'f9\'b1\'e0\'b3\'cc
\'a1\'a3}{
\par }\pard \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\loch\af0\hich\af0\dbch\f17 \'d4\'da\'bd\'f8\'b3\'cc\'b1\'e0\'b3\'cc\'c0\'ef\'d5\'e2\'b2\'bb\'ca\'c7\'d2\'bb\'b8\'f6\'ce\'ca\'cc\'e2\'a3\'ac\'d2\'f2\'ce\'aa\'d4\'da
\'c4\'b3\'d2\'bb\'ca\'b1\'bf\'cc\'d6\'bb\'d3\'d0\'d2\'bb\'b8\'f6\'bd\'f8\'b3\'cc\'d4\'da\'b4\'a6\'c0\'ed\'bb\'fa\'c9\'cf\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c1\'ed\'d2\'bb\'b7\'bd\'c3\'e6\'a3\'ac\'c4\'da\'ba\'cb\'bf\'c9\'d2\'d4\'d4\'cb\'d0\'d0\'d4\'da
\'b2\'bb\'cd\'ac}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'c9\'cf\'b5\'c4\'b2\'bb\'cd\'ac\'bd\'f8\'b3\'cc\'b5\'f7\'d3\'c3\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d4\'da}{\hich\af0\dbch\af17\loch\f0 2.0.x}{\loch\af0\hich\af0\dbch\f17 \'b0\'e6\'d6\'d0\'a3\'ac\'d5\'e2\'b2\'bb\'ca\'c7\'b8\'f6\'ce\'ca\'cc\'e2\'a3\'ac\'d2\'f2\'ce\'aa\'d5\'fb\'b8\'f6\'c4\'da\'ba\'cb\'d4\'da\'d2\'bb\'b8\'f6
\'b4\'f3\'b5\'c4\'c1\'ac\'bb\'b7\'cb\'f8\'d6\'d0\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'be\'cd\'ca\'c7\loch\af0\hich\af0\dbch\f17 \'cb\'b5\'c8\'e7\'b9\'fb\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'d4\'da\'c4\'da
\'ba\'cb\'d6\'d0\'a3\'ac\'b6\'f8\'d3\'d0\'c1\'ed\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'cf\'a3\'cd\'fb\'bd\'f8\'c8\'eb\'a3\'ac\'b1\'c8\'c8\'e7\'d2\'f2\'ce\'aa\'d2\'bb\'b8\'f6\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'a3\'ac
\'c4\'c7\'c3\'b4\'cb\'fc\'b1\'d8\'d0\'eb\'b5\'c8\'c7\'b0\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'b9\'a4\'d7\'f7\'cd\'ea\'b3\'c9\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'ca\'b9}{\hich\af0\dbch\af17\loch\f0 SMP}{
\loch\af0\hich\af0\dbch\f17 \'ba\'dc\'b0\'b2\'c8\'ab\'a3\'ac\'b5\'ab\'ca\'c7\'d2\'b2\'ba\'dc\'b5\'cd\'d0\'a7\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'d4\'da}{\hich\af0\dbch\af17\loch\f0 2.2.x}{\loch\af0\hich\af0\dbch\f17 \'b0\'e6\'d6\'d0\'a3\'ac\'bc\'b8\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'bf\'c9\'d2\'d4\'cd\'ac\'ca\'b1\'d4\'da}{
\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'ca\'c7\'c4\'a3\'bf\'e9\'b1\'e0\'d0\'b4\'d5\'df\'d0\'e8\'d2\'aa\'d7\'a2\'d2\'e2\'b5\'c4\'ce\'ca\'cc\'e2\'a1\'a3\loch\af0\hich\af0\dbch\f17 
\'ce\'d2\'d2\'d1\'be\'ad\'c8\'c3\'c8\'cb\'b8\'f8\'ce\'d2\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 SMP}{\loch\af0\hich\af0\dbch\f17 \'ba\'d0\'a3\'ac\'cf\'a3\'cd\'fb\'b1\'be\'ca\'e9\'b5\'c4\'cf\'c2\'d2\'bb\'b0\'e6\'bf\'c9\'d2\'d4\'d3\'d0\'b8\'fc\'b6\'e0
\'b9\'d8\'d3\'da}{\hich\af0\dbch\af17\loch\f0 SMP}{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'bd\'e9\'c9\'dc\'a1\'a3}{
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard\plain \s1\qj \li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281311}
\loch\af0\hich\af0\dbch\f17 \'b3\'a3\loch\af0\hich\af0\dbch\f17 \'bc\'fb\'b5\'c4\'b4\'ed\'ce\'f3}{\fs36 {\*\bkmkend _Toc491281311}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'d4\'da\'ce\'d2\'b8\'e6\'cb\'df
\'c4\'e3\'c3\'c7\'bd\'f8\'c8\'eb\'ca\'b5\'bc\'f9\'d0\'b4\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'c7\'b0\'a3\'ac\'bb\'b9\'d3\'d0\'bc\'b8\'b8\'f6\'b5\'d8\'b7\'bd\'d0\'e8\'d2\'aa\'cc\'e1\'d0\'d1\'d2\'bb\'cf\'c2\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb
\'b7\'a2\'c9\'fa\'c1\'cb\'b2\'bb\'ba\'c3\'b5\'c4\'ca\'c2\'c7\'e9\'b6\'f8\'ce\'d2\'c3\'bb\'d3\'d0\'be\'af\'b8\'e6\'a3\'ac\'c7\'eb\'b0\'d1\loch\af0\hich\af0\dbch\f17 \'ce\'ca\'cc\'e2\'b1\'a8\'b8\'e6\'b8\'f8\'ce\'d2\'b2\'a2\'c7\'d2\'cb\'f7\'c8\'a1\'c4\'fa
\'ce\'aa\'b4\'cb\'ca\'e9\'b8\'f8\'ce\'d2\'b5\'c4\'b1\'a8\'b3\'ea\'b5\'c4\'c8\'ab\'b6\'ee\'c5\'e2\'b3\'a5\'a1\'a3}{
\par {\listtext\pard\plain\b\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 1\dbch\f17 \'a3\'ae\tab}}\pard \qj \fi-360\li360\ri0\nowidctlpar\jclisttab\tx360\aspalpha\aspnum\faauto\ls5\adjustright\rin0\lin360\itap0 {\b \loch\af0\hich\af0\dbch\f17 \'ca\'b9
\'d3\'c3\'b1\'ea\'d7\'bc\'bf\'e2\'a1\'a3}{\loch\af0\hich\af0\dbch\f17 \'c4\'e3\'b2\'bb\'c4\'dc\'c4\'c7\'d1\'f9\'d7\'f6\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'d6\'d0\'c4\'e3\'d6\'bb\'c4\'dc\'ca\'b9\'d3\'c3\'c4\'da
\'ba\'cb\'ba\'af\'ca\'fd\'a3\'ac\'cb\'fc\'c3\'c7\'be\'cd\'ca\'c7\'d4\'da}{\hich\af0\dbch\af17\loch\f0 ./proc/ksyms}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'b5\'c4\'c4\'c7\'d0\'a9\'a1\'a3}{
\par {\listtext\pard\plain\b\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 2\dbch\f17 \'a3\'ae\tab}}{\b \loch\af0\hich\af0\dbch\f17 \'d7\'f7\'b7\'cf\'d6\'d0\'b6\'cf\'a1\'a3}{\loch\af0\hich\af0\dbch\f17 \'d2\'b2\'d0\'ed\'c4\'e3\'d0\'e8\'d2\'aa\'d4\'da
\'b6\'cc\'ca\'b1\'bc\'e4\'c4\'da\'d5\'e2\'d1\'f9\'d7\'f6\'a3\'ac\'d5\'e2\'ca\'c7\'bf\'c9\'d2\'d4\'b5\'c4\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b5\'ab\'ca\'c7\'c8\'e7\'b9\'fb\'c4\'e3\'c3\'bb\'d3\'d0\'d6\'d8\'d0\'c2\'d6\'d8\'d0\'c2\'ca\'b9\'cb\'fc\'c3\'c7
\'bf\'c9\'d3\'c3\'a3\'ac\'c4\'c7\'c3\'b4\'c4\'e3\'b5\'c4\'cf\'b5\'cd\'b3\'be\'cd\'bb\'e1\'cb\'c0\'bb\'fa\'a3\'ac\'b6\'f8\'c4\'e3\'d0\'e8\'d2\'aa\'b9\'d8\'bb\'fa\'a1\'a3}{
\par {\listtext\pard\plain\b\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 3\dbch\f17 \'a3\'ae\tab}}{\b \loch\af0\hich\af0\dbch\f17 \'c3\'b0\'cf\'d5\'a1\'a3}{\loch\af0\hich\af0\dbch\f17 \'d2\'b2\'d0\'ed\'ce\'d2\'b2\'bb\'d0\'e8\'d2\'aa\'be\'af\'b8\'e6
\'c4\'e3\'d5\'e2\'d2\'bb\'cc\'f5\'a3\'ac\'b5\'ab\'ca\'c7\'ce\'d2\'c8\'cf\'ce\'aa\'bb\'b9\'ca\'c7\'d0\'e8\'d2\'aa\'a3\'ac\'d2\'d4\'b7\'c0\'cd\'f2\'d2\'bb\'a1\'a3}{
\par }\pard\plain \s1\qj \fi707\li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\cufi200 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281312
}\hich\af0\dbch\af17\loch\f0 2.0}{\fs36 \loch\af0\hich\af0\dbch\f17 \'ba\'cd}{\fs36 \hich\af0\dbch\af17\loch\f0 2.2}{\fs36 \loch\af0\hich\af0\dbch\f17 \'b0\'e6\'b1\'be\'b5\'c4\'c7\'f8\'b1\'f0}{\fs36 {\*\bkmkend _Toc491281312}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'d2\'d4\'ce\'d2\'b6\'d4\'d5\'fb
\'b8\'f6\'c4\'da\'ba\'cb\'b5\'c4\'c4\'a3\'bf\'e9\'b5\'c4\'c1\'cb\'bd\'e2\'bb\'b9\'b2\'bb\'c4\'dc\'d0\'b4\'b3\'f6\'cb\'fc\'c3\'c7\'cb\'f9\'d3\'d0\'b5\'c4\'c7\'f8\'b1\'f0\'b5\'c4\'ce\'c4\'b5\'b5\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da\'d7\'aa\'bb\'bb
\'d5\'e2\'d0\'a9\'c0\'fd\'d7\'d3\'a3\'a8\loch\af0\hich\af0\dbch\f17 \'bb\'f2\'d5\'df\'ca\'b5\'bc\'ca\'b5\'c4\'cb\'b5\'a3\'ac\'ca\'c7\'ca\'b9\'d3\'c3\'c1\'cb}{\hich\af0\dbch\af17\loch\f0 Emmanuel Papirakis }{\loch\af0\hich\af0\dbch\f17 \'b5\'c4\'b8\'c4
\'b1\'e4\'a3\'a9\'b5\'c4\'b9\'fd\'b3\'cc\'d6\'d0\'a3\'ac\'ce\'d2\'d3\'f6\'b5\'bd\'c1\'cb\'cf\'c2\'c3\'e6\'b5\'c4\'c7\'f8\'b1\'f0\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'b0\'d1\'cb\'fc\'c3\'c7\'c1\'d0\'b3\'f6\'c0\'b4\'b0\'ef\'d6\'fa\'c4\'da\'ba\'cb
\'c4\'a3\'bf\'e9\'b3\'cc\'d0\'f2\'d4\'b1\'a3\'ac\'cc\'d8\'b1\'f0\'ca\'c7\'c4\'c7\'d0\'a9\'d1\'a7\'cf\'b0\'b9\'fd\'b1\'be\'ca\'e9\'c7\'b0\'c3\'e6\'b8\'f7\'b0\'e6\'ca\'ec\'cf\'a4\'ce\'d2\'ca\'b9\'d3\'c3\'b5\'c4\'bc\'bc\'ca\'f5\'b5\'c4\'b3\'cc\'d0\'f2
\'d4\'b1\'a3\'ac\'c0\'b4\'d7\'aa\'bb\'af\'b5\'bd\'d0\'c2\'b5\'c4\'b0\'e6\'b1\'be\'a1\'a3}{
\par {\listtext\pard\plain\b\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 1\dbch\f17 \'a3\'ae\tab}}\pard \qj \fi-360\li360\ri0\nowidctlpar\jclisttab\tx360\aspalpha\aspnum\faauto\ls6\adjustright\rin0\lin360\itap0 {\b \hich\af0\dbch\af17\loch\f0 
Asm/success.h }{\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'c4\'e3\'d0\'e8\'d2\'aa}{\hich\af0\dbch\af17\loch\f0 put_user}{\loch\af0\hich\af0\dbch\f17 \'bb\'f2}{\hich\af0\dbch\af17\loch\f0 get_user}{\loch\af0\hich\af0\dbch\f17 \'c4\'e3\'d0\'e8\'d2\'aa
\'b0\'fc\'ba\'ac\'cb\'fc\'a1\'a3}{
\par {\listtext\pard\plain\b\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 2\dbch\f17 \'a3\'ae\tab}}{\b \hich\af0\dbch\af17\loch\f0 Get_user }{\loch\af0\hich\af0\dbch\f17 \'d4\'da}{\hich\af0\dbch\af17\loch\f0 2.2}{\loch\af0\hich\af0\dbch\f17 \'b0\'e6
\'d6\'d0\loch\af0\hich\af0\dbch\f17 \'a3\'ac}{\hich\af0\dbch\af17\loch\f0 get_user}{\loch\af0\hich\af0\dbch\f17 \'bd\'d3\'b5\'bd\'d6\'b8\'cf\'f2\'ce\'d2\'c3\'c7\'b5\'c4\'c4\'da\'b4\'e6\'b5\'c4\'d6\'b8\'d5\'eb\'ba\'cd\'d6\'b8\'cf\'f2\'d3\'c3\'b4\'cb
\'d0\'c5\'cf\'a2\'c9\'e8\'d6\'c3\'c4\'da\'ba\'cb\'d6\'d0\'b5\'c4\'b1\'e4\'c1\'bf\'b5\'c4\'d6\'b8\'d5\'eb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'ad\'d2\'f2\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 get_user}{\loch\af0\hich\af0\dbch\f17 \'bf\'c9\'d2\'d4
\'d2\'bb\'b4\'ce\'b6\'c1}{\hich\af0\dbch\af17\loch\f0 2}{\loch\af0\hich\af0\dbch\f17 \'bb\'f2}{\hich\af0\dbch\af17\loch\f0 4}{\loch\af0\hich\af0\dbch\f17 \'b8\'f6\'d7\'d6\'bd\'da\'a3\'ac\'c8\'e7\'b9\'fb\'d2\'aa\'b6\'c1\'b5\'c4\'b1\'e4\'c1\'bf\'d3\'d0}{
\hich\af0\dbch\af17\loch\f0 2}{\loch\af0\hich\af0\dbch\f17 \'bb\'f2}{\hich\af0\dbch\af17\loch\f0 4}{\loch\af0\hich\af0\dbch\f17 \'b8\'f6\'d7\'d6\'bd\'da\'b3\'a4\'b5\'c4\'bb\'b0\'a1\'a3}{
\par {\listtext\pard\plain\b\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 3\dbch\f17 \'a3\'ae\tab}}{\b \hich\af0\dbch\af17\loch\f0 File_operations }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'bd\'e1\'b9\'b9\'cc\'e5\'cf\'d6\'d4\'da\'d4\'da}{
\hich\af0\dbch\af17\loch\f0 open}{\loch\af0\hich\af0\dbch\f17 \'ba\'cd}{\hich\af0\dbch\af17\loch\f0 close}{\loch\af0\hich\af0\dbch\f17 \'d6\'ae\'bc\'e4\'d3\'d0\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 flush}{\loch\af0\hich\af0\dbch\f17 \'ba\'af
\'ca\'fd\'a1\'a3}{
\par {\listtext\pard\plain\b\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 4\dbch\f17 \'a3\'ae\tab}}{\b \hich\af0\dbch\af17\loch\f0 Close in file_open }{\loch\af0\hich\af0\dbch\f17 \'d4\'da}{\hich\af0\dbch\af17\loch\f0 2.2}{\loch\af0\hich\af0\dbch\f17 
\'b0\'e6\'d6\'d0\loch\af0\hich\af0\dbch\f17 \'a3\'ac}{\hich\af0\dbch\af17\loch\f0 close}{\loch\af0\hich\af0\dbch\f17 \'b7\'b5\'bb\'d8\'d2\'bb\'b8\'f6\'d5\'fb\'d0\'cd\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'cb\'f9\'d2\'d4\'cb\'fc
\'d4\'ca\'d0\'ed\'ca\'a7\'b0\'dc\'a1\'a3}{
\par {\listtext\pard\plain\b\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 5\dbch\f17 \'a3\'ae\tab}}{\b \hich\af0\dbch\af17\loch\f0 Read and write in file_operations }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'ba\'af\'ca\'fd\'cd\'b7\'b8\'c4\'b1\'e4
\'c1\'cb\'a1\'a3\'cb\'fc\'c3\'c7\'cf\'d6\'d4\'da\'b7\'b5\'bb\'d8\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 ssize_t}{\loch\af0\hich\af0\dbch\f17 \'b6\'f8\'b2\'bb\'ca\'c7\'d5\'fb\'ca\'fd\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 
\'cb\'fc\'c3\'c7\'b5\'c4\'b2\'ce\'ca\'fd\'c1\'d0\'b1\'ed\'d2\'b2\'b8\'c4\'b1\'e4\'c1\'cb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'cb\'f7\'d2\'fd\'bd\'da\'b5\'e3\'b2\'bb\'d4\'d9\'ca\'c7\'d2\'bb\'b8\'f6\'b2\'ce\'ca\'fd\'a3\'ac\'b6\'f8\'ce\'c4\'bc\'fe\'d6\'d0
\'b5\'c4\'c6\'ab\'d2\'c6\'b5\'d8\'d6\'b7\'b3\'c9\'c1\'cb\'d2\'bb\'b8\'f6\'b2\'ce\'ca\'fd\'a1\'a3}{
\par {\listtext\pard\plain\b\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 6\dbch\f17 \'a3\'ae\tab}}{\b \hich\af0\dbch\af17\loch\f0 Proc_register_dynamic }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'b8\'f6\'ba\'af\'ca\'fd\'d2\'d1\'b2\'bb\'b4\'e6\'d4\'da
\'a1\'a3\'b4\'fa\'cc\'e6\'cb\'fc\'b5\'c4\'ca\'c7\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'b5\'f7\'d3\'c3\'d5\'fd\'b3\'a3\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 proc_\hich\af0\dbch\af17\loch\f0 register}{\loch\af0\hich\af0\dbch\f17 
\'a3\'ac\loch\af0\hich\af0\dbch\f17 \'b0\'d1}{\hich\af0\dbch\af17\loch\f0 0}{\loch\af0\hich\af0\dbch\f17 \'d0\'b4\'c8\'eb\'d5\'e2\'b8\'f6\'bd\'e1\'b9\'b9\'cc\'e5\'b5\'c4\'cb\'f7\'d2\'fd\'bd\'da\'b5\'e3\'d3\'f2\'d6\'d0\'a1\'a3}{
\par {\listtext\pard\plain\b\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 7\dbch\f17 \'a3\'ae\tab}}{\b \hich\af0\dbch\af17\loch\f0 Signals }{\loch\af0\hich\af0\dbch\f17 \'c8\'ce\'ce\'f1\'bd\'e1\'b9\'b9\'d6\'d0\'b5\'c4\'d0\'c5\'ba\'c5\'c1\'bf\'b2\'bb
\'d4\'d9\'ca\'c7\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 32}{\loch\af0\hich\af0\dbch\f17 \'ce\'bb\'d5\'fb\'ca\'fd\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'b6\'f8\'ca\'c7\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 _NSIG_WORDS
}{\loch\af0\hich\af0\dbch\f17 \'d5\'fb\'ca\'fd\'ca\'fd\'d7\'e9\'a1\'a3}{
\par {\listtext\pard\plain\b\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 8\dbch\f17 \'a3\'ae\tab}}{\b \hich\af0\dbch\af17\loch\f0 Queue_task_irq }{\loch\af0\hich\af0\dbch\f17 \'bc\'b4\'ca\'b9\'c4\'e3\'d2\'aa\'b5\'f7\'b6\'c8\'d2\'bb\'b8\'f6\'b4\'d3
\'d6\'d0\'b6\'cf\'b4\'a6\'c0\'ed\'b3\'cc\'d0\'f2\'d6\'d0\'b7\'a2\'c9\'fa\'b5\'c4\'c8\'ce\'ce\'f1\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'c4\'e3\'d2\'b2\'d2\'aa\'ca\'b9\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 queue_task}{
\loch\af0\hich\af0\dbch\f17 \'b6\'f8\'b2\'bb\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 queue_task_irq}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3}{
\par {\listtext\pard\plain\b\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 9\dbch\f17 \'a3\'ae\tab}}{\b \hich\af0\dbch\af17\loch\f0 Module Parameters }{\loch\af0\hich\af0\dbch\f17 \'c4\'e3\'b2\'bb\'d0\'e8\'d2\'aa\'b0\'d1\'c4\'a3\'bf\'e9\'b2\'ce\'ca\'fd
\'c9\'f9\'c3\'f7\'ce\'aa\'c8\'ab\'be\'d6\'b1\'e4\'c1\'bf\'c1\'cb\'a1\'a3\'d4\'da}{\hich\af0\dbch\af17\loch\f0 2.2}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'c4\'e3\'b1\'d8\'d0\'eb\'d2\'aa}{\hich\af0\dbch\af17\loch\f0 MODULE_PARM}{\loch\af0\hich\af0\dbch\f17 
\'c0\'b4\'c9\'f9\'c3\'f7\'cb\'fc\'c3\'c7\'b5\'c4\'c0\'e0\'d0\'cd\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'ca\'c7\'d2\'bb\'b8\'f6\'b4\'f3\'b5\'c4\'b8\'c4\'bd\'f8\'a3\'ac\'d2\'f2\'ce\'aa\'cb\'fc\'ca\'b9\'b5\'c3\'c4\'a3\'bf\'e9\'bf\'c9\'d2\'d4\'bd\'d3
\'ca\'dc\'d2\'d4\'ca\'fd\'d7\'d6\'bf\'aa\'ca\'bc\'b5\'c4\'d7\'d6\'b7\'fb\'b4\'ae\'b2\'ce\'ca\'fd\'b6\'f8\'b2\'bb\'bb\'e1\'bb\'ec\loch\af0\hich\af0\dbch\f17 \'cf\'fd\'a1\'a3}{
\par {\listtext\pard\plain\b\fs21\kerning2\loch\af0 \hich\af0\dbch\af17\loch\f0 10\dbch\f17 \'a3\'ae\tab}}{\b \hich\af0\dbch\af17\loch\f0 Symmetrical Multi-Processing }{\loch\af0\hich\af0\dbch\f17 \'c4\'da\'ba\'cb\'b2\'bb\'d4\'d9\'d4\'da\'d2\'bb\'b8\'f6
\'b4\'f3\'b5\'c4\'c1\'ac\'bb\'b7\'cb\'f8\'c4\'da\'b9\'a4\'d7\'f7\'c1\'cb\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'d2\'e2\'ce\'b6\'d7\'c5\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'b1\'d8\'d0\'eb\'d7\'a2\'d2\'e2\'b5\'bd}{
\hich\af0\dbch\af17\loch\f0 SMP}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3}{
\par }\pard\plain \s1\qj \fi707\li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\cufi200 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281313
}\loch\af0\hich\af0\dbch\f17 \'b3\'fd\loch\af0\hich\af0\dbch\f17 \'b4\'cb\'d2\'d4\'cd\'e2}{\fs36 {\*\bkmkend _Toc491281313}
\par }\pard\plain \qj \fi435\li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'bf\'c9\'d2\'d4\'ba\'dc
\'c8\'dd\'d2\'d7\'b5\'c4\'d4\'da\'b1\'be\'ca\'e9\'d6\'d0\'bc\'d3\'c8\'eb\'bc\'b8\'d5\'c2\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'bf\'c9\'d2\'d4\'d4\'f6\'bc\'d3\'d2\'bb\'d5\'c2\'b9\'d8\'d3\'da\'b4\'b4\'bd\'a8\'d0\'c2\'ce\'c4\'bc\'fe\'cf\'b5\'cd\'b3
\'b5\'c4\'c4\'da\'c8\'dd\'a3\'ac\'bb\'f2\'d5\'df\'d4\'f6\'bc\'d3\'d0\'c2\'b5\'c4\'d0\'ad\'d2\'e9\'d5\'bb\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'d2\'b2\'bf\'c9\'d2\'d4\'d4\'f6\'bc\'d3\'b6\'d4\'ce\'d2\'c3\'c7\'b4\'d3\'c0\'b4\'c3\'bb\'bd\'d3\'b4\'a5
\'b5\'bd\'b5\'c4\'c4\'da\'ba\'cb\'bb\'fa\'d6\'c6\'b5\'c4\'bd\'e2\'ca\'cd\'a3\'ac\'b1\'c8\'c8\'e7\'c0\'a6\'b0\'f3\'b5\'bc\'c8\'eb\'bb\'f2\'b4\'c5\'c5\'cc\'bd\'bb\'bb\'a5\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'b5\'ab\'ca\'c7\'ce\'d2\'c3\'bb\'d3\'d0\'a1\'a3\'ce\'d2\'d0\'b4\'ca\'e9\'b5\'c4\'c4\'bf\'b5\'c4\'ca\'c7\'d2\'aa\'b6\'d4\'c9\'f1\'c3\'d8\'b5\'c4\'c4\'da\'ba\'cb\'b1\'e0\'b3\'cc\'bd\'f8\'d0\'d0\'c6\'f4\'c3\'c9\'a3\'ac\'bd\'b2
\'bd\'e2\'d7\'ee\'bb\'f9\'b1\'be\'b5\'c4\'bc\'bc\'ca\'f5\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b6\'d4\'d3\'da\'b6\'d4\'c4\'da\'ba\'cb\'b1\'e0\'b3\'cc\'d3\'d0\'c5\'a8\'ba\'f1\'d0\'cb\'c8\'a4\'b5\'c4\'c8\'cb\'a3\'ac\'ce\'d2\'bf\'c9\'d2\'d4\'cf\'f2\'cb\'fb
\'c3\'c7\'cd\'c6\'bc\'f6\'d2\'bb\'b8\'f6\'d7\'ca\'d4\'b4\'cd\'f8\'d5\'be\'a3\'ba}{\hich\af0\dbch\af17\loch\f0 http:.//jungla.dit.upm.es/~jmseyas/linux/kernel/hackers-docs.html}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b6\'f8
\'c7\'d2\'a3\'ac\'d5\'fd\'c8\'e7}{\hich\af0\dbch\af17\loch\f0 Linus}{\loch\af0\hich\af0\dbch\f17 \'cb\'f9\'cb\'b5\'a3\'ac\'d1\'a7\'cf\'b0\'c4\'da\'ba\'cb\'b5\'c4\'d7\'ee\'ba\'c3\'b7\'bd\'b7\'a8\'be\'cd\'ca\'c7\'d7\'d4\'bc\'ba\'b6\'c1\'d4\'b4\'b4\'fa
\'c2\'eb\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'c4\'e3\'cf\'a3\'cd\'fb\'b8\'fc\'b6\'e0\'b5\'c4\'b6\'cc\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'b5\'c4\'b4\'fa\'c2\'eb\'a3\'ac\'ce\'d2\'cd\'c6\'bc\'f6}{\hich\af0\dbch\af17\loch\f0 Phrack}{
\loch\af0\hich\af0\dbch\f17 \'d4\'d3\'d6\'be\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'bc\'b4\'ca\'b9\'c4\'e3\'b6\'d4\'b0\'b2\'c8\'ab\'d0\'d4\'b2\'bb\'b8\'d0\'d0\'cb\'c8\'a4\'a3\'ac\'be\'a1\'b9\'dc\'d7\'f7\'ce\'aa\'d2\'bb\'b8\'f6\'b3\'cc\'d0\'f2\'d4\'b1
\'c4\'e3\'d3\'a6\'b8\'c3\'bf\'bc\'c2\'c7\'b0\'b2\'c8\'ab\'d0\'d4\'a3\'ac\'c4\'c7\'c0\'ef\'d3\'d0\'d0\'ed\'b6\'e0\'ba\'dc\'ba\'c3\'b5\'c4\'c0\'fd\'d7\'d3\'bf\'c9\'d2\'d4\'b8\'e6\'cb\'df\'c4\'e3\'bf\'c9\'d2\'d4\'d4\'da\'c4\'da\'ba\'cb\'c0\'ef\'d7\'f6
\'ca\'b2\'c3\'b4\'a3\'ac\'d5\'e2\'d0\'a9\'c0\'fd\'d7\'d3\'b6\'bc\'ba\'dc\'b6\'cc\'d0\'a1\'a3\'ac\'c8\'dd\'d2\'d7\'bf\'b4\'b6\'ae\'a1\'a3}{
\par }{\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'cf\'a3\'cd\'fb\'ce\'d2\'ce\'aa\'c4\'e3\'b3\'c9\'ce\'aa\'b8\'fc\'ba\'c3\'b5\'c4\'b3\'cc\'d0\'f2\'d4\'b1\'cc\'e1\'b9\'a9\'c1\'cb\'b0\'ef\'d6\'fa\'a3\'ac\'bb\'f2\'d5\'df\'d6\'c1\'c9\'d9\'d4\'da\'bc\'bc\'ca\'f5\'d6\'d0
\'cf\'d4\'ca\'be\'b3\'f6\'c1\'cb\'c0\'d6\'c8\'a4\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'c8\'e7\'b9\'fb\'c4\'e3\'d0\'b4\'b3\'f6\'c1\'cb\'d3\'d0\'d3\'c3\'b5\'c4\'c4\'da\'ba\'cb\'c4\'a3\'bf\'e9\'a3\'ac\'ce\'d2\'cf\'a3\'cd\'fb\'c4\'e3\'c4\'dc\'d4\'da}{
\hich\af0\dbch\af17\loch\f0 GPL}{\loch\af0\hich\af0\dbch\f17 \'cf\'c2\loch\af0\hich\af0\dbch\f17 \'b7\'a2\'b1\'ed\'a3\'ac\'c4\'c7\'c3\'b4\'ce\'d2\'d2\'b2\'bf\'c9\'d2\'d4\'ca\'b9\'d3\'c3\'a1\'a3}{
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\fs36 
\par }\pard\plain \s1\qj \li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281314}
\loch\af0\hich\af0\dbch\f17 \'c6\'e4\loch\af0\hich\af0\dbch\f17 \'cb\'fb}{\fs36 {\*\bkmkend _Toc491281314}
\par }\pard\plain \s2\qj \li0\ri0\sb260\sa260\sl416\slmult1\keep\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \b\fs32\lang1033\langfe2052\kerning2\loch\af1\hich\af1\dbch\af21\cgrid\langnp1033\langfenp2052 {
{\*\bkmkstart _Toc491281315}\hich\af1\dbch\af21\loch\f1 Goods and Services{\*\bkmkend _Toc491281315}\hich\af1\dbch\af21\loch\f1  }{\kerning36 
\par }\pard\plain \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\hich\af0\dbch\af17\loch\f0 
I hope nobody minds the shameless promotions here. They are all things which are likely to be of use to beginning Linux Kernel Module programmers. 
\par }\pard\plain \s3\qj \li0\ri0\sb260\sa260\sl416\slmult1\keep\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0 \b\fs32\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs24 
\hich\af0\dbch\af17\loch\f0 Getting this Book in Print }{\fs24\kerning36 
\par }\pard\plain \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\hich\af0\dbch\af17\loch\f0 
The Coriolis group is going to print this book sometimes in the summer of '99. I\hich\af0\dbch\af17\loch\f0 f this is already summer, and you want this book in print, you can go easy on your printer and buy it in a nice, bound form. 
\par }\pard\plain \s2\qj \li0\ri0\sb260\sa260\sl416\slmult1\keep\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \b\fs32\lang1033\langfe2052\kerning2\loch\af1\hich\af1\dbch\af21\cgrid\langnp1033\langfenp2052 {
{\*\bkmkstart _Toc491281316}\hich\af1\dbch\af21\loch\f1 GNU GENERAL PUBLIC LICENSE{\*\bkmkend _Toc491281316}
\par }\pard\plain \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\hich\af0\dbch\af17\loch\f0 
Printed below is the GNU General Public License (the }{\cs30\i \hich\af0\dbch\af17\loch\f0 GPL}{\hich\af0\dbch\af17\loch\f0  or }{\cs30\i \hich\af0\dbch\af17\loch\f0 copyleft}{\hich\af0\dbch\af17\loch\f0 ), under \hich\af0\dbch\af17\loch\f0 
which this book is licensed. 
\par }{\b \hich\af0\dbch\af17\loch\f0 Version 2, June 1991}{
\par }{\b \hich\af0\dbch\af17\loch\f0 \hich\f0 Copyright \'a9\loch\f0 
1989, 1991 Free Software Foundation, Inc. 675 Mass Ave, Cambridge, MA 02139, USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not all\hich\af0\dbch\af17\loch\f0 owed. }{
\par }{\b \hich\af0\dbch\af17\loch\f0 P}{\b\fs20 \hich\af0\dbch\af17\loch\f0 REAMBLE}{
\par }{\b \hich\af0\dbch\af17\loch\f0 
The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software-to make sure the software is f
\hich\af0\dbch\af17\loch\f0 
ree for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Library General Pu
\hich\af0\dbch\af17\loch\f0 b\hich\af0\dbch\af17\loch\f0 lic License instead.) You can apply it to your programs, too. }{
\par }{\b \hich\af0\dbch\af17\loch\f0 When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (an\hich\af0\dbch\af17\loch\f0 
d charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. }{
\par }{\b \hich\af0\dbch\af17\loch\f0 To protect your rights, we need to mak\hich\af0\dbch\af17\loch\f0 
e restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it. }{
\par }{\b \hich\af0\dbch\af17\loch\f0 For example, if you distribut\hich\af0\dbch\af17\loch\f0 
e copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. }{

\par }{\b \hich\af0\dbch\af17\loch\f0 We pro\hich\af0\dbch\af17\loch\f0 tect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software. }{
\par }{\b \hich\af0\dbch\af17\loch\f0 Also, for each author's protection and ours, we want to make certain that everyone\hich\af0\dbch\af17\loch\f0 
 understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on
\hich\af0\dbch\af17\loch\f0  \hich\af0\dbch\af17\loch\f0 the original authors' reputations. }{
\par }{\b \hich\af0\dbch\af17\loch\f0 Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary
\hich\af0\dbch\af17\loch\f0 . To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all. }{
\par }{\b \hich\af0\dbch\af17\loch\f0 The precise terms and conditions for copying, distribution and modification follow. }{
\par }{\b \hich\af0\dbch\af17\loch\f0 GNU GENERAL PUBLIC LICENSE}{
\par }{\b \hich\af0\dbch\af17\loch\f0 TERMS AND CONDITIONS \hich\af0\dbch\af17\loch\f0 FOR COPYING, DISTRIBUTION AND MODIFICATION}{
\par \hich\af0\dbch\af17\loch\f0 0. 
\par \hich\af0\dbch\af17\loch\f0 This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The `Program', below, refer
\hich\af0\dbch\af17\loch\f0 
s to any such program or work, and a `work based on the Program' means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated
\hich\af0\dbch\af17\loch\f0  \hich\af0\dbch\af17\loch\f0 into another language. (Hereinafter, translation is included without limitation in the term `modification'.) Each licensee is addressed as `you'. 
\par \hich\af0\dbch\af17\loch\f0 Activities other than copying, distribution and modification are not covered by this License; they are outsid\hich\af0\dbch\af17\loch\f0 
e its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on
\hich\af0\dbch\af17\loch\f0  \hich\af0\dbch\af17\loch\f0 what the Program does. 
\par \hich\af0\dbch\af17\loch\f0 1. 
\par \hich\af0\dbch\af17\loch\f0 
You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of 
\hich\af0\dbch\af17\loch\f0 warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program. 
\par \hich\af0\dbch\af17\loch\f0 You may charge a fee for the physical act of transferring a co\hich\af0\dbch\af17\loch\f0 py, and you may at your option offer warranty protection in exchange for a fee. 
\par \hich\af0\dbch\af17\loch\f0 2. 
\par \hich\af0\dbch\af17\loch\f0 You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under \hich\af0\dbch\af17\loch\f0 
the terms of Section 1 above, provided that you also meet all of these conditions: 
\par \hich\af0\dbch\af17\loch\f0 a. 
\par \hich\af0\dbch\af17\loch\f0 You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. 
\par \hich\af0\dbch\af17\loch\f0 b. 
\par \hich\af0\dbch\af17\loch\f0 You must \hich\af0\dbch\af17\loch\f0 
cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. 
\par \hich\af0\dbch\af17\loch\f0 c. 
\par \hich\af0\dbch\af17\loch\f0 If the modified program n\hich\af0\dbch\af17\loch\f0 
ormally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty 
\hich\af0\dbch\af17\loch\f0 (\hich\af0\dbch\af17\loch\f0 
or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an 
\hich\af0\dbch\af17\loch\f0 a\hich\af0\dbch\af17\loch\f0 nnouncement, your work based on the Program is not required to print an announcement.) 
\par \hich\af0\dbch\af17\loch\f0 These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered indep\hich\af0\dbch\af17\loch\f0 
endent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the di
\hich\af0\dbch\af17\loch\f0 s\hich\af0\dbch\af17\loch\f0 tribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. 
\par \hich\af0\dbch\af17\loch\f0 Thus, it is not the intent of this section to claim rights or contes\hich\af0\dbch\af17\loch\f0 
t your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program. 
\par \hich\af0\dbch\af17\loch\f0 In addition, mere aggregation of another work not based on the Program with the \hich\af0\dbch\af17\loch\f0 
Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. 
\par \hich\af0\dbch\af17\loch\f0 3. 
\par \hich\af0\dbch\af17\loch\f0 You may copy and distribute the Program (or a work based on it, under Section 2) in object cod\hich\af0\dbch\af17\loch\f0 
e or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following: 
\par \hich\af0\dbch\af17\loch\f0 a. 
\par \hich\af0\dbch\af17\loch\f0 Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 abo\hich\af0\dbch\af17\loch\f0 
ve on a medium customarily used for software interchange; or, 
\par \hich\af0\dbch\af17\loch\f0 b. 
\par \hich\af0\dbch\af17\loch\f0 Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete mach\hich\af0\dbch\af17\loch\f0 
ine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, 
\par \hich\af0\dbch\af17\loch\f0 c. 
\par \hich\af0\dbch\af17\loch\f0 Accompany it with the information you received as to the offer to distribute cor\hich\af0\dbch\af17\loch\f0 
responding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) 
\par \hich\af0\dbch\af17\loch\f0 The source code for a work means the pr\hich\af0\dbch\af17\loch\f0 
eferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and i
\hich\af0\dbch\af17\loch\f0 n\hich\af0\dbch\af17\loch\f0 
stallation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating sy
\hich\af0\dbch\af17\loch\f0 s\hich\af0\dbch\af17\loch\f0 tem on which the executable runs, unless that component itself accompanies the executable. 
\par \hich\af0\dbch\af17\loch\f0 If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code fro\hich\af0\dbch\af17\loch\f0 
m the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code. 
\par \hich\af0\dbch\af17\loch\f0 4. 
\par \hich\af0\dbch\af17\loch\f0 You may not copy, modify, sublicense, or distribute the Program except as expressly provided under t\hich\af0\dbch\af17\loch\f0 
his License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not h
\hich\af0\dbch\af17\loch\f0 a\hich\af0\dbch\af17\loch\f0 ve their licenses terminated so long as such parties remain in full compliance. 
\par \hich\af0\dbch\af17\loch\f0 5. 
\par \hich\af0\dbch\af17\loch\f0 You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivativ\hich\af0\dbch\af17\loch\f0 
e works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions
\hich\af0\dbch\af17\loch\f0  \hich\af0\dbch\af17\loch\f0 for copying, distributing or modifying the Program or works based on it. 
\par \hich\af0\dbch\af17\loch\f0 6. 
\par \hich\af0\dbch\af17\loch\f0 Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify\hich\af0\dbch\af17\loch\f0 
 the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License. 
\par \hich\af0\dbch\af17\loch\f0 7. 
\par \hich\af0\dbch\af17\loch\f0 If, as a conse\hich\af0\dbch\af17\loch\f0 
quence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do 
\hich\af0\dbch\af17\loch\f0 n\hich\af0\dbch\af17\loch\f0 
ot excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For examp
\hich\af0\dbch\af17\loch\f0 l\hich\af0\dbch\af17\loch\f0 
e, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribut
\hich\af0\dbch\af17\loch\f0 i\hich\af0\dbch\af17\loch\f0 on of the Program. 
\par \hich\af0\dbch\af17\loch\f0 If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances. 
\par \hich\af0\dbch\af17\loch\f0 It is not the pu\hich\af0\dbch\af17\loch\f0 
rpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemen
\hich\af0\dbch\af17\loch\f0 t\hich\af0\dbch\af17\loch\f0 
ed by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing
\hich\af0\dbch\af17\loch\f0  \hich\af0\dbch\af17\loch\f0 to distribute software through any other system and a licensee cannot impose that choice. 
\par \hich\af0\dbch\af17\loch\f0 This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. 
\par \hich\af0\dbch\af17\loch\f0 8. 
\par \hich\af0\dbch\af17\loch\f0 If the distribution and/or use of the Progra\hich\af0\dbch\af17\loch\f0 
m is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distri
\hich\af0\dbch\af17\loch\f0 b\hich\af0\dbch\af17\loch\f0 ution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. 
\par \hich\af0\dbch\af17\loch\f0 9. 
\par \hich\af0\dbch\af17\loch\f0 The Free Software Foundation may publish revised and/or new versions of the General Publ\hich\af0\dbch\af17\loch\f0 
ic License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. 
\par \hich\af0\dbch\af17\loch\f0 Each version is given a distinguishing version number. If the Program specifies a version numbe\hich\af0\dbch\af17\loch\f0 
r of this License which applies to it and `any later version', you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version nu
\hich\af0\dbch\af17\loch\f0 m\hich\af0\dbch\af17\loch\f0 ber of this License, you may choose any version ever published by the Free Software Foundation. 
\par \hich\af0\dbch\af17\loch\f0 10. 
\par \hich\af0\dbch\af17\loch\f0 If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permi\hich\af0\dbch\af17\loch\f0 
ssion. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our fr
\hich\af0\dbch\af17\loch\f0 e\hich\af0\dbch\af17\loch\f0 e software and of promoting the sharing and reuse of software generally. 
\par 
\par \hich\af0\dbch\af17\loch\f0 NO WARRANTY
\par \hich\af0\dbch\af17\loch\f0 11. 
\par \hich\af0\dbch\af17\loch\f0 BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRI\hich\af0\dbch\af17\loch\f0 
TING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM `AS IS' WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIR
\hich\af0\dbch\af17\loch\f0 E\hich\af0\dbch\af17\loch\f0  RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 
\par \hich\af0\dbch\af17\loch\f0 12. 
\par \hich\af0\dbch\af17\loch\f0 IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL A\hich\af0\dbch\af17\loch\f0 
NY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PRO
\hich\af0\dbch\af17\loch\f0 G\hich\af0\dbch\af17\loch\f0 
RAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIB
\hich\af0\dbch\af17\loch\f0 I\hich\af0\dbch\af17\loch\f0 LITY OF SUCH DAMAGES. 
\par }{\b \hich\af0\dbch\af17\loch\f0 END OF TERMS AND CONDITIONS}{
\par }{\b \hich\af0\dbch\af17\loch\f0 A}{\b\fs20 \hich\af0\dbch\af17\loch\f0 PPENDIX: }{\b \hich\af0\dbch\af17\loch\f0 H}{\b\fs20 \hich\af0\dbch\af17\loch\f0 OW TO }{\b \hich\af0\dbch\af17\loch\f0 A}{\b\fs20 \hich\af0\dbch\af17\loch\f0 PPLY }{\b 
\hich\af0\dbch\af17\loch\f0 T}{\b\fs20 \hich\af0\dbch\af17\loch\f0 HESE }{\b \hich\af0\dbch\af17\loch\f0 T}{\b\fs20 \hich\af0\dbch\af17\loch\f0 ERMS TO }{\b \hich\af0\dbch\af17\loch\f0 Y}{\b\fs20 \hich\af0\dbch\af17\loch\f0 OUR }{\b 
\hich\af0\dbch\af17\loch\f0 N}{\b\fs20 \hich\af0\dbch\af17\loch\f0 EW }{\b \hich\af0\dbch\af17\loch\f0 P}{\b\fs20 \hich\af0\dbch\af17\loch\f0 ROGRAMS}{
\par }{\b \hich\af0\dbch\af17\loch\f0 If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free softw\hich\af0\dbch\af17\loch\f0 
are which everyone can redistribute and change under these terms. }{
\par }{\b \hich\af0\dbch\af17\loch\f0 To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file shoul\hich\af0\dbch\af17\loch\f0 
d have at least the `copyright' line and a pointer to where the full notice is found. }{
\par }{\b \hich\af0\dbch\af17\loch\f0 \hich\f0 one line to give the program's name and a brief idea of what it does. Copyright \'a9\loch\f0 19yy name of author }{
\par }{\b \hich\af0\dbch\af17\loch\f0 This program is free software; you can redistribute it and/or modif\hich\af0\dbch\af17\loch\f0 
y it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. }{
\par }{\b \hich\af0\dbch\af17\loch\f0 This program is distributed in the hope that it will be useful, but WITHOUT ANY WA\hich\af0\dbch\af17\loch\f0 
RRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. }{
\par }{\b \hich\af0\dbch\af17\loch\f0 You should have received a copy of the GNU General Public License along with this program; if not, write\hich\af0\dbch\af17\loch\f0  to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. }{
\par }{\b \hich\af0\dbch\af17\loch\f0 Also add information on how to contact you by electronic and paper mail. }{
\par }{\b \hich\af0\dbch\af17\loch\f0 If the program is interactive, make it output a short notice like this when it starts in an interacti\hich\af0\dbch\af17\loch\f0 ve mode: }{
\par 
\par }{\b \hich\af0\dbch\af17\loch\f0 
The hypothetical commands show w and show c should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than show w and show c; they could even be mouse-clicks or menu items-what
\hich\af0\dbch\af17\loch\f0 ever suits your program. }{
\par }{\b \hich\af0\dbch\af17\loch\f0 You should also get your employer (if you work as a programmer) or your school, if any, to sign a `copyright disclaimer' for the program, if necessary. Here is a sample; alter the names: }{
\par }{\b \hich\af0\dbch\af17\loch\f0 Yoyodyne, Inc., hereby disclaims all copyr\hich\af0\dbch\af17\loch\f0 ight interest in the program Gnomovision (which makes passes at compilers) written by James Hacker. }{
\par }{\b\i \hich\af0\dbch\af17\loch\f0 signature of Ty Coon}{\b \hich\af0\dbch\af17\loch\f0 , 1 April 1989 \line Ty Coon, President of Vice }{
\par }{\b \hich\af0\dbch\af17\loch\f0 This General Public License does not permit incorporating your program into proprietary pro\hich\af0\dbch\af17\loch\f0 
grams. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Library General Public License instead of this License. }{
\par 
\par 
\par }\pard\plain \s1\qj \fi707\li0\ri0\keepn\nowidctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\cufi200 \b\fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\fs36 {\*\bkmkstart _Toc491281317
}\loch\af0\hich\af0\dbch\f17 \'d7\'a2}{\fs36 {\*\bkmkend _Toc491281317}
\par }\pard\plain \qj \li0\ri0\nowidctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs21\lang1033\langfe2052\kerning2\loch\af0\hich\af0\dbch\af17\cgrid\langnp1033\langfenp2052 {\hich\af0\dbch\af17\loch\f0 1.1}{\loch\af0\hich\af0\dbch\f17 \'ce\'d2
\'c3\'bb\'d3\'d0\'d2\'d4}{\hich\af0\dbch\af17\loch\f0 root}{\loch\af0\hich\af0\dbch\f17 \'c9\'ed\'b7\'dd\'b1\'e0\'d2\'eb\'ca\'c7\'d2\'f2\'ce\'aa\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 root}{\loch\af0\hich\af0\dbch\f17 \'d7\'f6\'b5\'c4\'ca\'c2\'c7\'e9
\'d4\'bd\'c9\'d9\'a3\'ac\'cf\'b5\'cd\'b3\'be\'cd\'d4\'bd\'b0\'b2\'c8\'ab\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'ce\'d2\'ca\'c7\'d7\'f6\'bc\'c6\'cb\'e3\'bb\'fa\'b0\'b2\'c8\'ab\'b9\'a4\'d7\'f7\'b5\'c4\'a3\'ac\'cb\'f9\'d2\'d4\'b1\'c8\'bd\'cf\'c6\'ab\'d6\'b4
\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 3.1}{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'ca\'c7\'d4\'da}{\hich\af0\dbch\af17\loch\f0 2.0}{\loch\af0\hich\af0\dbch\f17 \'b0\'e6\'b1\'be\'d6\'d0\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d4\'da}{\hich\af0\dbch\af17\loch\f0 2.2}{
\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'c8\'e7\'b9\'fb\'b0\'d1\'cb\'f7\'d2\'fd\'bd\'da\'b5\'e3\'c9\'e8\'ce\'aa}{\hich\af0\dbch\af17\loch\f0 0}{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'ca\'c7\'d7\'d4\'b6\'af\'cd\'ea\'b3\'c9\'b5\'c4\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 4.1}{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'c1\'bd\'b8\'f6\'b5\'c4\'c7\'f8\'b1\'f0\'ca\'c7\'ce\'c4\'bc\'fe\'b2\'d9\'d7\'f7\'ca\'c7\'b4\'a6\'c0\'ed\'ce\'c4\'bc\'fe\'b1\'be\'c9\'ed\'a3\'ac\'b6\'f8\'cb\'f7\'d2\'fd\'bd\'da\'b5\'e3
\'b2\'d9\'d7\'f7\'ca\'b1\'b4\'a6\'c0\'ed\'d2\'fd\'d3\'c3\'ce\'c4\'bc\'fe\'b5\'c4\'b7\'bd\'b7\'a8\'a3\'ac\'b1\'c8\'c8\'e7\'b4\'b4\'bd\'a8\'c1\'ac\'bd\'d3\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 5.1}{\loch\af0\hich\af0\dbch\f17 \'d7\'a2\'d2\'e2\'d5\'e2\'c0\'ef\'b6\'c1\'ba\'cd\'d0\'b4\'bd\'c7\'c9\'ab\'d4\'d9\'b4\'ce\'bb\'bb\'ce\'bb\'a3\'ac\'d4\'da}{\hich\af0\dbch\af17\loch\f0 ioctl}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0
\'b6\'c1\'ca\'c7\'cf\'f2\'c4\'da\'ba\'cb\'b7\'a2\'d0\'c5\'cf\'a2\'a3\'ac\'b6\'f8\'d0\'b4\'ca\'c7\'b4\'d3\'c4\'da\'ba\'cb\'b6\'c1\'d0\'c5\'cf\'a2\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 5.2 }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'ca\'c7\'b2\'bb\'c8\'b7\'c7\'d0\'b5\'c4\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'b1\'c8\'c8\'e7\'c4\'e3\'b2\'bb\'c4\'dc\'cd\'a8\'b9\'fd}{\hich\af0\dbch\af17\loch\f0 ioctl}{
\loch\af0\hich\af0\dbch\f17 \'b4\'ab\'b5\'dd\'d2\'bb\'b8\'f6\'bd\'e1\'b9\'b9\'cc\'e5\'a3\'ac\'b5\'ab\'ca\'c7\'bf\'c9\'d2\'d4\'b4\'ab\'b5\'dd\'d6\'b8\'cf\'f2\'cb\'fc\'b5\'c4\'d6\'b8\loch\af0\hich\af0\dbch\f17 \'d5\'eb\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 6.1 }{\loch\af0\hich\af0\dbch\f17 \'b2\'bb\'bf\'c9\'c4\'dc\'d3\'d0\'a1\'a3\'d2\'f2\'ce\'aa\'d4\'da}{\hich\af0\dbch\af17\loch\f0 C}{\loch\af0\hich\af0\dbch\f17 \'d3\'ef\'d1\'d4\'d6\'d0\'c4\'bf\'b1\'ea\'ce\'c4\'bc\'fe\'d6\'bb
\'d3\'d0\'c8\'ab\'be\'d6\'b1\'e4\'c1\'bf\'b5\'c4\'b5\'d8\'d6\'b7\'a3\'ac\'b6\'f8\'b2\'bb\'ca\'c7\'c0\'e0\'d0\'cd\'a1\'a3\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'be\'cd\'ca\'c7\'ce\'aa\'ca\'b2\'c3\'b4\'cd\'b7\'ce\'c4\'bc\'fe\'ca\'c7\'b1\'d8\'d2\'aa\'b5\'c4
\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 8.1 }{\loch\af0\hich\af0\dbch\f17 \'d7\'ee\'bc\'f2\'b5\'a5\'b5\'c4\'b0\'d1\'ce\'c4\'bc\'fe\'b1\'a3\'b3\'d6\'b4\'f2\'bf\'aa\'d7\'b4\'cc\'ac\'b5\'c4\'b7\'bd\'b7\'a8\'ca\'c7\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 tail \hich\f0 
\endash \loch\f0 f}{\loch\af0\hich\af0\dbch\f17 \'b4\'f2\'bf\'aa\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 8.2 }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'ca\'c7\'cb\'b5\'bd\'f8\'b3\'cc\'c8\'d4\'d4\'da\'c4\'da\'ba\'cb}{\loch\af0\dbch\af17\hich\f0 \emdash \emdash }{\loch\af0\hich\af0\dbch\f17 \'b6\'d4\'d3\'da\'bd\'f8\'b3\'cc\'c0\'b4
\'cb\'b5\'a3\'ac\'cb\'fc\'b7\'a2\'b3\'f6}{\hich\af0\dbch\af17\loch\f0 open}{\loch\af0\hich\af0\dbch\f17 \'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'a3\'ac\'b6\'f8\'d5\'e2\'b8\'f6\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'bb\'b9\'c3\'bb\'d3\'d0\'b7\'b5\'bb\'d8\'a1\'a3
\loch\af0\hich\af0\dbch\f17 \'b6\'e0\'ca\'fd\'c7\'e9\'bf\'f6\'cf\'c2\'a3\'ac\'d4\'da\'b7\'a2\'b3\'f6\'cf\'b5\'cd\'b3\'b5\'f7\'d3\'c3\'ba\'cd\'b7\'b5\'bb\'d8\'d6\'ae\'bc\'e4\'b5\'c4\'ca\'b1\'bc\'e4\'c4\'da\'a3\'ac\'bd\'f8\'b3\'cc\'b2\'bb\'d6\'aa\'b5\'c0
\'b1\'f0\'c8\'cb\'d4\'da\'ca\'b9\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 8.3 }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'ca\'c7\'d2\'f2\'ce\'aa\'ce\'d2\'c3\'c7\'ca\'b9\'d3\'c3\'c1\'cb}{\hich\af0\dbch\af17\loch\f0 module_interruptible_sleep_on}{\loch\af0\hich\af0\dbch\f17 \'a1\'a3\'ce\'d2\'c3\'c7\'bf\'c9
\'d2\'d4\'ca\'b9\'d3\'c3}{\hich\af0\dbch\af17\loch\f0 module_sleep_on}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'b5\'ab\'ca\'c7\'bb\'e1\'bc\'a4\'c5\'ad\'c4\'c7\'d0\'a9\'bf\'d8\'d6\'c6\'b3\'cc\'d0\'f2\'b1\'bb\'b4\'f2\'c8\'c5\'b5\'c4
\'d3\'c3\'bb\'a7\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 9.1 Teletype}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\'d7\'ee\'b3\'f5\'ca\'c7\'d3\'c3\'c0\'b4\'ba\'cd}{\hich\af0\dbch\af17\loch\f0 Unix}{\loch\af0\hich\af0\dbch\f17 \'cf\'b5\'cd\'b3\'cd\'a8\'d0\'c5\'b5\'c4\'bc\'fc\'c5\'cc}{
\hich\af0\dbch\af17\loch\f0 -}{\loch\af0\hich\af0\dbch\f17 \'b4\'f2\'d3\'a1\'bb\'fa\'b5\'c4\'bd\'e1\'ba\'cf\'cc\'e5\'a3\'ac\'cf\'d6\'d4\'da\'b3\'c9\'c1\'cb}{\hich\af0\dbch\af17\loch\f0 Unix}{\loch\af0\hich\af0\dbch\f17 \'b3\'cc\'d0\'f2\'b5\'c4\'ce\'c4
\'b1\'be\'c1\'f7\'b5\'c4\'b8\'c5\'c0\'a8\'a3\'ac\'ce\'de\'c2\'db\'ca\'c7\'ce\'ef\'c0\'ed\'d6\'d5\'b6\'cb\'a1\'a2}{\hich\af0\dbch\af17\loch\f0 X}{\loch\af0\hich\af0\dbch\f17 \'cf\'d4\'ca\'be\'b5\'c4\'d2\'bb\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 xterm}{
\loch\af0\hich\af0\dbch\f17 \'a1\'a2\'cd\'f8\'c2\'e7\'c1\'ac\'bd\'d3\'bb\'b9\'ca\'c7\'c6\'e4\'cb\'fb\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 10.1 }{\loch\af0\hich\af0\dbch\f17 \'cb\'fc\'c3\'c7\'c6\'e4\'ca\'b5\'ca\'c7\'d2\'bb\'d1\'f9\'b5\'c4\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 11.1 }{\loch\af0\hich\af0\dbch\f17 \'d5\'e2\'ca\'c7}{\hich\af0\dbch\af17\loch\f0 Linux}{\loch\af0\hich\af0\dbch\f17 \'b7\'a2\'d4\'b4\'b5\'c4}{\hich\af0\dbch\af17\loch\f0 Intel}{\loch\af0\hich\af0\dbch\f17 \'bd\'e1\'b9\'b9
\'c9\'cf\'b5\'c4\'b1\'ea\'d7\'bc\'b7\'bd\'b7\'a8\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 11.2 queue_task_irq}{\loch\af0\hich\af0\dbch\f17 \'ca\'c7\'d3\'c3\'d2\'bb\'b8\'f6\'c8\'ab\'be\'d6\'cb\'f8\'c0\'b4\'b1\'a3\'bb\'a4\'b2\'bb\'ca\'dc\'b4\'cb\'d3\'b0\'cf\'ec\loch\af0\hich\af0\dbch\f17 \'a3\'ac
\loch\af0\hich\af0\dbch\f17 \'d4\'da}{\hich\af0\dbch\af17\loch\f0 2.2}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'c3\'bb\'d3\'d0}{\hich\af0\dbch\af17\loch\f0 queue_task_irq}{\loch\af0\hich\af0\dbch\f17 \'a3\'ac\loch\af0\hich\af0\dbch\f17 \'b6\'f8}{
\hich\af0\dbch\af17\loch\f0 queue_task}{\loch\af0\hich\af0\dbch\f17 \'ca\'c7\'b1\'bb\'cb\'f8\'b1\'a3\'bb\'a4\'b5\'c4\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 12.1 }{\loch\af0\hich\af0\dbch\f17 \'c0\'fd\'cd\'e2\'ca\'c7\'cf\'df\'c1\'ac\'bd\'f8\'b3\'cc\'a3\'ac\'bf\'c9\'d2\'d4\'cd\'ac\'ca\'b1\'d4\'da\'bc\'b8\'b8\'f6}{\hich\af0\dbch\af17\loch\f0 CPU}{\loch\af0\hich\af0\dbch\f17 \'c9\'cf
\'d4\'cb\'d0\'d0\'a1\'a3}{
\par \hich\af0\dbch\af17\loch\f0 12.2 }{\loch\af0\hich\af0\dbch\f17 \'b1\'ed\'ca\'be\'bf\'c9\'d2\'d4\'d4\'da}{\hich\af0\dbch\af17\loch\f0 SMP}{\loch\af0\hich\af0\dbch\f17 \'d6\'d0\'bf\'c9\'d2\'d4\'b0\'b2\'c8\'ab\'ca\'b9\'d3\'c3\loch\af0\hich\af0\dbch\f17 
\'a1\'a3}{
\par 
\par }}
